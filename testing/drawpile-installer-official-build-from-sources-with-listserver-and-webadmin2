#!/bin/bash
drawpilescriptversion=2.996003940
drawpile_script_version=$drawpilescriptversion
if echo $SSH_TTY | grep -q "/dev/pts/" ; then
	local_or_remote="Remote"
	# https://askubuntu.com/questions/538453/how-do-i-detect-if-the-current-session-is-an-ssh-session-via-bash
	# https://unix.stackexchange.com/questions/9605/how-can-i-detect-if-the-shell-is-controlled-from-ssh
else
    local_or_remote="Local"
fi
if [ x$DISPLAY != x ] ; then
	gui_status="GUI Enabled"
else
	gui_status="GUI Disabled"
fi
if lxterminal -v > /dev/null 2>&1; then
	terminal_in_use=lxterminal
	# Can run scripts in the background which doesn't make sense/work, so this should exit and reload into an interactive shell. 
	# echo "Using: lxterminal"
	tty -s; if [ $? -ne 0 ]; then lxterminal -e "$0"; exit; fi
elif gnome-terminal -h > /dev/null 2>&1; then
	terminal_in_use=gnome-terminal
	# Runs terminal in the forefront, so not necessary to run.
	# echo "Using: gnome-terminal"
	# tty -s; if [ $? -ne 0 ]; then gnome-terminal -e "$0"; exit; fi
else
	terminal_in_use=unknown-terminal
	# echo "Using: Unknown terminal"
fi
script_name=drawpile-installer-official-build-from-sources-with-listserver-and-webadmin2
script_name2=drawpile-installer-official-build-from-sources-server-mgmt
script_main_url=https://raw.githubusercontent.com/Bluestrings-Drawpile/PiDrawpile/master
script_directory="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
#In case I decide to change the name
github_account_name=Bluestrings-Drawpile
github_project_name=PiDrawpile
# When no path being used, should look like github_sub_folder_path=""
github_main_script_only_sub_folder_path=testing/
# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
# The two settings below affect the following:
#	- Web admin interface
#	- New web admin interface (list server admin only as of January 2025)
#	- PiHole administration protection (if installed on Raspberry Pi only)

# Refers to minimum length username and password can be used.
login_credentials_length_minimum="14"

# RECOMMENDED: If this variable below is set to disabled, 
#      then the script will not allow reusing a username and password on different login pages.
#      No username is allowed to match any password, nor is any password allowed to match any username.
# NOT RECOMMENDED: If this variable below is set to enabled (or any value other than: disabled ), 
#      then the script will allow reusing a username and password on different login pages.
#      If you reuse a username and password for web admin as well as the new web admin, then 
#      you cannot give the credentials out to non trusted users since that would enable them
#      to be able to log into the new web admin with those credentials to modify access to Change
#      server settings.
nginx_reusing_login_and_password_status="disabled"
# ----------------------------------------------------------------------------------
# Normal line
# sudo wget -q --show-progress "https://raw.githubusercontent.com/Bluestrings-Drawpile/PiDrawpile/master/testing/drawpile-installer-official-build-from-sources-with-listserver-and-webadmin2"
# sudo wget -q --force-progress "https://raw.githubusercontent.com/Bluestrings-Drawpile/PiDrawpile/master/testing/drawpile-installer-official-build-from-sources-with-listserver-and-webadmin2"
# Example line
# sudo wget -q --show-progress "https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/$github_main_script_only_sub_folder_path$script_name"
# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
# script_name=drawpile-installer-official-build-from-sources
# drawpile_script_overall_master_version_URL=https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/scripts-for-other-scripts-only/version.txt
# Do not alter script_main_url... instead, include subfolder in script_name variable. 
# See example included below for reference code.
#		sudo wget -q "$script_main_url/$script_name" --show-progress
# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
# Text Formatting
# https://stackoverflow.com/questions/2924697/how-does-one-output-bold-text-in-bash
# Refer to this link for lots of details and samples of colors (text + backgrounds)
# http://linuxcommand.org/lc3_adv_tput.php
#
bold=$(tput bold)
underline=$(tput smul)
blink=$(tput blink)
# black text on white background
standout=$(tput smso)
# Useful for hiding output I guess???
invis=$(tput invis)

# Text Colors
red=$(tput setaf 1)
green=$(tput setaf 2)
# Text Formatting - Yellow looks orange unless used in bold mode. Also looks brown in Fedora.
# yellow=$(tput setaf 3)
yellow=$(tput setaf 11)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)

#Background Colors
red_b=$(tput setab 1)
green_b=$(tput setab 2)
# Text Formatting - Yellow looks orange unless used in bold mode. Also looks brown in Fedora.
# yellow_b=$(tput setab 3)
yellow_b=$(tput setab 11)
blue_b=$(tput setab 4)
magenta_b=$(tput setab 5)
cyan_b=$(tput setab 6)

normal=$(tput sgr0)

TICK=$( printf '\u2714\n' )
CROSS=$( printf '\u274c\n' )
# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
app_installation_status_file=/home/drawpileuser/App-Installation-Status.txt
app_installation_status_file_bak=/home/drawpileuser/App-Installation-Status_bak.txt
# See the section below for the creation of the file in script.
# Cannot use sed on an empty file containing no characters or new lines. 
drawpile_configuration_values_file=/home/drawpileuser/Drawpile_Configuration_Values.txt
drawpile_configuration_values_file_bak=/home/drawpileuser/Drawpile_Configuration_Values_bak.txt

drawpile_completed_successfully_values_file=/home/drawpileuser/Drawpile_Completed_Values.txt
drawpile_completed_successfully_values_file_bak=/home/drawpileuser/Drawpile_Completed_Values_bak.txt
# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
# Script accepted arguments should go here that are typed after the script name.
dp_compile_check_bypass="$1"
echo
if [ -z "$dp_compile_check_bypass" ]; then
	echo "${bold}${green}No script argument set, not skipping compiling step if matching versions located.${normal}"
	echo "${bold}${green}Most users should not need to use this feature.${normal}"
	echo
	echo "${bold}${green}You can set an argument by typing one of the following:${normal}"
	echo "${bold}${green}false, FALSE, f, F, disable, disabled, d, DISABLE, DISABLED, D${normal}"
	echo "${bold}${green}     For example: ./script-name d${normal}"
elif [[ "$dp_compile_check_bypass" == "false" || "$dp_compile_check_bypass" == "FALSE" || "$dp_compile_check_bypass" == "f" || "$dp_compile_check_bypass" == "F"  ]] || [[ "$dp_compile_check_bypass" == "disable" || "$dp_compile_check_bypass" == "disabled" || "$dp_compile_check_bypass" == "d" || "$dp_compile_check_bypass" == "DISABLE" || "$dp_compile_check_bypass" == "DISABLED" || "$dp_compile_check_bypass" == "D" ]]; then
	echo "${bold}${yellow}         DISABLED: Skip compiling step if matching versions located.${normal}"
	dp_compile_check_bypass="false"
elif [[ "$dp_compile_check_bypass" == "true" || "$dp_compile_check_bypass" == "TRUE" || "$dp_compile_check_bypass" == "t" || "$dp_compile_check_bypass" == "T"  ]] || [[ "$dp_compile_check_bypass" == "enable" || "$dp_compile_check_bypass" == "enabled" || "$dp_compile_check_bypass" == "e" || "$dp_compile_check_bypass" == "ENABLE" || "$dp_compile_check_bypass" == "ENABLED" || "$dp_compile_check_bypass" == "E" ]]; then
	echo "${bold}${green}          ENABLED: Skip compiling step if matching versions located. (default behavior)${normal}"
	dp_compile_check_bypass="true"
elif [[ "$dp_compile_check_bypass" != "false" ]]; then
	echo "${bold}${red} INVALID ARGUMENT: Skip compiling step if matching versions located.${normal}"
	echo
	echo "${bold}${red}Proceeding as if dp_compile_check_bypass was not set (will skip compiling if versions match).${normal}"
	dp_compile_check_bypass="true"
else
	echo "${bold}${yellow}This message should not be visible for the dp_compile_check_bypass.${normal}"
fi
echo
echo
# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
<<comment_VNC_EOF
sudo apt-get -q -y install realvnc-vnc-server
apt-cache policy realvnc-vnc-server
comment_VNC_EOF
# ----------------------------------------------------------------------------------
<<comment_VMware_EOF
If running a VM with VMWare ... 
     https://docs.vmware.com/en/VMware-Tools/12.2.0/com.vmware.vsphere.vmwaretools.doc/GUID-C48E1F14-240D-4DD1-8D4C-25B6EBE4BB0F.html
sudo apt-get update
sudo apt-get -q -y install open-vm-tools-desktop
sudo apt-get -q -y install open-vm-tools
comment_VMware_EOF
# ----------------------------------------------------------------------------------
<<comment_DarkMode_EOF
If Dark mode preferred:
Start, Preferences, Main Menu Editor. Go to Preferences, turn on Theme and Appearance Settings. Click Ok.
Go back to Start, Preferences, Theme and Appearance Settings. Turn on "Adwaita-Dark". 
 
For the title bars, go to "Window Boarder" and select one of the following:
Dark Options:			Artwiz-boxed, Nightmware, Nightmware-01, Nightmware-02, Nightmware-03, Onyx, Onyx-Citrus
Preferred Options: 	Artwiz-boxed, Nightmware, Nightmware-02, Onyx
comment_DarkMode_EOF
# ----------------------------------------------------------------------------------
<<comment_geany_EOF
Enable Dark Themes for Geany Text: View, Change Color Scheme...

mkdir -p -v /home/$USER/Public/Programs && cd "/home/$USER/Public/Programs"
git clone https://github.com/codebrainz/geany-themes.git
cd geany-themes
./install.sh
cp -r /home/$USER/Public/Programs/geany-themes/colorschemes ~/.config/geany/colorschemes/


Enable Dark Themes One-liner Command for Geany Text: View, Change Color Scheme...

mkdir -p -v /home/$USER/Public/Programs && cd "/home/$USER/Public/Programs" && git clone https://github.com/codebrainz/geany-themes.git && cd geany-themes && ./install.sh && cp -r /home/$USER/Public/Programs/geany-themes/colorschemes ~/.config/geany/colorschemes/
comment_geany_EOF
# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
function pause () {
	read -s -n 1 -p "Press any key to continue . . ."
	echo ""
}

function command_die () {
    echo "$@" 1>&2
    exit 1
}

function drawpile_credits_function () {
	echo 'Made with the assistance of the original creator of Drawpile (Calle Laakkonen)'
	echo 'and the new developer askmeaboutloom! Donation links provided below.'
	echo
	echo 'Original Dev - Calle Laakkonen (PayPal):'
	echo "     ${underline}laakkonenc@gmail.com${normal}"
	echo
	echo 'Current Dev - askmeaboutloom: - Not yet provided'
	echo "     ${underline}https://github.com/askmeaboutlo0m${normal}"
	echo
	echo 'Script Creator - Bluestrings (Ko-Fi):'
	echo "     ${underline}https://ko-fi.com/bluestrings${normal}"
	echo
}

function drawpile_credits_urls_functions () {
	echo "Script Ver.	--> ${bold}$drawpile_script_version${normal}"
	echo "Google Doc 	--> ${underline}http://tinyurl.com/jx5oe4h ${normal}"
	echo "GitHub 		--> ${underline}https://github.com/$github_account_name/$github_project_name.git ${normal}"
}
echo
drawpile_credits_function
drawpile_credits_urls_functions
echo
pause
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
function language_check_and_verify_not_null_function () {
	# If value is null, check this value.
	lang=$( locale | grep LANGUAGE | cut -d= -f2 | cut -d_ -f1 )
	# echo "Value 01: $lang"
	if [ "$lang" == "" ]; then
		# If previous value is null, check this value instead.
		# Needed in Fedora (LANGUAGE not available), or if LANGUAGE= has nothing beside it.
		lang=$( locale | grep -m 1 LANG | cut -d= -f2 | cut -d_ -f1 )
		# echo "Value 02: $lang"
		if [ "$lang" == "" ]; then
			echo
			echo "${bold}${yellow}************************ POSSIBLE PROBLEM DETECTED *************************${normal}"
			echo 
			echo "${bold}${yellow}Unable to determine system language!${normal}"
			echo "${bold}${yellow}This may cause the script to not function properly!${normal}"
			echo
			echo "You may need to change your system's language in order for the script to"
			echo "     succeed. Certain prompts from text based utilities are checked"
			echo "     against English words, causing the script logic to fail in other"
			echo "     languages. A reboot of the system is required in most cases."
			echo "     "
			echo "${bold}${yellow}Pausing Script for 30 seconds . . . ${normal}"
			echo "     "
			echo "${bold}${yellow}************************ POSSIBLE PROBLEM DETECTED *************************${normal}"
			echo
			sleep 30
		fi
	fi
}

language_check_and_verify_not_null_function

if [ "$lang" == "en" ] || [ "$lang" == "C.UTF-8" ] || [ "$lang" == "" ]; then
	:
else
	echo
	echo "${bold}${red}***************************** PROBLEM DETECTED *****************************${normal}"
	echo 
	echo "${bold}${red}Not using English, currently using: $lang ${normal}"
	echo "${bold}${red}This will cause the script to not function properly!${normal}"
	echo
	echo "You'll need to change your system's language in order for the script to"
	echo "     succeed. Certain prompts from text based utilities are checked"
	echo "     against English words, causing the script logic to fail in other"
	echo "     languages. A reboot of the system is required in most cases."
	echo "     "
	# echo "Also, please check the user-dirs.dirs file to make sure it points at accurate"
	# echo "     folder names after reboot."
	# echo "sudo nano /home/USERNAME-HERE/.config/user-dirs.dirs"
	# Nevermind, the line doesn't appear necessary as it will still work, but just look mis-spelled for some reason... 
	echo "     "
	echo "${bold}${red}Exiting Script in 30 seconds . . . ${normal}"
	echo "     "
	echo "${bold}${red}***************************** PROBLEM DETECTED *****************************${normal}"
	echo
	sleep 30
	exit
fi
# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
what_linux_name=$( cat /etc/*-release | grep -i "^NAME=" | awk '{$1=$1};1' )
what_linux_flavor=$( cat /etc/*-release | grep -i "PRETTY_NAME=" | awk '{$1=$1};1' )
what_architecture=$( hostnamectl | grep -i "Architecture" | awk '{$1=$1};1' )
# verify_if_this_is_raspbian_or_debian --> https://raspberrypi.stackexchange.com/questions/6974/how-can-i-determine-which-os-image-i-am-running
verify_if_this_is_raspbian_or_debian=$( cat /etc/rpi-issue 2>/dev/null | grep -i "Raspberry Pi" | awk '{ print $1 " " $2 }' )
verify_pi_model=$( cat /proc/cpuinfo | tr -d '\t' | grep -i "Model:" | awk '{for (i=2; i<NF; i++) printf $i " "; print $NF}' | sed 's/Rev.*//' )
# Samples Below WITHOUT editing content
# Raspberry Pi Zero W Rev 1.1
# Raspberry Pi 3 Model B Rev 1.2
# Raspberry Pi 4 Model B Rev 1.1
# Samples Below WITH edited content based on string above
# Raspberry Pi Zero W
# Raspberry Pi 3 Model B
# Raspberry Pi 4 Model B
# ----------------------------------------------------------------------------------
<<comment_EOF
# NOTES ON SYSTEM PACKAGE INSTALLERS
https://docs.fedoraproject.org/en-US/quick-docs/dnf-vs-apt/
https://www.redhat.com/sysadmin/dnf-apt-users
https://www.ubuntubuzz.com/2017/03/comparison-of-common-commands-ubuntu-ubuntu-apt-fedora-dnf.html
apt-get -q -y install					dnf -q -y install
apt-get -q -y update					dnf -q -y check-update
apt-get -q -y upgrade					dnf -q -y upgrade

https://www.techrepublic.com/article/linux-101-how-to-clean-the-dnf-and-apt-caches/
apt-get clean							dnf clean dbcache / sudo dnf clean all

Will need to edit entire queries that use this command, information is formatted differently
apt-cache policy PACKAGENAME			dnf info -q PACKAGENAME
apt-cache search PACKAGENAME			dnf search PACKAGENAME

Should not need added, only for Pi
apt-key adv --recv-keys --keyserver		

comment_EOF
# ----------------------------------------------------------------------------------
function check_root_or_sudo_access_function () {
	if [[ "$USER" = "root" ]] || [[ "$USER" = "Root" ]] || [[ "$USER" = "ROOT" ]] || [[ $EUID == 0 ]]; then
		# if [[ "$USER" = "root" || "$USER" = "Root" || "$USER" = "ROOT" || $EUID == 0 ]]; then
		running_as_root_check=true
		echo "     ${bold}${green}Script running as root.${normal}"
	else
		running_as_root_check=false
		sudo whoami
		root_available_check=$?
		if [ "$root_available_check" -eq "0" ]; then
			echo "     ${bold}${green}User has sudo access.${normal}"
		elif [ "$root_available_check" -eq "1" ]; then
			echo
			echo "${bold}${red}Please run script as root or user with sudoer access.${normal}"
			echo "Can try typing the following to login as root: su"
			echo "Then try running the script again."
			echo
			echo "${bold}${red}Exiting script in 30 seconds.${normal}"
			echo
			sleep 30
			exit
		else
			echo
			echo "${bold}${red}This message should not be visible.${normal}"
			echo "${bold}${red}Please run script as root or user with sudoer access.${normal}"
			echo "Can try typing the following to login as root: su"
			echo "Then try running the script again."
			echo
			echo "${bold}${red}Exiting script in 30 seconds.${normal}"
			echo
			sleep 30
			exit
		fi
	fi
	echo
}

function debian_update_check_online_working_function () {
	apt_sources_list=/etc/apt/sources.list
	if grep -q "^# deb cdrom:" $apt_sources_list; then
		echo "${invis}Debian CD-ROM entry is disabled.${normal}"
	elif grep -q "^deb cdrom:" $apt_sources_list; then
		#
		# Sources List 											--> 	https://wiki.debian.org/SourcesList
		# Chapter 9. Keeping your Debian system up-to-date		--> 	https://www.debian.org/doc/manuals/debian-faq/uptodate.en.html
		#
		echo "${bold}${red}Debian CD-ROM entry is enabled.${normal}"
		echo
		echo "Script may not function as intended. Please add a viable update"
		echo "mirror for use by clicking on activities, click on 'Type to search',"
		echo "type in 'Software', open 'Software & Updates', click on"
		echo "'Other Software', and paste in the links below. Make sure to"
		echo "disable the 'cdrom' option and click 'Close'."
		echo
		echo "${bold}${cyan}For US-based Users:${normal}"
		echo "deb http://ftp.us.debian.org/debian stable main contrib"
		echo
		echo "${bold}${cyan}Example sources.list for Debian 12 - Bookworm:${normal}"
		echo "deb http://deb.debian.org/debian bookworm main"
		echo "deb http://deb.debian.org/debian-security/ bookworm-security main"
		echo "deb http://deb.debian.org/debian bookworm-updates main"
		echo
		echo
		echo "${bold}${cyan}For other locations, consult the Debian Mirrors (worldwide) list:${normal}"
		echo "     https://www.debian.org/mirror/list"
		echo
		echo "${bold}${cyan}Re-director Service${normal}"
		echo "The Re-director service aims to solve the problem of choosing a Debian"
		echo "mirror. It uses the geographic location of the user and other information" 
		echo "to choose the best mirror that can serve the files."
		echo
		echo "deb http://httpredir.debian.org/debian stable main contrib"
		echo
		echo 
		echo "When you're ready, press any key to continue."
		echo
		pause
	else
		echo "${bold}${red}Message should not be visible for Debian.${normal}"
		echo "However I can't figure out better way to check if updates are"
		echo "enabled in Debian or not."
	fi
}

function debian_x86_64_vs_arm_function () {
	if [[ "$what_architecture" == "Architecture: arm64" || "$what_architecture" == "Architecture: arm" ]] && [ "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ]; then
		echo "${bold}${green}Running Raspbian on Raspberry Pi (arm or arm64 Processor).${normal}" 
	elif [ "$what_architecture" == "Architecture: x86-64" ]; then
		if [ "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ]; then
			echo "${bold}${green}Running Raspbian for Desktop (x86-64).${normal}"
		elif [ "$verify_if_this_is_raspbian_or_debian" == "" ]; then
			echo "${bold}${green}Running Debian (x86-64).${normal}"
			check_root_or_sudo_access_function
			debian_update_check_online_working_function
		else
			echo "${bold}${green}Unsure if running Debian or Raspbian for Desktop (x86-64).${normal}"
		fi
	elif [[ "$what_architecture" == "Architecture: arm64" || "$what_architecture" == "Architecture: arm" ]] && [ "$verify_if_this_is_raspbian_or_debian" != "Raspberry Pi" ]; then
		echo "${bold}${green}Running on an arm or arm64 Processor, but not using Raspbian.${normal}" 
	else
		echo "${bold}${red}Unable to identify architecture. Exiting script.${normal}"
		echo
		sleep 30
		exit
	fi
}

function apt_get_function () {
	# Used to verify if command apt is available and exit script if not.
	# Doing this three different ways in order to make sure the command
	# is absolutely available for use as the script depends on it working.
	command -v apt > /dev/null 2>&1 || type apt > /dev/null 2>&1 || hash apt 2>/dev/null || { echo >&2 "Script requires package apt but it's not installed. Exiting script in 30 seconds."; sleep 30; exit 1; }
	#
	package_install_program="apt-get -q -y install"
	packages_update_program="apt-get -q -y update"
	packages_system_upgrade="apt-get -q -y upgrade"
	packages_clean_program="apt-get clean"
	package_info_program="apt-cache policy"
}

function dnf_function () {
	package_install_program="dnf -q -y install"
	packages_update_program="dnf -q -y check-update"
	packages_system_upgrade="dnf -q -y upgrade"
	packages_clean_program="echo ${invis} Skipping 'dnf clean dbcache' ${normal}"
	package_info_program="dnf info -q"
}

function yum_function () {
	package_install_program="yum install -q -y"
	packages_update_program="yum check-update"
	packages_system_upgrade="yum upgrade"
	packages_clean_program="echo ${invis} Skipping 'yum clean dbcache' ${normal}"
	package_info_program="yum info"
}

function adduser_and_addgroup_function () {
	# Debian and Ubuntu
	user_add_program="adduser"
	# sudo $user_add_program $current_username drawpileread
	# sudo $user_add_program drawpileuser $user_add_options_program_01 $user_add_options_program_02
	group_add_program="addgroup"
	# sudo $group_add_program drawpileread
	user_add_options_program_01="-ingroup users"
	user_add_options_program_02="--gecos \"\""
	user_add_options_program_03="adduser drawpileuser drawpileread"
}

function useradd_and_groupadd_function () {
	# Fedora
	user_add_program="useradd"
	# sudo $user_add_program $current_username drawpileread
	# sudo $user_add_program drawpileuser $user_add_options_program_01 $user_add_options_program_02
	group_add_program="groupadd"
	# sudo $group_add_program drawpileread
	user_add_options_program_01="-g users"
	user_add_options_program_02=""
	user_add_options_program_03="usermod -a drawpileuser -G drawpileread"
	# sudo userdel drawpileuser
	# sudo rm -R /home/drawpileuser
	# sudo groupdel drawpileread
}

function fedora_end_of_life_function () {
	fedora_release_recommended=39
	fedora_release_minimum=38
	
	echo "${bold}${red}It is not recommended to continue without updating${normal}"
	echo "${bold}${red}to a new, supported version ($fedora_release_minimum or higher).${normal}"
	echo
	echo "${bold}${red}Version 33 at minimum should work with Drawpile Beta 2.2 server${normal}"
	echo "${bold}${red}as of 2023-09-16, though the latest version $fedora_release_recommended ${normal}"
	echo "${bold}${red}is recommended for security reasons. However, don't go up more than 2${normal}"
	echo "${bold}${red}versions at one time (it won't work). You may need to reboot again${normal}"
	echo "${bold}${red}after the update has completed. ${normal}"
	echo 
	echo "${bold}${white}${underline}https://docs.fedoraproject.org/en-US/releases/eol/${normal}"
	echo
	echo
	echo "${bold}${yellow}Use these commands to prep upgrade:${normal}"
	echo "     sudo dnf --refresh upgrade"
	echo "     sudo dnf install -y -q dnf-plugin-system-upgrade"
	echo "     sudo dnf system-upgrade download --releasever=$fedora_release_recommended" # echo "     sudo dnf system-upgrade download --releasever=32"
	echo
	echo "${bold}${yellow}Use this command to start upgrade:${normal}"
	echo "     sudo dnf system-upgrade reboot"
	echo
	echo "${bold}${yellow}Remove cached metadata and transaction:${normal}"
	echo "     dnf system-upgrade clean"
	echo "${bold}${yellow}Remove cached packages:${normal}"
	echo "     dnf clean packages"
	echo
	# Failing that, you may need to remove old kernels.
	# https://haydenjames.io/fix-least-xmb-space-needed-boot-filesystem/
	# df -h
	#
	# https://almalinux.discourse.group/t/cleaning-old-kernels-alternatives-to-package-cleanup-oldkernels/695
	# dnf remove $(dnf repoquery --installonly --latest-limit=-2 -q)
	echo "Waiting 30 seconds before continuing script."
	sleep 30
}
# ----------------------------------------------------------------------------------
function wget_or_wget2_non_fedora_function () {
	wget_or_wget2_quiet_progress="wget -q --show-progress"
	wget_or_wget2_quiet_progress_non_verbose="wget -nv"
	wget_or_wget2_no_check_certificate="wget --no-check-certificate"
}

function wget_or_wget2_fedora_function () {
	wget_or_wget2_quiet_progress="wget -q --force-progress"
}

wget_or_wget2_non_fedora_function

if [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] || [ "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ]; then
	apt_get_function
	adduser_and_addgroup_function
	if [ "$what_linux_flavor" == "PRETTY_NAME=\"Debian GNU/Linux 9 (stretch)\"" ] || [ "$what_linux_flavor" == "PRETTY_NAME=\"Raspbian GNU/Linux 9 (stretch)\"" ]; then
		debian_x86_64_vs_arm_function
		echo "${bold}${green}Debian GNU/Linux 9 (stretch)${normal}"
	elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Debian GNU/Linux 10 (buster)\"" ] || [ "$what_linux_flavor" == "PRETTY_NAME=\"Raspbian GNU/Linux 10 (buster)\"" ]; then
		debian_x86_64_vs_arm_function
		echo "${bold}${green}Debian GNU/Linux 10 (buster)${normal}"
	elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Debian GNU/Linux 11 (bullseye)\"" ] || [ "$what_linux_flavor" == "PRETTY_NAME=\"Raspbian GNU/Linux 11 (bullseye)\"" ]; then
		debian_x86_64_vs_arm_function
		echo "${bold}${green}Debian GNU/Linux 11 (bullseye)${normal}"
	elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Debian GNU/Linux 12 (bookworm)\"" ] || [ "$what_linux_flavor" == "PRETTY_NAME=\"Raspbian GNU/Linux 12 (bookworm)\"" ]; then
		debian_x86_64_vs_arm_function
		echo "${bold}${green}Debian GNU/Linux 12 (bookworm)${normal}"
	else
		echo "${bold}${red}Unable to identify if supported. Exiting script.${normal}"
		echo
		echo "Linux Name         : $what_linux_name"
		echo "Linux Flavor       : $what_linux_flavor"
		echo "Architecture       : $what_architecture"
		echo "Raspbian or Debian : $verify_if_this_is_raspbian_or_debian"
		echo "Pi Model           : $verify_pi_model"
		echo
		sleep 30
		exit
	fi
elif [ "$what_linux_name" == "NAME=\"Ubuntu\"" ]; then
	apt_get_function
	adduser_and_addgroup_function
	if [ "$what_linux_flavor" == "PRETTY_NAME=\"Ubuntu 24.04.2 LTS\"" ]; then
		echo "${bold}${green}Running Ubuntu 24.04.2 LTS.${normal}"
	elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Ubuntu 24.04.1 LTS\"" ]; then
		echo "${bold}${green}Running Ubuntu 24.04.1 LTS.${normal}"
		elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Ubuntu 24.04 LTS\"" ]; then
		echo "${bold}${green}Running Ubuntu 24.04 LTS.${normal}"
	elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Ubuntu 22.04.4 LTS\"" ]; then
		echo "${bold}${green}Running Ubuntu 22.04.4 LTS.${normal}"
	elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Ubuntu 22.04.3 LTS\"" ]; then
		echo "${bold}${green}Running Ubuntu 22.04.3 LTS.${normal}"
	elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Ubuntu 22.04.2 LTS\"" ]; then
		echo "${bold}${green}Running Ubuntu 22.04.2 LTS.${normal}"
	elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Ubuntu 22.04.1 LTS\"" ]; then
		echo "${bold}${green}Running Ubuntu 22.04.1 LTS.${normal}"
	elif [ "$what_linux_name" == "NAME=\"Ubuntu\"" ]; then
		echo "${bold}${yellow}Running Ubuntu, version may not be supported.${normal}"
		echo
		echo "Linux Name         : $what_linux_name"
		echo "Linux Flavor       : $what_linux_flavor"
		echo "Architecture       : $what_architecture"
		echo
		sleep 30
	else
		echo "${bold}${red}Unable to identify if supported. Exiting script.${normal}"
		echo
		echo "Linux Name         : $what_linux_name"
		echo "Linux Flavor       : $what_linux_flavor"
		echo "Architecture       : $what_architecture"
		echo
		sleep 30
		exit
	fi	
elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	# Was for Firewall-cmd which is currently commented out. 
	what_fedora_variant=$( cat /etc/*-release | grep -i "^VARIANT_ID" )
	#
	what_fedora_variant_name=$( cat /etc/*-release | grep -i "^VARIANT_ID" | cut -d "=" -f2 )
	
	if [ -z "$what_fedora_variant" ] || [ -z "$what_fedora_variant_name" ]; then
		# Values would be null because the VARIANT ID does not exist.
		if [ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Server Edition)\"" ] || [ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Forty)\"" ] || [ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 41 (Server Edition)\"" ] || [ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 41 (Forty One)\"" ]; then
			what_fedora_variant="VARIANT_ID=server"
			what_fedora_variant_name="server"
		fi
	fi
	
	# dnf_function
	yum_function
	useradd_and_groupadd_function
	check_root_or_sudo_access_function	
	if [ "$what_fedora_variant_name" == "server" ]; then
		if [ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 41 (Server Edition)\"" ] || [ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 41 (Forty One)\"" ]; then
			echo "${bold}${yellow}Running Fedora Server 41.${normal}" && echo "${bold}${yellow}Testing support now...${normal}"
			wget_or_wget2_fedora_function
		elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Server Edition)\"" ] || [ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Forty)\"" ]; then
			echo "${bold}${green}Running Fedora Server 40.${normal}"
			
			# Replace wget with wget2 (a modern implementation of wget intended to replace wget 1.x) as the provider of wget.
			#      https://discussion.fedoraproject.org/t/f40-change-proposal-wget2-as-wget/96422/5
			# Developer of wget says wget2 should be used with wget, not in place of wget. Stupid idea of Fedora.
			#      https://github.com/rockdaboot/wget2/issues/314#issuecomment-2080858803
			wget_or_wget2_fedora_function
			
		elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 39 (Server Edition)\"" ]; then
			echo "${bold}${green}Running Fedora Server 39.${normal}"  && echo "${bold}${yellow}End of Life support is 2024-11-12.${normal}"
		elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 38 (Server Edition)\"" ]; then
			echo "${bold}${green}Running Fedora Server 38.${normal}" && echo && echo "${bold}${yellow}End of Life support is 2024-05-14.${normal}"
			fedora_end_of_life_function
		elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 37 (Server Edition)\"" ]; then
			echo "${bold}${green}Running Fedora Server 37.${normal}" && echo && echo "${bold}${yellow}End of Life support is 2023-11-14.${normal}"
			fedora_end_of_life_function
		elif [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 36 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 36 (Server Edition)\"" ]]; then
			echo "${bold}${red}Running Fedora Server 36.${normal}" && echo && echo "${bold}${red}End of Life support since 2023-05-16.${normal}"
			fedora_end_of_life_function
		elif [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 35 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 35 (Server Edition)\"" ]]; then
			echo "${bold}${red}Running Fedora Server 35.${normal}" && echo && echo "${bold}${red}End of Life support since 2022-12-13.${normal}"
			fedora_end_of_life_function
		elif [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 34 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 34 (Server Edition)\"" ]]; then
			echo "${bold}${red}Running Fedora Server 34.${normal}" && echo && echo "${bold}${red}End of Life support since 2022-06-07.${normal}"
			fedora_end_of_life_function
		elif [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 33 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 33 (Server Edition)\"" ]]; then
			echo "${bold}${red}Running Fedora Server 33.${normal}" && echo && echo "${bold}${red}End of Life support since 2021-11-30.${normal}"
			fedora_end_of_life_function
		elif [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 32 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 32 (Server Edition)\"" ]]; then
			echo "${bold}${red}Running Fedora Server 32.${normal}" && echo && echo "${bold}${red}End of Life support since 2021-05-25.${normal}"
			fedora_end_of_life_function
		elif [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 31 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 31 (Server Edition)\"" ]]; then
			echo "${bold}${red}Running Fedora Server 31.${normal}" && echo && echo "${bold}${red}End of Life support since 2020-11-24.${normal}"
			fedora_end_of_life_function
		elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
			echo "${bold}${yellow}Running Fedora Server, version may not be supported.${normal}"
			echo
			echo "Linux Name         : $what_linux_name"
			echo "Variant Name       : $what_fedora_variant_name"
			echo "Linux Flavor       : $what_linux_flavor"
			echo "Architecture       : $what_architecture"
			echo
			sleep 30
		else
			echo "This message shouldn't be visible to determine Fedora type (Server)."
		fi
	elif [ "$what_fedora_variant_name" == "workstation" ]; then
		if [ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 41 (Workstation Edition)\"" ]; then
			echo "${bold}${yellow}Running Fedora Workstation 41.${normal}" && echo "${bold}${yellow}Testing support now...${normal}"
			wget_or_wget2_fedora_function
		elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Workstation Edition)\"" ]; then
			echo "${bold}${green}Running Fedora Workstation 40.${normal}"
			
			# Replace wget with wget2 (a modern implementation of wget intended to replace wget 1.x) as the provider of wget.
			#      https://discussion.fedoraproject.org/t/f40-change-proposal-wget2-as-wget/96422/5
			# Developer of wget says wget2 should be used with wget, not in place of wget. Stupid idea of Fedora.
			#      https://github.com/rockdaboot/wget2/issues/314#issuecomment-2080858803
			wget_or_wget2_fedora_function
		elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 39 (Workstation Edition)\"" ]; then
			echo "${bold}${yellow}Running Fedora Workstation 39.${normal}"
		elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 38 (Workstation Edition)\"" ]; then
			echo "${bold}${green}Running Fedora Workstation 38.${normal}"
		elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
			echo "${bold}${yellow}Running Fedora Workstation, version may not be supported.${normal}"
			echo
			echo "Linux Name         : $what_linux_name"
			echo "Variant Name       : $what_fedora_variant_name"
			echo "Linux Flavor       : $what_linux_flavor"
			echo "Architecture       : $what_architecture"
			echo
			sleep 30
		else
			echo "This message shouldn't be visible to determine Fedora type (Workstation)."
		fi
	elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		echo "${bold}${yellow}Running Fedora, version may not be supported.${normal}"
		echo
		echo "Linux Name         : $what_linux_name"
		echo "Variant Name       : $what_fedora_variant_name"
		echo "Linux Flavor       : $what_linux_flavor"
		echo "Architecture       : $what_architecture"
		echo
		sleep 30
	else
		echo "${bold}${red}Unable to identify if supported system. Exiting script.${normal}"
		echo
		echo "Linux Name         : $what_linux_name"
		echo "Linux Flavor       : $what_linux_flavor"
		echo "Architecture       : $what_architecture"
		echo
		sleep 30
		exit
	fi
else
	echo "${bold}${red}Unable to identify if supported system. Exiting script.${normal}"
	echo
	echo "Linux Name         : $what_linux_name"
	echo "Linux Flavor       : $what_linux_flavor"
	echo "Architecture       : $what_architecture"
	echo "Raspbian or Debian : $verify_if_this_is_raspbian_or_debian"
	echo "Pi Model           : $verify_pi_model"
	echo
	sleep 30
	exit
fi

# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
# 
# Used to verify if command sudo is available and warn if not.
# Will warn user to run as root if sudo is not available.
#
# Doing this three different ways in order to make sure the command
# is absolutely available for use as the script depends on it working.
#

[[ "$USER" = "root" ]] || [[ "$USER" = "Root" ]] || [[ "$USER" = "ROOT" ]] || command -v sudo > /dev/null 2>&1 || type sudo > /dev/null 2>&1 || hash sudo 2>/dev/null || { echo >&2 "Script requires sudo or root access. Exiting script in 30 seconds."; sleep 30; exit 1; }

# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------

mem_total=$( free -m | grep -i "Mem" | awk '{ print $2 }' )
# mem_free=$( free -m | grep -i "Mem" | awk '{ print $4 }' )
swap_total=$( free -m | grep -i "Swap" | awk '{ print $2 }' )
# swap_free=$( free -m | grep -i "Swap" | awk '{ print $4 }' )

function no_swap_function () {
	# How do I increase swapfile in Ubuntu 18.04? [duplicate]	--> https://askubuntu.com/questions/1075505/how-do-i-increase-swapfile-in-ubuntu-18-04
	# 																https://cdn.discordapp.com/attachments/556300450228338740/1147000402424893570/image.png?ex=6514e9de&is=6513985e&hm=6c4be23be022eacfb1a53526014de22aeadd6f3b3fd4510c4c8be47d7676ac0b&
	# Check Swap File to Prevent npm install From Being Killed	--> https://codentrick.com/check-swap-file-to-prevent-npm-install-can-be-killed/
	# Understanding vm.swappiness 								--> https://linuxhint.com/understanding_vm_swappiness/
	echo "However, you can create a swap memory file so it works. Here are some"
	echo "configuration commands which should help, as it permanently increases"
	echo "swap to 1024MB of space."
	echo
	echo
	echo "Creates a swap file of the designated size:"
	echo "     sudo fallocate -l 1G /swapfile"
	echo
	echo "Assigns read/write permissions for root only (tightens security)."
	echo "     sudo chmod 600 /swapfile"
	echo
	echo "Formats the file as swap."
	echo "     sudo mkswap /swapfile"
	echo
	echo "The file will be activated on the next reboot, however, if you want to"
	echo "activate it for the current session, use this command: "
	echo "     sudo swapon /swapfile"
	echo
	echo "Configure the swap file usage to prevent application crashes. Setting it to"
	echo "10% means that if there is less than 10% to use the swap file."
	echo "     echo 10 | sudo tee /proc/sys/vm/swappiness"
	echo "     echo vm.swappiness = 10 | sudo tee -a /etc/sysctl.conf"
	echo
	echo "To make the above changes permanent, the script will check /etc/fstab to see"
	echo "if a swapfile line exists already. If it exists, no changes will be made. If"
	echo "it does not exist, then the following line will be added:"
	echo "     /swapfile none swap sw 0 0"
	echo
	echo "Changes can be made manually with: sudo nano /etc/fstab"
	echo
	echo
	echo "${bold}${red}Would you like to attempt this fix automatically?${normal}"
	echo "${bold}${red}Script will exit otherwise!!${normal}"
	echo
	while :; do
		read -r -p "${bold}${red}Without quotes, type 'yes' or 'no':${normal} " ubuntu_pagefile_fix
		echo
		if [ "$ubuntu_pagefile_fix" == "y" ] || [ "$ubuntu_pagefile_fix" == "Y" ] || [ "$ubuntu_pagefile_fix" == "yes" ] || [ "$ubuntu_pagefile_fix" == "YES" ] || [ "$ubuntu_pagefile_fix" == "Yes" ] || [ "$ubuntu_pagefile_fix" == "n" ] || [ "$ubuntu_pagefile_fix" == "N" ] || [ "$ubuntu_pagefile_fix" == "no" ] || [ "$ubuntu_pagefile_fix" == "NO" ] || [ "$ubuntu_pagefile_fix" == "No" ]; then
			break
		else
			echo
			echo "${bold}${red}Invalid input selection, try again.${normal}"
			echo
			echo ----------------------------------------------------------------------------------
			echo
		fi
	done


	if [ "$ubuntu_pagefile_fix" == "yes" ] || [ "$ubuntu_pagefile_fix" == "YES" ] || [ "$ubuntu_pagefile_fix" == "Yes" ] || [ "$ubuntu_pagefile_fix" == "Y" ] || [ "$ubuntu_pagefile_fix" == "y" ] ; then
		sudo fallocate -l 1G /swapfile
		sudo chmod 600 /swapfile
		sudo mkswap /swapfile
		sudo swapon /swapfile
		echo 10 | sudo tee /proc/sys/vm/swappiness
		echo vm.swappiness = 10 | sudo tee -a /etc/sysctl.conf
		if grep -qw "/swapfile" /etc/fstab; then
			echo "${bold}${red}Found content indicating swap file already made persistent.${normal}"
			echo "${bold}${red}Skipping addition of content.${normal}"
		else
			echo "${bold}${yellow}Did not find persistent swap file in /etc/fstab${normal}".
			if [ ! -e /etc/fstab.backup ]; then
				echo "${bold}${yellow}Making backup of /etc/fstab${normal}".
				sudo cp -v /etc/fstab /etc/fstab.backup
			else
				echo "${bold}${green}Backup exists of /etc/fstab.backup${normal}".
			fi
			echo
			echo "${bold}${yellow}Appending data to /etc/fstab${normal}".
			echo "     /swapfile none swap sw 0 0"
			#  Might want to add an extra blank line in case someone saved their fstab without a terminating newline.
			cat <<EOF | sudo tee -a /etc/fstab >/dev/null

/swapfile none swap sw 0 0
EOF
		fi
		echo
		echo "Operations complete."
	else
		echo
		echo "${bold}${red}Exiting Script in 30 seconds. . . ${normal}"
		sleep 30
		exit
	fi
}

no_swap_available=false
if (( "$swap_total" == "0" )) && (( "$mem_total" <= "512" )); then
	no_swap_available=true
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${red}It appears the system memory is less than 512 MB and that your system does${normal}"
	echo "${bold}${red}     not have a swap file.${normal}"
	echo
	echo "${bold}${red}This will probably cause issues with generating Listserver with 'go install'${normal}"
	echo "${bold}${red}     and building web admin interfaces from scratch (rather than use prebuilt).${normal}"
	echo
	echo "${bold}${white}${underline}Sample Problem this attempts to address:${normal}"
	echo
	echo " apt-get -q -y install golang"
	echo " go install 'github.com/drawpile/listserver@latest'"
	echo " crawshaw.io/sqlite"
	echo " gcc: fatal error: Killed signal terminated program cc1"
	echo " Compilation terminated."
	echo '--------------------------------------------------------------------------------'
	echo
	if [ "$what_linux_name" == "NAME=\"Ubuntu\"" ]; then
		no_swap_function
	elif [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] || [ "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ]; then
		no_swap_function
	else
		echo "Should consider increasing swap file size to at least 1024 MB to ensure"
		echo "adequate resources available for setup."
		echo "${bold}${red}Exiting Script in 30 seconds . . . ${normal}"
		sleep 30
		exit
	fi
fi

if [ "$ubuntu_pagefile_fix" == "yes" ] || [ "$ubuntu_pagefile_fix" == "YES" ] || [ "$ubuntu_pagefile_fix" == "Yes" ] || [ "$ubuntu_pagefile_fix" == "Y" ] || [ "$ubuntu_pagefile_fix" == "y" ] ; then
	mem_total=$( free -m | grep -i "Mem" | awk '{ print $2 }' )
	# mem_free=$( free -m | grep -i "Mem" | awk '{ print $4 }' )
	swap_total=$( free -m | grep -i "Swap" | awk '{ print $2 }' )
	# swap_free=$( free -m | grep -i "Swap" | awk '{ print $4 }' )
	if (( "$swap_total" == "0" )); then
		echo "${bold}${red}It appears the swap increase attempt failed.${normal}"
		echo "${bold}${red}Please manually adjust and restart the script.${normal}"
		echo
		echo "${bold}${red}Exiting Script in 30 seconds . . . ${normal}"
		sleep 30
		exit
	fi
fi

# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
if [ $(getent group drawpileread) ]; then
	echo "Group: drawpileread - exists."
	drawpileread_test=yes
else
	echo "Group: drawpileread - does not exist."
	sudo $group_add_program drawpileread
	# sudo -s -u ${USER}
	drawpileread_test=no
fi

# Regular Expression - Regex expression - search without ". matches newline" to search for entries in Notepad++
# chmod .* /home/drawpileuser

# Cannot use sed on an empty file containing no characters or new lines. 

function stored_data_creation_files_function () {
	if [[ -e "$app_installation_status_file" ]]; then
		# Do nothing
		:
		# sudo mv "$app_installation_status_file" "$app_installation_status_file_bak"
		sudo chmod 777 $app_installation_status_file
		sudo chown drawpileuser:drawpileread $app_installation_status_file
		# sudo chmod 777 $app_installation_status_file_bak
		# echo "drawpilescriptversion = $drawpilescriptversion" | sudo tee -a $app_installation_status_file > /dev/null 2>&1
		# Not sure if I want to update noted script version on new script run
		# sudo sed -i '\!^drawpilescriptversion =!{h;s!=.*!= '"$drawpilescriptversion"'!};${x;\!^$!{s!!drawpilescriptversion = '"$drawpilescriptversion"'!;H};x}' $app_installation_status_file
	elif [[ ! -e "$app_installation_status_file" ]]; then
		echo "drawpilescriptversion = $drawpilescriptversion" | sudo tee -a $app_installation_status_file > /dev/null 2>&1
		sudo chmod 777 $app_installation_status_file
		sudo chown drawpileuser:drawpileread $app_installation_status_file
	else
		echo This message for "$app_installation_status_file" should not be visible.
	fi

	if [[ -e "$drawpile_configuration_values_file" ]]; then
		# sudo mv "$drawpile_configuration_values_file" "$drawpile_configuration_values_file_bak"
		sudo chmod 777 $drawpile_configuration_values_file
		sudo chown drawpileuser:drawpileread $drawpile_configuration_values_file
		# sudo chmod 777 $drawpile_configuration_values_file_bak
		# echo "drawpilescriptversion = $drawpilescriptversion" | sudo tee -a $drawpile_configuration_values_file > /dev/null 2>&1
		# Not sure if I want to update noted script version on new script run
		# sudo sed -i '\!^drawpilescriptversion =!{h;s!=.*!= '"$drawpilescriptversion"'!};${x;\!^$!{s!!drawpilescriptversion = '"$drawpilescriptversion"'!;H};x}' $drawpile_configuration_values_file
	elif [[ ! -e "$drawpile_configuration_values_file" ]]; then
		echo "drawpilescriptversion = $drawpilescriptversion" | sudo tee -a $drawpile_configuration_values_file > /dev/null 2>&1
		sudo chmod 777 $drawpile_configuration_values_file
		sudo chown drawpileuser:drawpileread $drawpile_configuration_values_file
	else
		echo This message for "$drawpile_configuration_values_file" should not be visible.
	fi
	
	if [[ -e "$drawpile_completed_successfully_values_file" ]]; then
		# sudo mv "$drawpile_completed_successfully_values_file" "$drawpile_configuration_values_file_bak"
		sudo chmod 777 $drawpile_completed_successfully_values_file
		sudo chown drawpileuser:drawpileread $drawpile_completed_successfully_values_file
		# sudo chmod 777 $drawpile_configuration_values_file_bak
		# echo "drawpilescriptversion = $drawpilescriptversion" | sudo tee -a $drawpile_completed_successfully_values_file > /dev/null 2>&1
		# Not sure if I want to update noted script version on new script run
		# sudo sed -i '\!^drawpilescriptversion =!{h;s!=.*!= '"$drawpilescriptversion"'!};${x;\!^$!{s!!drawpilescriptversion = '"$drawpilescriptversion"'!;H};x}' $drawpile_completed_successfully_values_file
	elif [[ ! -e "$drawpile_completed_successfully_values_file" ]]; then
		echo "drawpilescriptversion = $drawpilescriptversion
This file is for resuming installation in the event of script failure" | sudo tee -a $drawpile_completed_successfully_values_file > /dev/null 2>&1
		sudo chmod 777 $drawpile_completed_successfully_values_file
		sudo chown drawpileuser:drawpileread $drawpile_completed_successfully_values_file
	else
		echo This message for "$drawpile_completed_successfully_values_file" should not be visible.
	fi
}

echo
if ! id -u drawpileuser > /dev/null 2>&1; then
	echo "${bold}${cyan}*****Adding user for security purposes for Drawpile . . .*****${normal}"
	echo
	echo 'The server cannot run under a user with root access, so we must create a new'
	echo 'user. This is being created immediately in order to accomodate Drawpile' 
	echo 'specific configuration information which is now saved for later reference.'
	echo
	echo 'This has potential uses like reading server specific configuration, update'
	echo 'configurations, and changes to script features easier in the future.'
	echo
	sudo $user_add_program drawpileuser $user_add_options_program_01 $user_add_options_program_02
	sudo $user_add_options_program_03
	sudo chmod 770 /home/drawpileuser/ -R
	sudo chmod 777 /home/drawpileuser/
	# find /home/drawpileuser/ -type d -exec chmod 755 {} \;
	# sudo chown drawpileuser:drawpileread /home/drawpileuser/ -R
	stored_data_creation_files_function
	# echo "drawpilescriptversion = $drawpilescriptversion" | sudo tee -a $app_installation_status_file > /dev/null 2>&1
	sudo sed -i '\!^drawpileuser =!{h;s!=.*!= no!};${x;\!^$!{s!!drawpileuser = no!;H};x}' $app_installation_status_file
else
	sudo chmod 777 /home/drawpileuser/ -R
	# sudo chown drawpileuser:drawpileread /home/drawpileuser/ -R
	sudo chmod 777 /home/drawpileuser/
	# Clears up an empty line that appears in the file at the beginning.
	sudo sed -i '/^$/d' $app_installation_status_file
	if grep -qw "drawpileuser" $app_installation_status_file; then
		echo "Entry already made for drawpileuser, skipping entry for App Installation Status."
	else
		sudo sed -i '\!^drawpileuser =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!drawpileuser = '"yes"'!;H};x}' $app_installation_status_file
	fi
	stored_data_creation_files_function
fi

# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------

function read_stored_config_value_query_function () {
	read_stored_config_value_query_null_check=0
	read_stored_config_value_query_1=$( grep -m 1 "$variable_to_read_1 = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
	[ -z "$variable_to_read_2" ] || read_stored_config_value_query_2=$( grep -m 1 "$variable_to_read_2 = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
	[ -z "$variable_to_read_3" ] || read_stored_config_value_query_3=$( grep -m 1 "$variable_to_read_3 = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
	
	if [ -z "$read_stored_config_value_query_1" ] || [ "$read_stored_config_value_query_1" = "=" ]; then
		read_stored_config_value_query_null_check=1
		# If variable cannot be found in drawpile configuration values file, check app installation status. Only when value is null or = sign.
		read_stored_config_value_query_1=$( grep -m 1 "$variable_to_read_1 = " "$app_installation_status_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
		[ -z "$variable_to_read_2" ] || read_stored_config_value_query_2=$( grep -m 1 "$variable_to_read_2 = " "$app_installation_status_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
		[ -z "$variable_to_read_3" ] || read_stored_config_value_query_3=$( grep -m 1 "$variable_to_read_3 = " "$app_installation_status_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
	fi
	
	if [ -z "$read_stored_config_value_query_1" ] || [ "$read_stored_config_value_query_1" = "=" ]; then
		if [ "$read_stored_config_value_query_null_check" = "0" ]; then
			echo "No value read from file: $drawpile_configuration_values_file"
			echo
		elif [ "$read_stored_config_value_query_null_check" = "1" ]; then
			echo "No value read from files: $drawpile_configuration_values_file"
			echo "                          $app_installation_status_file"
			echo
		else
			echo "This message should not be visible for: read_stored_config_value_query_null_check"
		fi
		# Force user to insert proper data this way without having to check for null variable.
		maybe_use_config_value=no
	else
		echo "${green}Value located:${normal} $read_stored_config_value_query_1"
		echo
		[ -z "$value_description_1" ] || echo "$value_description_1"
		[ -z "$value_description_2" ] || echo "$value_description_2"
		[ -z "$value_description_3" ] || echo "$value_description_3"
		[ -z "$value_description_4" ] || echo "$value_description_4"
		[ -z "$value_description_5" ] || echo "$value_description_5"
		[ -z "$value_description_6" ] || echo "$value_description_6"
		[ -z "$value_description_7" ] || echo "$value_description_7"
		[ -z "$value_description_8" ] || echo "$value_description_8"
		[ -z "$value_description_9" ] || echo "$value_description_9"
		[ -z "$value_description_10" ] || echo "$value_description_10"
		[ -z "$value_description_11" ] || echo "$value_description_11"
		[ -z "$value_description_12" ] || echo "$value_description_12"
		[ -z "$value_description_13" ] || echo "$value_description_13"
		[ -z "$value_description_14" ] || echo "$value_description_14"
		[ -z "$value_description_15" ] || echo "$value_description_15"
		[ -z "$value_description_16" ] || echo "$value_description_16"
		[ -z "$value_description_17" ] || echo "$value_description_17"
		[ -z "$value_description_18" ] || echo "$value_description_18"
		[ -z "$value_description_19" ] || echo "$value_description_19"
		[ -z "$value_description_20" ] || echo "$value_description_20"
		[ -z "$value_description_21" ] || echo "$value_description_21"
		[ -z "$value_description_22" ] || echo "$value_description_22"
		[ -z "$value_description_23" ] || echo "$value_description_23"
		[ -z "$value_description_24" ] || echo "$value_description_24"
		[ -z "$value_description_25" ] || echo "$value_description_25"
		[ -z "$value_description_26" ] || echo "$value_description_26"
		[ -z "$value_description_27" ] || echo "$value_description_27"
		[ -z "$value_description_28" ] || echo "$value_description_28"
		[ -z "$value_description_29" ] || echo "$value_description_29"
		[ -z "$value_description_30" ] || echo "$value_description_30"
		[ -z "$value_description_1" ] || echo
		[ -z "$variable_to_read_2" ] || echo "Query 02: $read_stored_config_value_query_2"
		[ -z "$variable_to_read_2" ] || echo
		[ -z "$variable_to_read_3" ] || echo "Query 03: $read_stored_config_value_query_3"
		[ -z "$variable_to_read_3" ] || echo
		while :; do
			read -r -p "${bold}${cyan}Would you like to use this value again? (Y)es or (N)o:${normal} " maybe_use_config_value
			echo
			if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ] || [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done
	fi
	variable_to_read_2=""
	variable_to_read_3=""
	
	value_description_1=""
	value_description_2=""
	value_description_3=""
	value_description_4=""
	value_description_5=""
	value_description_6=""
	value_description_7=""
	value_description_8=""
	value_description_9=""
	value_description_10=""
	value_description_11=""
	value_description_12=""
	value_description_13=""
	value_description_14=""
	value_description_15=""
	value_description_16=""
	value_description_17=""
	value_description_18=""
	value_description_19=""
	value_description_20=""
	value_description_21=""
	value_description_22=""
	value_description_23=""
	value_description_24=""
	value_description_25=""
	value_description_26=""
	value_description_27=""
	value_description_28=""
	value_description_29=""
	value_description_30=""
}

<<comment_EOF
variable_to_read_1="freeDNS_input"
variable_to_read_2=""
variable_to_read_3=""
read_stored_config_value_query_function
if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	freeDNS_input_1=$read_stored_config_value_query_1
	freeDNS_input_2=$read_stored_config_value_query_2
	freeDNS_input_3=$read_stored_config_value_query_3
	drawpile_build_configuration_number_desc=$read_stored_config_value_query_2
	drawpile_build_configuration_settings=$read_stored_config_value_query_3
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	echo "Not using value. Please insert new value."
else
	echo "This message should not be visible."
fi

echo "derp $freeDNS_input VALUE"
comment_EOF

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

function select_non_root_account () {
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	variable_to_read_1="current_username"
	variable_to_read_2=""
	variable_to_read_3=""

	value_description_1="When running script with sudo or su, your user account should be specified"
	value_description_2="because portions of the script require things to run without root access,"
	value_description_3="adds your user to be able to read Drawpile files, and/or creates shortcuts"
	value_description_4="if you have a desktop environment."
	value_description_5=""

	read_stored_config_value_query_function
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing value and moving on."
		current_username=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		echo "When running script with sudo or su, please specify your user account name"
		echo "with a valid user directory indicated below." 
		echo
		echo "${bold}${cyan}Note:${normal} Portions of the script do require some things to run without root access."
		echo "     Also, if you are running a graphical user interface with your setup,"
		echo "     prefer YOUR user account over selecting drawpileuser or root. This"
		echo "     enables shortcut creation on your desktop for server tools."
		echo
		echo "${bold}${underline}Generating list of system users (may take up to a minute or so):${normal}"
		id -nu 0
		eval getent passwd {$(awk '/^UID_MIN/ {print $2}' /etc/login.defs)..$(awk '/^UID_MAX/ {print $2}' /etc/login.defs)} | cut -d: -f1
		echo
		echo "${bold}${underline}Here are a list of folders in the home directory:${normal}"
		ls -d /home/*/
		echo
		read -r -p "${bold}${cyan}Enter ONLY the username:${normal} " current_username
		echo
		while [[ ! -e "/home/$current_username" ]]
		do
			echo '--------------------------------------------------------------------------------'
			echo
			echo "${bold}${red}Invalid user name entered (no matching home directory). Please ${normal}"
			echo "${bold}${red}enter a valid user name with a user directory indicated below:${normal}"
			ls -d /home/*/
			echo
			read -r -p "${bold}${cyan}Enter user name:${normal} " current_username
			echo
		done
		sudo sed -i '\!^current_username =!{h;s!=.*!= '"$current_username"'!};${x;\!^$!{s!!current_username = '"$current_username"'!;H};x}' $drawpile_configuration_values_file
	else
		echo "This message should not be visible."
	fi
}

# Prompt for user name change if root detected, first attempting Pi (and verifying), 
#     and requesting user input with verification directory exists.

if [[ "$USER" = "root" ]] || [[ "$USER" = "Root" ]] || [[ "$USER" = "ROOT" ]]; then
	current_username=pi
	if [[ -e "/home/$current_username" ]]; then
		# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
		:
	else
		select_non_root_account
	fi
else
	current_username=$USER
	echo "Current user: $current_username"
fi

drawpileuser_username_id="$( id -u drawpileuser )"
current_username_id="$( id -u $current_username )"

if [ "$drawpileread_test" == "yes" ]; then
	# Do nothing, no action required
	:
elif [ "$drawpileread_test" == "no" ]; then
	if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
		sudo $user_add_program $current_username drawpileread
	fi
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		sudo usermod -a $current_username -G drawpileread
	fi
fi

echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
# SSH Section to verify using public key encryption and NOT Username/Password
# type authentication, as this opens the server to automated attacks.
# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
# This portion of the script inspired by using Linode
# Harden SSH Access
#		https://www.linode.com/docs/products/compute/compute-instances/guides/set-up-and-secure/?tabs=linux%2Cmost-distributions%2Cubuntu-debian-kali-linux#harden-ssh-access

function add_authorized_keys_file_function () {
	echo "${bold}${red}WARNING. FILE 'authorized_keys' DOES NOT EXIST.${normal}"
	if [ ! -d ~/.ssh ]; then
		sudo mkdir ~/.ssh
	fi
	sudo chmod -R 700 ~/.ssh
	sudo touch ~/.ssh/authorized_keys
	sudo chmod 600 ~/.ssh/authorized_keys
}
# ----------------------------------------------------------------------------------
function add_ssh_key_function () {
	echo "${bold}${red}WARNING. AN SSH KEY DOES NOT EXIST.${normal}"
	echo
	echo "However, the script can add an SSH public key from PuTTYgen to securely"
	echo "connect remotely."
	echo 
	echo "${bold}${cyan}Windows Users${normal}"
	echo "If you do not have PuTTYgen installed, you can get it and WinSCP from"
	echo " the following website:        https://ninite.com/putty-winscp/"
	echo
	echo "${bold}${cyan}Linux Users${normal}"
	echo "Just say yes to the next prompt and follow the instructions."
	echo 
	while :; do
		read -r -p "${bold}${cyan}Would you like to add an SSH key now with PuTTYgen, (Y)es or (N)o?: ${normal} " add_ssh_key_query
		echo
		if [ "$add_ssh_key_query" == "y" ] || [ "$add_ssh_key_query" == "Y" ] || [ "$add_ssh_key_query" == "yes" ] || [ "$add_ssh_key_query" == "YES" ] || [ "$add_ssh_key_query" == "Yes" ] || [ "$add_ssh_key_query" == "n" ] || [ "$add_ssh_key_query" == "N" ] || [ "$add_ssh_key_query" == "no" ] || [ "$add_ssh_key_query" == "NO" ] || [ "$add_ssh_key_query" == "No" ]; then
			break
		else
			echo
			echo "${bold}${red}Invalid input selection, try again.${normal}"
			echo
			echo ----------------------------------------------------------------------------------
			echo
		fi
	done
	if [ "$add_ssh_key_query" == "yes" ] || [ "$add_ssh_key_query" == "YES" ] || [ "$add_ssh_key_query" == "Yes" ] || [ "$add_ssh_key_query" == "Y" ] || [ "$add_ssh_key_query" == "y" ] ; then
		echo "${bold}${cyan}Linux Users Only${normal}"
		echo "If you're working on a Linux box, run the following command on YOUR computer:"
		echo "     ssh-keygen -t ed25519 -C 'root'"
		echo "     "
		echo "     This should prompt you for a filename (you can just press enter) and"
		echo "     a password before it will generate a key. This will give you two"
		echo "       files. `~/.ssh/id_ed25519` (secret, don't share) and "
		echo "       '~/.ssh/id_ed25519.pub' (public). The '~' being your"
		echo "       home directory, '.ssh' is a hidden directory. To output"
		echo "       the content of your public key for use in the script,"
		echo "       type the following: cat ~/.ssh/id_ed25519.pub"
		echo "     "
		echo "     You can say yes to this prompt for PuTTYgen and copy your Public key"
		echo "       plain text data after you say yes to using PuTTYgen to save it on"
		echo "       the server."
		echo
		echo "${bold}${cyan}Windows Users Only${normal}"
		echo "Open PuTTYGen. Leaving options to the default with RSA selected, click "
		echo " 'Generate' and move your mouse randomly over the blank area to generate "
		echo " some randomness with the security key."
		echo
		echo "Fill out 'Key passphrase' and 'Confirm passphrase' with something that is "
		echo "AT LEAST 12 characters long. You should also set 'Key comment' to an "
		echo "existing username on the server OR IT WILL NOT WORK."
		echo
		echo "Generating list of system users (may take up to a minute or so):"
		# if [[ "$USER" = "root" ]]; then echo "root"; fi
		# if [[ "$USER" = "Root" ]]; then echo "Root"; fi
		# if [[ "$USER" = "ROOT" ]]; then echo "ROOT"; fi
		id -nu 0
		eval getent passwd {$(awk '/^UID_MIN/ {print $2}' /etc/login.defs)..$(awk '/^UID_MAX/ {print $2}' /etc/login.defs)} | cut -d: -f1
		echo
		echo "Copy the data listed under" 
		echo " 'Public key for pasting into OpenSSH authorized_keys file:'"
		echo 
		echo "Do not close PuTTYgen! Make sure you have ALL the data. The script cannot"
		echo "verify if you are missing any data. An example key is noted below, which"
		echo "is probably much shorter than yours since this is only an example."
		echo
		echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAIQDONx0gKMldSZllpt2JxRjcHjq9h9xWTRxjjF8EUX8qpQ== USERNAME-GOES-HERE'
		echo
		read -r -p "${bold}${cyan}Paste this information into the script now: ${normal}" add_ssh_key_value
		if [ ! -e ~/.ssh/authorized_keys ]; then
			if [ ! -d ~/.ssh ]; then
				sudo mkdir /.ssh
			fi
			sudo chmod -R 700 /.ssh
			sudo touch ~/.ssh/authorized_keys
			sudo chmod 600 ~/.ssh/authorized_keys
		fi
		cat <<EOF | sudo tee -a ~/.ssh/authorized_keys >/dev/null
$add_ssh_key_value
EOF
		sleep 2
		echo
		echo "${bold}${cyan}Entered public key into: ~/.ssh/authorized_keys${normal}"
		cat ~/.ssh/authorized_keys
		echo
		echo "${bold}${cyan}Once that is done, make sure to save the public and private keys to your${normal}"
		echo "${bold}${cyan} computer in PuTTYgen. DO NOT SHARE THE PRIVATE KEY WITH ANYONE. TREAT${normal}"
		echo "${bold}${cyan} THIS LIKE YOU WOULD A KEY TO YOUR HOUSE OR OTHER VALUABLES!${normal}"
		echo
		if [ "${ssh_password_authentication_status,,}" == "passwordauthentication yes" ]; then
			echo "${bold}${yellow}Will disable SSH Password Authentication based-login.${normal}"
			sudo sed -i -e "s/PasswordAuthentication yes/PasswordAuthentication no/g" /etc/ssh/sshd_config
			sudo systemctl restart sshd
		fi
		echo "Waiting 30 seconds before continuing script..."
		sleep 30
	else
		echo "${bold}${red}Skipping addition of SSH public key. Not recommended if server is remote!${normal}"
	fi
}
# ----------------------------------------------------------------------------------
echo "Script running: $local_or_remote"
# ----------------------------------------------------------------------------------
if [ "$local_or_remote" == "Remote" ]; then
	ssh_password_authentication_status=$( cat /etc/ssh/sshd_config 2>/dev/null | grep -ie "^PasswordAuthentication yes"  )
	# Default value when set to yes --> PasswordAuthentication yes
	# ----------------------------------------------------------------------------------
	if [ -e ~/.ssh/authorized_keys ]; then
		ssh_authorized_keys=$( sudo cat ~/.ssh/authorized_keys )
	else
		ssh_authorized_keys=""
	fi
	# ----------------------------------------------------------------------------------
	if [ "${ssh_password_authentication_status,,}" == "passwordauthentication yes" ]; then
		echo "${bold}${red}SSH Password Authentication is enabled. This is not recommended.${normal}"
		if [ -e ~/.ssh/authorized_keys ]; then
			if [ "$ssh_authorized_keys" != "" ]; then
				echo "${bold}${yellow}An SSH key exists. Will disable SSH Password Authentication based-login.${normal}"
				sudo sed -i -e "s/PasswordAuthentication yes/PasswordAuthentication no/g" /etc/ssh/sshd_config
				sudo systemctl restart sshd
				sleep 5
			else
				add_ssh_key_function
			fi
		else
			add_authorized_keys_file_function
			add_ssh_key_function
		fi
	else
		echo "${bold}${green}SSH Password Authentication is disabled. This is recommended.${normal}"
		if [ -e ~/.ssh/authorized_keys ]; then
			if [ "$ssh_authorized_keys" != "" ]; then
				echo "${bold}${green}An SSH key exists. This is also recommended.${normal}"
			else
				add_ssh_key_function
			fi
		else
			add_authorized_keys_file_function
			add_ssh_key_function
		fi
	fi
fi
echo
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"
echo

drawpile_script_completed_test=$( grep 'drawpile_script_completed = ' $drawpile_configuration_values_file 2>/dev/null )

if [[ "$drawpile_script_completed_test" == "drawpile_script_completed = no" ]]; then
	echo "Script not yet completed one run successfully."
	# Do nothing, no action required
	:
elif [[ "$drawpile_script_completed_test" == "drawpile_script_completed = yes" ]]; then
	# if grep 'drawpile_script_completed = yes' $drawpile_configuration_values_file > /dev/null; then
	echo "${red}${bold}WOAH BUDDY! THIS SCRIPT WAS NOT INTENDED FOR MULTIPLE RUNS AFTER${normal}"
	echo "${red}${bold}A SUCCESSFUL INSTALLATION/RUN OF THE SCRIPT!!!!!${normal}"
	echo
	echo "You should run the update script or server management scripts."
	echo
	while :; do
		read -r -p "${bold}${red}Are you sure you want to re-run this script? (Y)es or (N)o:${normal} " drawpile_script_completed_warning
		echo
		if [[ "$drawpile_script_completed_warning" = "yes" ]] || [[ "$drawpile_script_completed_warning" = "YES" ]] || [[ "$drawpile_script_completed_warning" = "Yes" ]] || [[ "$drawpile_script_completed_warning" = "y" ]] || [[ "$drawpile_script_completed_warning" = "Y" ]] || [[ "$drawpile_script_completed_warning" = "no" ]] || [[ "$drawpile_script_completed_warning" = "NO" ]] || [[ "$drawpile_script_completed_warning" = "No" ]] || [[ "$drawpile_script_completed_warning" = "n" ]] || [[ "$drawpile_script_completed_warning" = "N" ]]; then
			break
		else
			echo
			echo "${bold}${red}Invalid input selection, try again.${normal}"
			echo
			echo ----------------------------------------------------------------------------------
			echo
		fi
	done
	if [[ "$drawpile_script_completed_warning" = "yes" ]] || [[ "$drawpile_script_completed_warning" = "YES" ]] || [[ "$drawpile_script_completed_warning" = "Yes" ]] || [[ "$drawpile_script_completed_warning" = "y" ]] || [[ "$drawpile_script_completed_warning" = "Y" ]]; then
		echo "Ignoring warning: drawpile_script_completed_warning"
		sudo sed -i '\!^drawpile_script_completed_warning =!{h;s!=.*!= '"ignored"'!};${x;\!^$!{s!!drawpile_script_completed_warning = '"ignored"'!;H};x}' $drawpile_configuration_values_file
	elif [[ "$drawpile_script_completed_warning" = "no" ]] || [[ "$drawpile_script_completed_warning" = "NO" ]] || [[ "$drawpile_script_completed_warning" = "No" ]] || [[ "$drawpile_script_completed_warning" = "n" ]] || [[ "$drawpile_script_completed_warning" = "N" ]]; then
		echo Exiting script.
		sleep 10
		exit
	else
		echo Invalid option selected! Exiting script.
		sleep 10
		exit
	fi
else
	echo "First time script is running. Adding value for later query."
	sudo sed -i '\!^drawpile_script_completed =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!drawpile_script_completed = '"no"'!;H};x}' $drawpile_configuration_values_file
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo

function version_test_by_distro_function () {
	if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]] ; then
		# if [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" && "$what_architecture" = "Architecture: x86-64" && "$verify_if_this_is_raspbian_or_debian" == "" ]] || [[ "$what_linux_name" == "NAME=\"Ubuntu\"" ]]; then
		if [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" || "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ]] || [[ "$what_linux_name" == "NAME=\"Ubuntu\"" ]]; then
			apt-cache show $package_name > /dev/null 2>&1
			not_available_check=$?
			# 0 equals exists, 100 equals does not exist.
			if [ "$not_available_check" == "0" ]; then
				:
			elif [ "$not_available_check" == "100" ]; then
				not_available_check=1
				# echo "Error: No matching Packages to list"			
			else
				test_version="error_02_not_found"
				test_update_version="error_02_not_found"
				test_installation_status="error_02_not_found"
				echo "${bold}${red}This message for does not exist check for Debian/Ubuntu should not be visible.${normal}"
			fi
		else
			dpkg -l $package_name > /dev/null 2>&1
			not_available_check=$?
		fi
		# 0 equals exists, 1 equals does not exist.
		if [ "$not_available_check" == "1" ]; then
			# Package doesn't exist.
			test_version="error_01_does_not_exist"
			test_update_version="error_01_does_not_exist"
			test_installation_status="error_01_does_not_exist"
			# echo "Error: No matching Packages to list"
		elif [ "$not_available_check" == "0" ]; then
			# Now that we know the package exists, it's time to determine if it's even installed.
			installation_status=$( apt-cache policy $package_name | grep "Installed:" | awk '{for (i=2; i<NF; i++) printf $i " "; print $NF}' )
			candidate_status=$( apt-cache policy $package_name | grep "Candidate:" | awk '{for (i=2; i<NF; i++) printf $i " "; print $NF}' )
			if [[ "$package_name" == "nodejs" && ( "$what_architecture" == "Architecture: x86-64" && "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ) ]]; then
				# I believe this check should only be necessary on Raspbian for Desktop, due to manual download that doesn't update local available repo list of packages...
				if node -v &> /dev/null; then
					installation_status=$( node -v | cut -c2- )
					candidate_status="18.4.0"
				else
					installation_status="(none)"
					candidate_status="18.4.0"
				fi
			fi
			if [ "$installation_status" == "(none)" ]; then
				# Not installed.
				test_version="Not Installed"
				test_version_simple="Not Installed"
				test_update_version="$candidate_status"
				test_update_version_simple="$candidate_status"
				test_installation_status="Not Installed"
				# echo "Package $package_name is not installed but can be installed with version: $candidate_status"
			else
				if [ "$candidate_status" = "$installation_status" ]; then
					# Installed and up to date.
					test_version="$installation_status"
					test_version_simple="$installation_status"
					test_update_version="$candidate_status"
					test_update_version_simple="$candidate_status"
					test_installation_status="Installed and up to date"
					# echo "Package $package_name is installed and up to date ($candidate_status)."
				elif [ "$candidate_status" > "$installation_status" ]; then
					# Installed and not up to date.
					test_version="$installation_status"
					test_version_simple="$installation_status"
					test_update_version="$candidate_status"
					test_update_version_simple="$candidate_status"
					test_installation_status="Installed and not up to date"
					# echo "Package $package_name is installed ($installation_status) and there is an update available ($candidate_status)."
				else
					test_version="error_02_not_found"
					test_update_version="error_02_not_found"
					test_installation_status="error_02_not_found"
					echo "${bold}${red}This message for does not exist check should not be visible. (Not Fedora - 1)${normal}"
				fi
			fi
		else
			test_version="error_02_not_found"
			test_update_version="error_02_not_found"
			test_installation_status="error_02_not_found"
			echo "${bold}${red}This message for does not exist check should not be visible. (Not Fedora - 2)${normal}"
		fi
	fi
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		# Because the line below always returns the 2nd line output, that means the package is either already installed, not installed (but could be installed), or doesn't exist.
		# 		Installed Packages / Available Packages / Error: No matching Packages to list
		dnf info -q $package_name > /dev/null 2>&1
		not_available_check=$?
		# 0 equals exists, 1 equals does not exist.
		if [ "$not_available_check" == "1" ]; then
			test_version="error_01_does_not_exist"
			test_update_version="error_01_does_not_exist"
			test_installation_status="error_01_does_not_exist"
			# echo "Error: No matching Packages to list"
		elif [ "$not_available_check" == "0" ]; then
			installation_status=$( dnf info -q $package_name | sed -n '2 p' )
			if [[ "${installation_status,,}" == "installed packages" || "${installation_status,,}" == "available packages" ]]; then
				# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
				:
			else
				installation_status=$( dnf info -q $package_name | sed -n '1 p' )
				if [[ "${installation_status,,}" == "installed packages" || "${installation_status,,}" == "available packages" ]]; then
					# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
					:
				else
					installation_status="error"
				fi
			fi
			installation_status_candidate_check=$( dnf info -q $package_name | grep -i "available packages" )
			if [ -z "${installation_status_candidate_check,,}" ]; then
				installation_status_candidate_check=$( dnf info -q $package_name | grep -i "installed packages" )
				if [ -z "${installation_status_candidate_check,,}" ]; then
					installation_status_candidate_check="error"
				fi
			fi
			
			if [ "${installation_status,,}" == "installed packages" ]; then
				if [ "${installation_status_candidate_check,,}" == "available packages" ]; then
					# Package is installed, but an update is available.
					candidate_status=$( dnf info -q $package_name | grep -i "Version" | tr -s " " | grep -i "Version :" | tail -1 | awk '{ print $3 }' )
					candidate_status_02=$( dnf info -q $package_name | grep -i "Release" | tr -s " " | grep -i "Release :" | tail -1 | awk '{ print $3 }' )
					version=$( dnf info -q $package_name | grep -i "Version" | tr -s " " | grep -i -m 1 "Version :" | tail -1 | awk '{ print $3 }' )
					version_02=$( dnf info -q $package_name | grep -i "Release" | tr -s " " | grep -i -m 1 "Release :" | tail -1 | awk '{ print $3 }' )
					test_version="$version-$version_02"
					test_version_simple="$version"
					test_update_version="$candidate_status-$candidate_status_02"
					test_update_version_simple="$candidate_status"
					test_installation_status="Installed and not up to date"
				elif [[ "${installation_status_candidate_check,,}" == "installed packages" || "${installation_status_candidate_check,,}" == "" ]]; then
					# Package is installed and up to date
					version=$( dnf info -q $package_name | grep -i "Version" | tr -s " " | grep -i -m 1 "Version :" | tail -1 | awk '{ print $3 }' )
					version_02=$( dnf info -q $package_name | grep -i "Release" | tr -s " " | grep -i -m 1 "Release :" | tail -1 | awk '{ print $3 }' )
					test_version="$version-$version_02"
					test_version_simple="$version"
					test_update_version="$version-$version_02"
					test_update_version_simple="$version"
					test_installation_status="Installed and up to date"
				else
					test_version="error_02_not_found"
					test_update_version="error_02_not_found"
					test_installation_status="error_02_not_found"
					echo "This not available check for Fedora should not be visible."
				fi
			elif [ "${installation_status,,}" == "available packages" ]; then
				# Package is not yet installed.
				candidate_status=$( dnf info -q $package_name | grep -i "Version" | tr -s " " | grep -i "Version :" | tail -1 | awk '{ print $3 }' )
				candidate_status_02=$( dnf info -q $package_name | grep -i "Release" | tr -s " " | grep -i "Release :" | tail -1 | awk '{ print $3 }' )
				test_version="Not Installed"
				test_update_version="$candidate_status-$candidate_status_02"
				test_update_version_simple="$candidate_status"
				test_installation_status="Not Installed"
			else
				test_version="error_02_not_found"
				test_update_version="error_02_not_found"
				test_installation_status="error_02_not_found"
				echo "${bold}${red}This message for does not exist check should not be visible. (Fedora - 1 - $package_name )${normal}"
			fi
		else
			test_version="error_02_not_found"
			test_update_version="error_02_not_found"
			test_installation_status="error_02_not_found"
			echo "${bold}${red}This message for does not exist check should not be visible. (Fedora - 2 - $package_name )${normal}"
		fi
	fi
}

<<comment_EOF

Example for testing versions. 

package_name=golang
version_test_by_distro_function

if [ "$test_installation_status" == "error_01_does_not_exist" ]; then
	echo "The $package_name was not found for installation."
elif [ "$test_installation_status" == "Not Installed" ]; then
	echo "The $package_name package is not yet installed, can install: $test_update_version"
elif [ "$test_installation_status" == "Installed and up to date" ]; then
	echo "The $package_name package is installed and up to date ($test_version)."
elif [ "$test_installation_status" == "Installed and not up to date" ]; then
	echo "Package $package_name is installed ($test_version) and there is an update available ($test_update_version)."
else
	echo "This not available check for Fedora/Debian should not be visible."
fi

comment_EOF

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# 
# This section checks for language specific folder names
# 
<<comment_EOF

/home/pi/.config/user-dirs.dirs
# --------------------------------------------------------------------------------
# This file is written by xdg-user-dirs-update
# If you want to change or add directories, just edit the line you're
# interested in. All local changes will be retained on the next run.
# Format is XDG_xxx_DIR="$HOME/yyy", where yyy is a shell-escaped
# homedir-relative path, or XDG_xxx_DIR="/yyy", where /yyy is an
# absolute path. No other format is supported.
# 
XDG_DESKTOP_DIR="$HOME/Desktop"
XDG_DOWNLOAD_DIR="$HOME/Downloads"
XDG_TEMPLATES_DIR="$HOME/Templates"
XDG_PUBLICSHARE_DIR="$HOME/Public"
XDG_DOCUMENTS_DIR="$HOME/Documents"
XDG_MUSIC_DIR="$HOME/Music"
XDG_PICTURES_DIR="$HOME/Pictures"
XDG_VIDEOS_DIR="$HOME/Videos"
# --------------------------------------------------------------------------------
grep -m 1 "XDG_DOCUMENTS_DIR=" "/home/$current_username/.config/user-dirs.dirs" | cut -d "=" -f2- | sed s/"\$HOME\/"// | sed -e 's/^"//' -e 's/"$//'

comment_EOF

local_user_dirs="/home/$current_username/.config/user-dirs.dirs"

if [[ -e "$local_user_dirs" ]]; then
	XDG_PUBLICSHARE_DIR=$( grep -m 1 "XDG_PUBLICSHARE_DIR=" "$local_user_dirs" | cut -d "=" -f2- | sed s/"\$HOME\/"// | sed -e 's/^"//' -e 's/"$//' )
	XDG_DESKTOP_DIR=$( grep -m 1 "XDG_DESKTOP_DIR=" "$local_user_dirs" | cut -d "=" -f2- | sed s/"\$HOME\/"// | sed -e 's/^"//' -e 's/"$//' )
	XDG_DOCUMENTS_DIR=$( grep -m 1 "XDG_DOCUMENTS_DIR=" "$local_user_dirs" | cut -d "=" -f2- | sed s/"\$HOME\/"// | sed -e 's/^"//' -e 's/"$//' )
	XDG_PICTURES_DIR=$( grep -m 1 "XDG_PICTURES_DIR=" "$local_user_dirs" | cut -d "=" -f2- | sed s/"\$HOME\/"// | sed -e 's/^"//' -e 's/"$//' )
	
	XDG_MUSIC_DIR=$( grep -m 1 "XDG_MUSIC_DIR=" "$local_user_dirs" | cut -d "=" -f2- | sed s/"\$HOME\/"// | sed -e 's/^"//' -e 's/"$//' )
	XDG_VIDEOS_DIR=$( grep -m 1 "XDG_VIDEOS_DIR=" "$local_user_dirs" | cut -d "=" -f2- | sed s/"\$HOME\/"// | sed -e 's/^"//' -e 's/"$//' )
	XDG_DOWNLOAD_DIR=$( grep -m 1 "XDG_DOWNLOAD_DIR=" "$local_user_dirs" | cut -d "=" -f2- | sed s/"\$HOME\/"// | sed -e 's/^"//' -e 's/"$//' )
	
	option_loc_1="/home/$current_username/$XDG_PUBLICSHARE_DIR"
	option_loc_2="/home/$current_username/$XDG_DESKTOP_DIR"
	option_loc_3="/home/$current_username/$XDG_DOCUMENTS_DIR"
	option_loc_4="/home/$current_username/$XDG_PICTURES_DIR"
	option_loc_5="/usr/local/bin"
	option_loc_6="/home/drawpileuser"
	dp_install_loc_9_custom=""

	# The locations below are used with Samba file sharing set up.
	option_loc_10="/home/$current_username/$XDG_MUSIC_DIR"
	option_loc_11="/home/$current_username/$XDG_VIDEOS_DIR"
	option_loc_12="/home/$current_username/$XDG_DOWNLOAD_DIR"
else
	option_loc_1="/home/$current_username/Public"
	option_loc_2="/home/$current_username/Desktop"
	option_loc_3="/home/$current_username/Documents"
	option_loc_4="/home/$current_username/Pictures"
	option_loc_5="/usr/local/bin"
	option_loc_6="/home/drawpileuser"
	dp_install_loc_9_custom=""

	# The locations below are used with Samba file sharing set up.
	option_loc_10="/home/$current_username/Music"
	option_loc_11="/home/$current_username/Videos"
	option_loc_12="/home/$current_username/Downloads"
fi
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

# Graphics system in use detection

if [[ -e "$option_loc_2" && "$XDG_SESSION_TYPE" == "wayland" ]]; then
	echo "${bold}${yellow}Notice to the user: an FYI${normal}"
	echo "${bold}${yellow}Using Wayland for graphics generated on this system.${normal}"
	echo
	echo "Unfortunately, this does not support API for screen capture. So in the"
	echo "situation where additional technical support is required or wishing to"
	echo "use remote connection software such as realVNC, it is not currently"
	echo "possible under wayland. However, it generally performs much better than "
	echo "the old X11 system for generating graphics. Using SSH to connect remotely"
	echo "will still work if properly configured if tech support is required and"
	echo "does not require seeing the desktop interface."
	echo
	echo "${bold}${underline}General Resources:${normal}"
	echo " - Wayland vs Xorg"
	echo "     https://www.secjuice.com/wayland-vs-xorg/"
	echo
	echo "${bold}${underline}Additional Resources if wanting to switch to X11:${normal}"
	if [[ ( "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" || "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ) && "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ]]; then
		# ----- Raspbian Debian ---------------------------------------------------------------------------------------------
		echo " - Raspberry Pi 5, Bookworm and RealVNC Connect"
		echo "     https://help.realvnc.com/hc/en-us/articles/14110635000221-Raspberry-Pi-5-Bookworm-and-RealVNC-Connect"
		echo " - Raspberry Pi 4 Kiosk Mode doesn´t work"
		echo "     https://forums.raspberrypi.com/viewtopic.php?t=358317"
		echo " - Getting the Raspbery PI Official Touchscreen to work with RaspiOS Bookworm"
		echo "     https://area-51.blog/2023/10/12/getting-the-raspbery-pi-official-touchscreen-to-work-with-raspios-bookworm/"
	elif [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ]; then
		# ----- Debian ------------------------------------------------------------------------------------------------------
		echo " - How to Enable X11 and Disable Wayland Window System"
		echo "     https://trendoceans.com/how-to-enable-x11-and-disable-wayland-window-system/"
	elif [ "$what_linux_name" == "NAME=\"Ubuntu\"" ]; then
		# ----- Ubuntu ------------------------------------------------------------------------------------------------------
		echo " - How to Enable X11 and Disable Wayland Window System"
		echo "     https://trendoceans.com/how-to-enable-x11-and-disable-wayland-window-system/"
		echo " - How to perform the switch from the “Wayland” display server to Xorg (X11) on Linux Ubuntu 22.04 LTS"
		echo "     https://helpdesk.psionline.com/hc/en-gb/articles/13470827149332-How-to-perform-the-switch-from-the-Wayland-display-server-to-Xorg-X11-on-Linux-Ubuntu-22-04-LTS"
	elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		# ----- Fedora ------------------------------------------------------------------------------------------------------
		echo " - Configuring Xorg as the default GNOME session"
		echo "     https://docs.fedoraproject.org/en-US/quick-docs/configuring-xorg-as-default-gnome-session/"
	else
		# ----- Generic Resources -------------------------------------------------------------------------------------------
		# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
		:
	fi
	echo
	echo "${bold}${yellow}You do not need to change this setting unless you want to use RealVNC${normal}"
	echo "${bold}${yellow}or some other remote connection software.${normal}"
	echo
	pause
	if [[ ( "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" || "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ) && "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ]]; then
		echo
		echo "${bold}${red}***************************** IMPORTANT NOTE: *****************************${normal}"
		echo
		echo "Please note that this is ONLY necessary if you wish to use RealVNC"
		echo "as of November 2023. Eventually RealVNC is expected to support Wayland"
		echo "before the first half of 2024, presumably before 06/30/2024. Once"
		echo "support becomes available for RealVNC on Wayland, this will no longer"
		echo "be necessary."
		echo
		echo "Changes can be reverted manually by using the following"
		echo "command in the Terminal application: sudo raspi-config"
		echo
		echo "Use the arrow keys on your keyboard to move selection (or tab key) and"
		echo "Enter to make your selection."
		echo ""
		echo "Go to --> 6 - Advanced Options	- Configure advanced settings"
		echo "      --> A6 wayland              Switch between X and Wayland backends"
		echo "      --> W1 X11					Openbox window manager with X11 backend"
		echo "      --> Select 'Ok' when prompted 'Openbox on X11 is active'"
		echo "      --> Select the <Finish> option now that you're back at the main menu."
		echo "      --> Select <Yes> when prompted 'Would you like to reboot now?'"
		echo ""
		echo "Once rebooted, re-run the script and you should no longer be running"
		echo "wayland, which will allow RealVNC to work.Go to the Start menu, Raspberry"
		echo "Pi Configuration, the 'Interfaces' tab, and enable 'VNC'. Click Ok. This"
		echo "will enable you to work on the Raspberry Pi remotely."
		echo
		echo "${bold}${red}***************************** IMPORTANT NOTE: *****************************${normal}"
		echo
		echo "Since this is Raspbian for Desktop or Raspberry Pi, the script can"
		echo "disable Wayland for you which will require a reboot to take effect."
		echo
		echo "To proceed, you must type out 'yes' or 'no' fully spelled out."
		echo
		while :; do
			read -r -p "${bold}${red}Would you like to disable wayland and switch to X11?:${normal} " wayland_to_x11_query

			echo
			if [ "$wayland_to_x11_query" == "yes" ] || [ "$wayland_to_x11_query" == "YES" ] || [ "$wayland_to_x11_query" == "Yes" ] || [ "$wayland_to_x11_query" == "no" ] || [ "$wayland_to_x11_query" == "NO" ] || [ "$wayland_to_x11_query" == "No" ]; then
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done
		
		if [ "$wayland_to_x11_query" == "yes" ] || [ "$wayland_to_x11_query" == "YES" ] || [ "$wayland_to_x11_query" == "Yes" ]; then
			echo "Reverting to X11 display server."
			echo "Using commands found in: /usr/bin/raspi-config"
			# 'which raspi-config' can be used 		--> https://raspberrypi.stackexchange.com/questions/1322/where-is-the-script-for-raspi-config-stored-in-the-fs-on-raspbian
			echo
			sudo sed /etc/lightdm/lightdm.conf -i -e "s/^#\\?user-session.*/user-session=LXDE-pi-x/"
			sudo sed /etc/lightdm/lightdm.conf -i -e "s/^#\\?autologin-session.*/autologin-session=LXDE-pi-x/"
			sudo sed /etc/lightdm/lightdm.conf -i -e "s/^#\\?greeter-session.*/greeter-session=pi-greeter/"
			if [ -e "/var/lib/AccountsService/users/$USER" ] ; then
				sudo sed "/var/lib/AccountsService/users/$USER" -i -e "s/XSession=.*/XSession=LXDE-pi-x/"
			fi
			wait $!
			echo
			echo "Status: Openbox on X11."
			echo "${bold}${red}System must reboot to take effect.${normal}"
			echo
			echo "${bold}${red}Press any key to initiate the reboot.${normal}"
			echo
			pause
			echo
			sudo reboot
		elif [ "$wayland_to_x11_query" == "no" ] || [ "$wayland_to_x11_query" == "NO" ] || [ "$wayland_to_x11_query" == "No" ]; then
			echo "Not reverting to X11 display server."
			
			<<comment_EOF
echo "Reverting to Wayfire on Wayland display server."
echo "Using commands found in: /usr/bin/raspi-config"
# Commands to revert to Wayfire on Wayland
echo
sudo sed /etc/lightdm/lightdm.conf -i -e "s/^#\\?user-session.*/user-session=LXDE-pi-wayfire/"
sudo sed /etc/lightdm/lightdm.conf -i -e "s/^#\\?autologin-session.*/autologin-session=LXDE-pi-wayfire/"
sudo sed /etc/lightdm/lightdm.conf -i -e "s/^#\\?greeter-session.*/greeter-session=pi-greeter-wayfire/"
sudo sed /etc/lightdm/lightdm.conf -i -e "s/^#\\?fallback-test.*/fallback-test=\/usr\/bin\/xfallback.sh/"
sudo sed /etc/lightdm/lightdm.conf -i -e "s/^#\\?fallback-session.*/fallback-session=LXDE-pi-x/"
sudo sed /etc/lightdm/lightdm.conf -i -e "s/^#\\?fallback-greeter.*/fallback-greeter=pi-greeter/"
if [ -e "/var/lib/AccountsService/users/$USER" ] ; then
	sudo sed "/var/lib/AccountsService/users/$USER" -i -e "s/XSession=.*/XSession=LXDE-pi-wayfire/"
fi
wait $!
echo
echo "Status: Wayfire on Wayland. System must reboot to take effect."
comment_EOF

		else
			echo "This message should not be visible regarding: wayland_to_x11_query"
		fi
	fi
elif [[ -e "$option_loc_2" && "$XDG_SESSION_TYPE" == "x11" ]]; then
	echo "${bold}${green}Notice to the user: an FYI${normal}"
	echo "${bold}${green}Using x11 for graphics generated on this system.${normal}"
	echo
	echo "This supports API for screen capture and is useful in the event that"
	echo "additional technical support is required, or if wishing to use remote"
	echo "connection software such as realVNC. However, it does not offer the"
	echo "performance enhancement if using this as a primary desktop computer"
	echo "device (when compared to Wayfire on Wayland on Raspbian Bookworm)."
	echo
	pause
else
	# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
	:
fi

echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}*****Select a location for build and server files . . .*****${normal}"
echo
	
invalid_path_text="${red}${bold}X - Automatic local path selection is invalid -${normal}"

function display_location_selection_options () {
	echo 'Pick an install location for the use of the Drawpile Server folders.'
	echo 'This includes session recordings, file backed sessions which help the'
	echo 'server survive crashes or power outages, or template files which help'
	echo 'create rooms with specific settings that exist on the server at all'
	echo 'times.'
	echo
	if [[ ( "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" || "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ) && "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ]]; then
		[[ -d "$option_loc_1" ]] && echo "1 - Public Folder      ${underline}${bold}${cyan}(Recommended for Pi)${normal}		- $option_loc_1" || echo "$invalid_path_text $option_loc_1"
	else
		[[ -d "$option_loc_1" ]] && echo "1 - Public Folder                                       - $option_loc_1" || echo "$invalid_path_text $option_loc_1"
	fi
	[[ -d "$option_loc_2" ]] && echo "2 - Desktop Folder					- $option_loc_2" || echo "$invalid_path_text $option_loc_2"
	[[ -d "$option_loc_3" ]] && echo "3 - Documents Folder					- $option_loc_3" || echo "$invalid_path_text $option_loc_3"
	[[ -d "$option_loc_4" ]] && echo "4 - Pictures Folder					- $option_loc_4" || echo "$invalid_path_text $option_loc_4"
	[[ -d "$option_loc_5" ]] && echo "5 - /usr/local/bin" || echo "$invalid_path_text $option_loc_5"
	if [[ ( "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" || "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ) && "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ]]; then
		[[ -d "$option_loc_6" ]] && echo "6 - /home/drawpileuser " || echo "$invalid_path_text $option_loc_6"
	else
		[[ -d "$option_loc_6" ]] && echo "6 - /home/drawpileuser ${underline}${bold}${cyan}(Recommended)${normal}" || echo "$invalid_path_text $option_loc_6"
	fi
	echo
	echo "9 - Enter your own location and create the folders if they do not exist."
	echo '  - Specify an already existing location: simply enter the exact location'
	echo '        desired without a / at the end. This is an advanced option and not'
	echo '        suggested for average users. If using a path with spaces, do NOT '
	echo '        use double or single quotes as the script will not work if you do.'
	echo
	echo "      ${underline}Acceptable Example:${normal} $option_loc_2/My Drawpile Server"
	echo "	${underline}Note:${normal} This location is an example and may not exist on your computer."
	echo
	echo "${bold}Note:${normal} If you use Windows and Share files across the network, this script"
	echo '     will give you the option later to share just the Public folder, or'
	echo '     the Music, Pictures, Public, and Videos folders, or the other'
	echo '     location personally specified, or no folders.'
	echo
}

# The below verifies the input as either a number 1-4, or existing folder location without a / at the end.
# If there is a / at the end, it will break the script.
# 2nd line below is an old line after the line above it, left for reference. 
# [[ $dp_install_loc =~ ^[0-9]+$ ]] || [[ -d "$dp_install_loc" ]] || { echo; echo "Enter a valid number or existing path location."; echo "Don't use double or single quotes."; echo ; echo 'If selecting a path, simply enter the exact location desired without a / at'; echo '        the end. If using a path with spaces, do NOT use double or single '; echo '        quotes as the script will not work if you do. This directory must'; echo '        already exist. If not, create it manually before using this script.'; echo; continue; } 
# if [[ -d "$dp_install_loc" ]] && [ "${dp_install_loc: -1}" != \" ] && [ "${dp_install_loc: -1}" != \' ] && [ "${dp_install_loc: -1}" != / ] || (( "$dp_install_loc" >= 1 && "$dp_install_loc" <= 5 )) ; then
function invalid_path_selection_01 () {
	echo
	echo "${red}${bold}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo "${red}${bold}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!${normal}"
	echo "${red}${bold}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo
	echo "${red}${bold}Invalid number or the path selection does not exist, try again. ${normal}"
	echo
	echo "${red}${bold}If selecting a path, simply enter the exact location desired without a / at${normal}"
	echo "${red}${bold}        the end. If using a path with spaces, do NOT use double or single ${normal}"
	echo "${red}${bold}        quotes as the script will not work if you do. This directory must${normal}"
	echo "${red}${bold}        already exist. If not, create it manually before using this script.${normal}"
	echo
	echo "${red}${bold}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo "${red}${bold}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!${normal}"
	echo "${red}${bold}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo 
}

variable_to_read_1=dp_install_loc
variable_to_read_2=dp_install_loc_9_custom
variable_to_read_3=""

value_description_1="Set location to download source files, server scripts, server files, etc..."
value_description_2="Will create sub-folder called programs and put files in there."


read_stored_config_value_query_function
if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	dp_install_loc=$read_stored_config_value_query_1
	dp_install_loc_9_custom=$read_stored_config_value_query_2
	
	if [[ "$drawpile_script_completed_test" == "drawpile_script_completed = no" ]] && [ ! -z "$dp_install_loc_9_custom" ] && [[ -d "$dp_install_loc_9_custom" ]]; then
		echo
		echo "${bold}${cyan}Custom location set, script not yet completed fully, action required.${normal}"
		echo 
		echo "${bold}${red}Changing permissions of directory to add group drawpileread.${normal}"
		sudo chown drawpileuser:drawpileread "$dp_install_loc_9_custom" -R
		echo
		echo "${bold}${red}Setting read-write-execute (775) chmod permissions ${normal}"
		echo "${bold}${red}for directory.${normal}"
		sudo chmod 775 "$dp_install_loc_9_custom" -R
		#
		# - https://stackoverflow.com/questions/68638028/members-of-group-cant-access-directory-in-linux
		echo
		echo '--------------------------------------------------------------------------------'
		echo '--------------------------------------------------------------------------------'
		echo
	fi
	
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	display_location_selection_options
	while :; do
		read -r -p "${bold}Please make your selection now by entering the number or folder path:${normal} " dp_install_loc
		[[ $dp_install_loc =~ ^[0-9]+$ ]] || [[ -d "$dp_install_loc" ]] || { invalid_path_selection_01; display_location_selection_options; continue; }
		if [[ -d "$dp_install_loc" ]] && [ "${dp_install_loc: -1}" != \" ] && [ "${dp_install_loc: -1}" != \' ] && [ "${dp_install_loc: -1}" != / ] ; then
			break
		elif (( "$dp_install_loc" >= "1" && "$dp_install_loc" <= "6" )) ; then
			if [[ -d "$option_loc_1" ]] || [[ -d "$option_loc_2" ]] || [[ -d "$option_loc_3" ]] || [[ -d "$option_loc_4" ]] || [[ -d "$option_loc_5" ]] || [[ -d "$option_loc_6" ]]; then
				if [[ "$dp_install_loc" != "6" ]]; then
					sudo chown :drawpileread "/home/$current_username"
					sudo chmod 770 "/home/$current_username"
					if [[ "$dp_install_loc" = "1" ]]; then sudo chown :drawpileread "$option_loc_1"; sudo chmod 770 "$option_loc_1"; fi
					if [[ "$dp_install_loc" = "2" ]]; then sudo chown :drawpileread "$option_loc_2"; sudo chmod 770 "$option_loc_2"; fi
					if [[ "$dp_install_loc" = "3" ]]; then sudo chown :drawpileread "$option_loc_3"; sudo chmod 770 "$option_loc_3"; fi
					if [[ "$dp_install_loc" = "4" ]]; then sudo chown :drawpileread "$option_loc_4"; sudo chmod 770 "$option_loc_4"; fi
					if [[ "$dp_install_loc" = "5" ]]; then sudo chown :drawpileread "$option_loc_5"; sudo chmod 770 "$option_loc_5"; fi
				fi
				sudo sed -i '\!^option_loc_num =!{h;s!=.*!= '"$dp_install_loc"'!};${x;\!^$!{s!!option_loc_num = '"$dp_install_loc"'!;H};x}' $drawpile_configuration_values_file
				break
			else
				invalid_path_selection_01
				display_location_selection_options
			fi
		elif [ "$dp_install_loc" = "9" ] ; then
			sudo sed -i '\!^option_loc_num =!{h;s!=.*!= '"$dp_install_loc"'!};${x;\!^$!{s!!option_loc_num = '"$dp_install_loc"'!;H};x}' $drawpile_configuration_values_file
			echo
			echo "This is your current working directory."
			echo
			pwd
			echo
			echo "This is a list of paths in the home directory:"
			echo
			ls -d /home/*
			echo
			echo "You can enter this path and any folders you wish to create the server "
			echo "files within or enter the full path of your choosing . . . "
			echo
			read -r -p "${bold}Please enter your desired folder path location:${normal} " dp_install_loc_9_custom
			echo
			echo
			echo "${bold}Is this path correct?: $dp_install_loc_9_custom ${normal}"
			while :; do
				read -r -p "${bold}Please make your selection now by entering y or n:${normal} " verify_dp_install_loc
				if [ "$verify_dp_install_loc" == "y" ] || [ "$verify_dp_install_loc" == "Y" ] || [ "$verify_dp_install_loc" == "yes" ] || [ "$verify_dp_install_loc" == "YES" ] || [ "$verify_dp_install_loc" == "Yes" ] || [ "$verify_dp_install_loc" == "n" ] || [ "$verify_dp_install_loc" == "N" ] || [ "$verify_dp_install_loc" == "no" ] || [ "$verify_dp_install_loc" == "NO" ] || [ "$verify_dp_install_loc" == "No" ]; then
					break
				else
					echo
					echo "Invalid input selection, try again."
					echo
					continue
				fi
			done
			if [ "$verify_dp_install_loc" == "y" ] || [ "$verify_dp_install_loc" == "Y" ] || [ "$verify_dp_install_loc" == "yes" ] || [ "$verify_dp_install_loc" == "YES" ] || [ "$verify_dp_install_loc" == "Yes" ]; then
				echo
				sudo mkdir -p -v "$dp_install_loc_9_custom"
				sudo sed -i '\!^dp_install_loc_9_custom =!{h;s!=.*!= '"$dp_install_loc_9_custom"'!};${x;\!^$!{s!!dp_install_loc_9_custom = '"$dp_install_loc_9_custom"'!;H};x}' $drawpile_configuration_values_file
				break
			elif [ "$verify_dp_install_loc" == "n" ] || [ "$verify_dp_install_loc" == "N" ] || [ "$verify_dp_install_loc" == "no" ] || [ "$verify_dp_install_loc" == "NO" ] || [ "$verify_dp_install_loc" == "No" ]; then
				echo
				invalid_path_selection_01
				display_location_selection_options
			else
				echo
				echo "This message should not be visible as an invalid option was provided."
			fi
		else
			invalid_path_selection_01
			display_location_selection_options
		fi
	done
	echo
	if [ "$dp_install_loc" == "1" ]; then
		dp_install_loc=$option_loc_1
		echo "Install location chosen is $dp_install_loc"
	elif [ "$dp_install_loc" == "2" ]; then
		dp_install_loc=$option_loc_2
		echo "Install location chosen is $dp_install_loc"
	elif [ "$dp_install_loc" == "3" ]; then
		dp_install_loc=$option_loc_3
		echo "Install location chosen is $dp_install_loc"
	elif [ "$dp_install_loc" == "4" ]; then
		dp_install_loc=$option_loc_4
		echo "Install location chosen is $dp_install_loc"
	elif [ "$dp_install_loc" == "5" ]; then
		dp_install_loc=$option_loc_5
		echo "Install location chosen is $dp_install_loc"
	elif [ "$dp_install_loc" == "6" ]; then
		dp_install_loc=$option_loc_6
		echo "Install location chosen is $dp_install_loc"
	elif [ "$dp_install_loc" == "9" ]; then
		dp_install_loc=$dp_install_loc_9_custom
		echo "Install location chosen is $dp_install_loc"
	else
		sudo mkdir -p -v "$dp_install_loc"
		echo "Install location chosen is $dp_install_loc"
	fi
	sudo sed -i '\!^dp_install_loc =!{h;s!=.*!= '"$dp_install_loc"'!};${x;\!^$!{s!!dp_install_loc = '"$dp_install_loc"'!;H};x}' $app_installation_status_file
	sudo sed -i '\!^dp_install_loc =!{h;s!=.*!= '"$dp_install_loc"'!};${x;\!^$!{s!!dp_install_loc = '"$dp_install_loc"'!;H};x}' $drawpile_configuration_values_file
else
	echo "This message should not be visible."
fi

echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}*****Auto Verifying if Script is Up to Date . . .*****${normal}"
echo
function script_update_check_function () {
	sudo mkdir -p -v "$dp_install_loc/Programs"
	sudo chown :drawpileread "$dp_install_loc/Programs"
	cd "$dp_install_loc/Programs" || { echo "Failure to change directory, exiting script in 30 seconds."; sleep 30; exit 1; }
	sudo $wget_or_wget2_quiet_progress "https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/$github_main_script_only_sub_folder_path$script_name" || { echo "${bold}${red}If the server cannot reach the web, then this script will fail to run.${normal}"; echo ""; echo "Terminating script in 30 seconds."; echo ""; sleep 30; exit; }
	sudo chmod 777 "$dp_install_loc/Programs" -R
	# --------------------------------------------------------------------------------
	# The purpose of this check is for compatibility with older version of the scripts. 
	dpcheckversion=$(grep -m 1 "drawpilescriptversion=" "$dp_install_loc/Programs/$script_name" | cut -c 23-40)
	dp_check_version=$(grep -m 1 "drawpile_script_version=" "$dp_install_loc/Programs/$script_name" | cut -c 25-40)
	# This is a check in case the user changed the name of the script from the default, so it overwrites it successfully.
	current_script_name="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"
	echo

	if [[ "$dpcheckversion" != "" ]]; then
		dp_check_version=$dpcheckversion
	elif [[ "$dp_check_version" != "" ]]; then
		:
		# Do nothing as no error was detected.
		# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
	else
		echo
		echo This update test should not be visible.
		echo
	fi
	# --------------------------------------------------------------------------------
	if [[ "$drawpile_script_version" < "$dp_check_version" ]]; then
		validate_script_download_complete=$( tail -10 "$dp_install_loc/Programs/$script_name" | grep -io -m 1 '} # this ensures the entire script is downloaded, the other part of this is located just after the script update and wget check. #' )
		if [[ "$validate_script_download_complete" == '} # this ensures the entire script is downloaded, the other part of this is located just after the script update and wget check. #' ]]; then
			# Do nothing, entire file is present presumably.
			echo "${bold}${green}Verified that the download of updated script is successful.${normal}"
			echo
		else
			echo "${bold}${yellow}Newest Script is using version $dp_check_version.${normal}"
			echo "${bold}${red}However, download of updated script failed. Removing file and exiting script.${normal}"
			echo
			echo "Please try running the script again to re-attempt the download."
			echo
			sudo rm -rf "$dp_install_loc/Programs/$script_name"
			pause
			exit
		fi
		echo "${bold}${yellow}Newest Script is using version $dp_check_version.${normal}"
		echo "Newer version of script available, the old script has been copied over"
		echo "the old script. Please re-run this script to use the newest version."
		echo
		cd "$dp_install_loc" || { echo "Failure to change directory, exiting script in 30 seconds."; sleep 30; exit 1; }
		sudo rm -rf "$script_directory/$current_script_name"
		sudo cp "$dp_install_loc/Programs/$script_name" "$script_directory/$current_script_name"
		wait $!
		sudo chmod 777 "$script_directory/$current_script_name"
		wait $!
		sudo rm -rf "$dp_install_loc/Programs/$script_name"
		echo
		echo "Terminating script in 30 seconds."
		echo
		sleep 30
		exit
	elif [[ "$drawpile_script_version" = "$dp_check_version" ]]; then
		echo "${bold}${green}Script is newest version available.${normal}"
		sudo rm -rf "$dp_install_loc/Programs/$script_name"
	elif [[ "$drawpile_script_version" > "$dp_check_version" ]]; then
		echo "${bold}${yellow}It appears the creator of the script has failed to update github with the newest version.${normal}"
		echo "Please reach on github or reach out to Bluestrings on the official Drawpile Discord"
		echo "server. Invite link is found on the lower left corner of the website."
		echo
		echo "Script in use: $drawpile_script_version"
		echo "Github Script: $dp_check_version"
		sudo rm -rf "$dp_install_loc/Programs/$script_name"
		echo
		echo "Pausing script for 5 seconds before continuing."
		echo
		sleep 5s
	else
		echo "${bold}${red}Unable to determine script version, proceeding with script.${normal}"
	fi
}

# if [ "$what_linux_flavor" != "PRETTY_NAME=\"Fedora Linux 40 (Server Edition)\"" ]; then

# ----------------------------------------------------------------------------------
# Verify wget is installed.
# ----------------------------------------------------------------------------------

if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	version_wget=$( apt-cache policy wget | grep "Installed:" | cut -c 14-19 )
	minimum_version_wget=1.18-5
elif [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Forty)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Workstation Edition)\"" ]] || [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 41 (Server Edition)\"" ]] || [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 41 (Forty One)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 41 (Workstation Edition)\"" ]]; then
	# elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Workstation Edition)\"" ]; then
	version_wget=$( dnf info -q wget2 | grep -i "Version" | tail -1 | tr -s " " | awk '{ print $3 }' )
	installation_status_wget=$( dnf info -q wget2 | sed -n '2 p' )
	if [[ "${installation_status_wget,,}" == "installed packages" || "${installation_status_wget,,}" == "available packages" ]]; then
		# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
		:
	else
		installation_status_wget=$( dnf info -q wget2 | sed -n '1 p' )
		if [[ "${installation_status_wget,,}" == "installed packages" || "${installation_status_wget,,}" == "available packages" ]]; then
			# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
			:
		else
			installation_status_wget="error"
		fi
	fi
	minimum_version_wget=2.1.0
elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	version_wget=$( dnf info -q wget | grep -i "Version" | tail -1 | tr -s " " | awk '{ print $3 }' )
	installation_status_wget=$( dnf info -q wget | sed -n '2 p' )
	if [[ "${installation_status_wget,,}" == "installed packages" || "${installation_status_wget,,}" == "available packages" ]]; then
		# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
		:
	else
		installation_status_wget=$( dnf info -q wget | sed -n '1 p' )
		if [[ "${installation_status_wget,,}" == "installed packages" || "${installation_status_wget,,}" == "available packages" ]]; then
			# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
			:
		else
			installation_status_wget="error"
		fi
	fi
	minimum_version_wget=1.18-5
	# Installed Packages
	# Available Packages
	# Error: No matching Packages to list
else
	# Uses the same as first command, just in case.
	# --> if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	version_wget=$( apt-cache policy wget | grep "Installed:" | cut -c 14-19 )
	minimum_version_wget=1.18-5
fi


if [[ "$version_wget" = "(none)" ]] || [[ "$installation_status_wget" = "Available Packages" ]]; then
	echo "Package ${bold}wget${normal} is not installed."
	echo "Installing package, used for verifying script is"
	echo "up to date."
	echo
	sudo $packages_update_program
	sudo $package_install_program wget # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "Exiting script..." && echo "" && sleep 30 && exit
	echo
	if [[ "$version_wget" = "(none)" ]] || [[ "$installation_status_wget" = "Error: No matching Packages to list" ]]; then
		echo "${bold}${red}Package wget is not available in your distribution's repository.${normal}"
		echo
		echo "This is an optional package used to verify that the script"
		echo "is up to date. You must manually check GitHub to verify"
		echo "the script being used is up to date. You may experience"
		echo "problems installing Drawpile if not up to date."
		echo
		echo "https://github.com/$github_account_name/$github_project_name"
		echo 
		echo "Continuing script in 30 seconds."
		echo
		echo
		sleep 30
	elif [[ "$version_wget" > "$minimum_version_wget" ]] || [[ "$version_wget" = "$minimum_version_wget" ]]; then
		script_update_check_function
	elif [[ "$version_wget" < "$minimum_version_wget" ]]; then
		echo "${bold}${yellow}Package wget is not the minimum version ($minimum_version_wget)${normal}."
		echo
		echo "This is an optional package used to verify that the script"
		echo "is up to date. Script may not work as intended."
		echo
		echo "You should manually check GitHub to verify the script being"
		echo "used is up to date. You may experience problems installing"
		echo "Drawpile if not up to date."
		echo
		echo "https://github.com/$github_account_name/$github_project_name"
		echo 
		echo "Continuing script in 30 seconds."
		echo
		echo
		sleep 30
		echo
		script_update_check_function
	else
		echo "Unable to make a determination of which version of wget is installed."
		echo "This message should not be visible."
	fi
elif [[ "$version_wget" > "$minimum_version_wget" ]] || [[ "$version_wget" = "$minimum_version_wget" ]]; then
	script_update_check_function
elif [[ "$version_wget" < "$minimum_version_wget" ]]; then
	echo "${bold}${yellow}Package wget is not the minimum version ($minimum_version_wget)${normal}."
	echo
	echo "This is an optional package used to verify that the script"
	echo "is up to date. Attempting to update."
	echo
	sudo $packages_update_program
	sudo $package_install_program wget # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "Exiting script..." && echo "" && sleep 30 && exit
	echo
	if [[ "$version_wget" > "$minimum_version_wget" ]] || [[ "$version_wget" = "$minimum_version_wget" ]]; then
		echo
		script_update_check_function
	elif [[ "$version_wget" < "$minimum_version_wget" ]]; then
		echo "${bold}${yellow}Package wget is not the minimum version ($minimum_version_wget)${normal}."
		echo
		echo "This is an optional package used to verify that the script"
		echo "is up to date. Script may not work as intended since updated"
		echo "version is not available for install."
		echo
		echo "You should manually check GitHub to verify the script being"
		echo "used is up to date. You may experience problems installing"
		echo "Drawpile if not up to date."
		echo
		echo "https://github.com/$github_account_name/$github_project_name"
		echo 
		echo "Continuing script in 30 seconds."
		echo
		echo
		sleep 30
		echo
		script_update_check_function
	else
		echo "Unable to make a determination of which version of wget is installed."
		echo "This message should not be visible."
	fi
else
	echo "Unable to make a determination of which version of wget is installed."
	echo "This message should not be visible."
fi
# else
#	script_update_check_function
# fi

{ # this ensures the entire script is downloaded, other part is at very end of script #

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# Consider Addition of Testing Distro If Drawpile failed to compile
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# Old command below, too specific results and won't pull accurate info.
# using_what_rasp_codename=$( lsb_release -a 2>/dev/null | grep -oh -m 1 stretch )
# lsb_release -a 2>/dev/null | grep "Codename:" | grep -o -m 1 bullseye
# -o only matching
# -h no filename
# -m 1 stop after found amount x
# --------------------------------------------------------------------------------
# Sample output of 'uname -a': 
# Linux raspberrypi 4.14.98-v7+ #1200 SMP Tue Feb 12 20:27:48 GMT 2019 armv7l GNU/Linux
# Raspbian Versions: 		https://en.wikipedia.org/wiki/Raspbian

# Sample output of 'lsb_release -a': 
# Distributor ID:	Raspbian
# Description:		Raspbian GNU/Linux 9.8 (stretch)
# Release:			9.8
# Codename:			stretch
# --------------------------------------------------------------------------------
# Sample output of 'uname -a':
# Linux raspberrypi 5.15.84-v7+ #1613 SMP Thu Jan 5 11:59:48 GMT 2023 armv7l GNU/Linux

# Sample output of 'lsb_release -a': 
# Distributor ID:	Raspbian
# Description:		Raspbian GNU/Linux 11 (bullseye)
# Release:			11
# Codename:			bullseye
# --------------------------------------------------------------------------------
# Sample output of 'uname -a':
# 	Linux pi4brokeSD 6.1.21-v8+ #1642 SMP PREEMPT Mon Apr  3 17:24:16 BST 2023 aarch64 GNU/Linux

# Sample output of 'lsb_release -a': 
# 	No LSB modules are available.
# 	Distributor ID:	Debian
# 	Description:	Debian GNU/Linux 11 (bullseye)
# 	Release:		11
# 	Codename:		bullseye
# --------------------------------------------------------------------------------
# Sample Output: 6.1
using_what_linux_kernel=$( uname -a | awk '{ print $3 }' | cut -c 1-3 )
# Sample Output: Debian GNU/Linux 11 (bullseye)
using_what_rasp_description_release=$( lsb_release -a 2>/dev/null | grep "Description:" | awk '{for (i=2; i<NF; i++) printf $i " "; print $NF}' )
# Sample Output: 11
using_what_rasp_release=$( lsb_release -a 2>/dev/null | grep "Release:" | awk '{ print $2 }' )
# Sample Output: bullseye
using_what_rasp_codename=$( lsb_release -a 2>/dev/null | grep "Codename:" | awk '{ print $2 }' )

if [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" || "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ]] && [ "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ]; then
	if [[ "$using_what_linux_kernel" == "4.14" ]] && [[ "$using_what_rasp_codename" == "stretch" ]] ; then
		echo '--------------------------------------------------------------------------------'
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${cyan}*****Would you like to temporarily add the Testing Package *****${normal}"
		echo "${bold}${cyan}*****           Repo for updated packages. . . .           *****${normal}"
		echo
		echo "This step exists in the event that you are unable to successfully"
		echo "compile Drawpile using the built in changes provided by the script."
		echo
		echo "If this is the first time you are running the script, select n for"
		echo "no. Otherwise, you may attempt this step with a second attempt."
		echo "When operations have completed, the script will remove the testing"
		echo "repository options automatically."
		echo
		echo "${bold}Detailed Notes${normal}"
		echo "Sometimes, updates require newer packages than what are available"
		echo "within the stable package repository. This means that the script"
		echo "will fail if it is a required package. The testing repository"
		echo "packages should be stable and quite usable, so it should be safe"
		echo "to use these updates without issue. However, since it is the testing"
		echo "repository, there exists a chance it could mess up your installation"
		echo "and require you to reinstall Raspbian. Presumably, this chance is low"
		echo "but ultimately this script does not assume responsibility should"
		echo "a problem arise. Use this only if your first attempt to compile"
		echo "Drawpile fails."
		echo
		echo
		echo 'Please choose if you would like to attempt the testing repository'
		echo 'for packages to be installed.'
		echo
		echo 'y for yes'
		echo 'n for no'
		echo
		while :; do
			read -r -p "${bold}Please make your selection now by entering y or n:${normal} " testing_package_decision
			if [ "$testing_package_decision" == "y" ] || [ "$testing_package_decision" == "Y" ] || [ "$testing_package_decision" == "yes" ] || [ "$testing_package_decision" == "YES" ] || [ "$testing_package_decision" == "Yes" ] || [ "$testing_package_decision" == "n" ] || [ "$testing_package_decision" == "N" ] || [ "$testing_package_decision" == "no" ] || [ "$testing_package_decision" == "NO" ] || [ "$testing_package_decision" == "No" ]; then
				break
			else
				echo
				echo "Invalid input selection, try again."
				echo
				continue
			fi
		done
		if [ "$testing_package_decision" == "y" ] || [ "$testing_package_decision" == "Y" ] || [ "$testing_package_decision" == "yes" ] || [ "$testing_package_decision" == "YES" ] || [ "$testing_package_decision" == "Yes" ] ; then
			echo
			echo "${bold}${cyan}*****Adding Testing Package Repo for updated packages. . . .*****${normal}"
			echo
			echo "${bold}${cyan}*****Drawpile requires newer QT Version than what is available*****${normal}"
			echo "${bold}${cyan}*****          within the stable repository . . . .           *****${normal}"
			echo
			# --------------------------------------------------------------------------------
			# --------------------------------------------------------------------------------
			if [[ -e  "/etc/apt/preferences.d/buster.pref" ]]; then
				echo "File buster.pref exists, skipping addition."
				file_buster_pref_exist=yes
			elif [[ ! -e "/etc/apt/preferences.d/buster.pref" ]]; then
				echo "File buster.pref does not exist, adding file."
				echo -e "Package: *\nPin: release a=buster\nPin-Priority: 750" | sudo tee /etc/apt/preferences.d/buster.pref 2>&1 >/dev/null
				file_buster_pref_exist=no
			else
				echo "Cannot determine if file buster.pref exists or not."
				echo "This message should not be visible."
				file_buster_pref_exist=error
			fi
			# --------------------------------------------------------------------------------
			if [[ -e  "/etc/apt/sources.list.d/buster.list" ]]; then
				echo "File buster.list exists, skipping addition."
				file_buster_list_exist=yes
			elif [[ ! -e "/etc/apt/sources.list.d/buster.list" ]]; then
				echo "File buster.list does not exist, adding file."
				echo "deb http://mirrordirector.raspbian.org/raspbian/ buster main contrib non-free rpi" | sudo tee /etc/apt/sources.list.d/buster.list 2>&1 >/dev/null
				file_buster_list_exist=no
			else
				echo "Cannot determine if file buster.list exists or not."
				echo "This message should not be visible."
				file_buster_list_exist=error
			fi
			# --------------------------------------------------------------------------------
			# --------------------------------------------------------------------------------
			if [[ -e  "/etc/apt/preferences.d/stretch.pref" ]]; then
				echo "File stretch.pref exists, skipping addition."
				file_stretch_pref_exist=yes
			elif [[ ! -e "/etc/apt/preferences.d/stretch.pref" ]]; then
				echo "File stretch.pref does not exist, adding file."
				echo -e "Package: *\nPin: release a=stretch\nPin-Priority: 900" | sudo tee /etc/apt/preferences.d/stretch.pref 2>&1 >/dev/null
				file_stretch_pref_exist=no
			else
				echo "Cannot determine if file stretch.pref exists or not."
				echo "This message should not be visible."
				file_stretch_pref_exist=error
			fi
			# --------------------------------------------------------------------------------
			if [[ -e  "/etc/apt/sources.list.d/stretch.list" ]]; then
				echo "File stretch.list exists, skipping addition."
				file_stretch_list_exist=yes
			elif [[ ! -e "/etc/apt/sources.list.d/stretch.list" ]]; then
				echo "File stretch.list does not exist, adding file."
				sudo echo "deb http://mirrordirector.raspbian.org/raspbian/ stretch main contrib non-free rpi" | sudo tee /etc/apt/sources.list.d/stretch.list 2>&1 >/dev/null
				file_stretch_list_exist=no
			else
				echo "Cannot determine if file stretch.list exists or not."
				echo "This message should not be visible."
				file_stretch_list_exist=error
			fi
			# --------------------------------------------------------------------------------
			# --------------------------------------------------------------------------------
		elif [ "$testing_package_decision" == "n" ] || [ "$testing_package_decision" == "N" ] || [ "$testing_package_decision" == "no" ] || [ "$testing_package_decision" == "NO" ] || [ "$testing_package_decision" == "No" ] ; then
			echo "Skipping addition of testing package repository for Raspbian Stretch."
		else
			echo "Skipping addition of testing package repository for Raspbian Stretch."
			echo
			echo "This message should not be visible as an invalid option was provided."
			echo
		fi
	else
		echo
		echo "Not using a recognized version of Raspbian, or using some other flavor"
		echo "of Linux. Skipping possible addition of testing distro for older"
		echo "versions of raspbian which may fail to compile otherwise."
	fi
fi
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
#
# Check if package is available and attempt to install it. Provide error message 
# if not. Used for optional packages not related to main install of Drawpile
# Server
#
# Line 518  - version_test_by_distro_function 			--- (individual - 02x) used as a basic installation check
# Line 1177 - package_version_check_and_update_function --- (individual - 02x) used to check and provide an explanation on why it is needed, with dynamic number of fields available, and then attempt to update. 
# Line 1300 - package_version_check_function 			--- (individual - 24x) used to check and provide an explanation on why it is needed, with dynamic number of fields available. 
# Line 1416 - package_install_status_check_function 	--- (multiple   - 12x) more complex, used to check a list of programs all at once.


function version_apt_or_dnf_function () {
	if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
		version=$( apt-cache policy $package_name | grep "Installed:" | cut -c "$package_version_length" )
		# version=$( apt-cache policy $package_name | grep "Installed:" | awk '{for (i=2; i<NF; i++) printf $i " "; print $NF}' )
		# candidate_status=$( apt-cache policy $package_name | grep "Candidate:" | awk '{for (i=2; i<NF; i++) printf $i " "; print $NF}' )
	fi
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		version=$( dnf info -q $package_name | grep -i "Version" | tr -s " " | grep -i -m 1 "Version :" | tail -1 | awk '{ print $3 }' )
		installation_status=$( dnf info -q $package_name | sed -n '2 p' )
		if [[ "${installation_status,,}" == "installed packages" || "${installation_status,,}" == "available packages" ]]; then
			# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
			:
		else
			installation_status=$( dnf info -q $package_name | sed -n '1 p' )
			if [[ "${installation_status,,}" == "installed packages" || "${installation_status,,}" == "available packages" ]]; then
				# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
				:
			else
				installation_status="error"
			fi
		fi
		# Installed Packages
		# Available Packages
		# Error: No matching Packages to list		
	fi
}

function package_available_dpkg_or_dnf_function () {
	if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]] && [ "$package_name" != "git" ]; then
		dpkg -l $package_name > /dev/null 2>&1
		not_available_check=$?
	fi
	if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]] && [ "$package_name" == "git" ]; then
		# For some reason, the dpkg -l command doesn't seem to work in Ubuntu on git ... ¯\_(ツ)_/¯
		not_available_check=0
	fi
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		dnf info -q $package_name > /dev/null 2>&1
		not_available_check=$?
	fi
}

function package_version_check_and_update_function () {
	if [ "$not_available_check" -eq "1" ]; then
		echo "${bold}${red}Package $package_name is not available in your distribution's repository. Minimum version is $minimum_version.${normal}"
		echo
		[ -z "$package_description_1_none" ] || echo "$package_description_1_none"
		[ -z "$package_description_2_none" ] || echo "$package_description_2_none"
		[ -z "$package_description_3_none" ] || echo "$package_description_3_none"
		[ -z "$package_description_4_none" ] || echo "$package_description_4_none"
		[ -z "$package_description_5_none" ] || echo "$package_description_5_none"
		echo
		#Check if variable $package_description empty. Don't display if empty, but display if content found.
		[ -z "$package_description_1" ] || echo "$package_description_1"
		[ -z "$package_description_2" ] || echo "$package_description_2"
		[ -z "$package_description_3" ] || echo "$package_description_3"
		[ -z "$package_description_4" ] || echo "$package_description_4"
		[ -z "$package_description_5" ] || echo "$package_description_5"
		echo
		[ -z "$package_action_1_none" ] || echo "$package_action_1_none"
		echo
		echo
		[ -z "$package_action_2_none" ] || "$package_action_2_none"
		[ -z "$package_action_3_none" ] || "$package_action_3_none"
	elif [ "$version" = "(none)" ] || [ "$installation_status" = "Available Packages" ]; then
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "Package ${bold}$package_name${normal} is not installed. Minimum version is $minimum_version."
		echo 
		[ -z "$package_description_1_initial_check_none" ] || echo "$package_description_1_initial_check_none"
		[ -z "$package_description_2_initial_check_none" ] || echo "$package_description_2_initial_check_none"
		[ -z "$package_description_3_initial_check_none" ] || echo "$package_description_3_initial_check_none"
		[ -z "$package_description_4_initial_check_none" ] || echo "$package_description_4_initial_check_none"
		[ -z "$package_description_5_initial_check_none" ] || echo "$package_description_5_initial_check_none"
		echo
		if [ "$install_package_set" = "yes" ]; then # --------------------------------------------------------------------------------
			sudo $package_install_program $package_name # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "Exiting script..." && echo "" && sleep 30 && exit
			version_apt_or_dnf_function
			echo
			if [ "$version" = "(none)" ] || [ "$installation_status" = "Available Packages" ]  || [ "$installation_status" = "Error: No matching Packages to list" ]; then
				echo
				echo '--------------------------------------------------------------------------------'
				echo
				echo "${bold}${red}Package $package_name is not available in your distribution's repository. Minimum version is $minimum_version.${normal}"
				echo
				[ -z "$package_description_1_none" ] || echo "$package_description_1_none"
				[ -z "$package_description_2_none" ] || echo "$package_description_2_none"
				[ -z "$package_description_3_none" ] || echo "$package_description_3_none"
				[ -z "$package_description_4_none" ] || echo "$package_description_4_none"
				[ -z "$package_description_5_none" ] || echo "$package_description_5_none"
				echo
				[ -z "$package_action_1_none" ] || echo "$package_action_1_none"
				echo
				echo
				[ -z "$package_action_2_none" ] || "$package_action_2_none"
				[ -z "$package_action_3_none" ] || "$package_action_3_none"
			elif [ "$version" > "$minimum_version" ] || [ "$version" = "$minimum_version" ]; then
				echo "${bold}${green}Package $package_name ($version) is installed. Minimum version is $minimum_version.${normal}"
			elif [ "$version" < "$minimum_version" ]; then
				echo
				echo '--------------------------------------------------------------------------------'
				echo
				echo "${bold}${yellow}Package $package_name ($version) is not the minimum version ($minimum_version)${normal}."
				echo
				[ -z "$package_description_1_not_min" ] || echo "$package_description_1_not_min"
				[ -z "$package_description_2_not_min" ] || echo "$package_description_2_not_min"
				[ -z "$package_description_3_not_min" ] || echo "$package_description_3_not_min"
				[ -z "$package_description_4_not_min" ] || echo "$package_description_4_not_min"
				[ -z "$package_description_5_not_min" ] || echo "$package_description_5_not_min"
				echo 
				[ -z "$package_action_1_not_min" ] || echo "$package_action_1_not_min"
				echo
				echo
				[ -z "$package_action_2_not_min" ] || "$package_action_2_not_min"
				[ -z "$package_action_3_not_min" ] || "$package_action_3_not_min"
			else
				echo "Unable to make a determination of which version of $package_name is installed."
				echo "This message should not be visible."
			fi
		fi
	elif [ "$version" > "$minimum_version" ] || [ "$version" = "$minimum_version" ]; then
		echo "${bold}${green}Package $package_name ($version) is installed. Minimum version is $minimum_version.${normal}"
	elif [ "$version" < "$minimum_version" ]; then
		echo "${bold}${yellow}Package $package_name ($version) is not the minimum version ($minimum_version)${normal}."
		echo
		[ -z "$package_description_1_not_initially_min" ] || echo "$package_description_1_not_initially_min"
		[ -z "$package_description_2_not_initially_min" ] || echo "$package_description_2_not_initially_min"
		[ -z "$package_description_3_not_initially_min" ] || echo "$package_description_3_not_initially_min"
		[ -z "$package_description_4_not_initially_min" ] || echo "$package_description_4_not_initially_min"
		[ -z "$package_description_5_not_initially_min" ] || echo "$package_description_5_not_initially_min"
		echo 
		if [ "$install_package_set" = "yes" ]; then # --------------------------------------------------------------------------------
			sudo $package_install_program $package_name # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "Exiting script..." && echo "" && sleep 30 && exit
			version_apt_or_dnf_function
			echo
			if [ "$version" > "$minimum_version" ] || [ "$version" = "$minimum_version" ]; then
				echo "Package ${bold}$package_name $version${normal} is installed."
			elif [ "$version" < "$minimum_version" ]; then
				echo
				echo '--------------------------------------------------------------------------------'
				echo
				echo "${bold}${yellow}Package $package_name ($version) is not the minimum version ($minimum_version)${normal}."
				echo
				[ -z "$package_description_1_not_min" ] || echo "$package_description_1_not_min"
				[ -z "$package_description_2_not_min" ] || echo "$package_description_2_not_min"
				[ -z "$package_description_3_not_min" ] || echo "$package_description_3_not_min"
				[ -z "$package_description_4_not_min" ] || echo "$package_description_4_not_min"
				[ -z "$package_description_5_not_min" ] || echo "$package_description_5_not_min"
				echo 
				[ -z "$package_action_1_not_min" ] || echo "$package_action_1_not_min"
				echo
				echo
				[ -z "$package_action_2_not_min" ] || "$package_action_2_not_min"
				[ -z "$package_action_3_not_min" ] || "$package_action_3_not_min"
			else
				echo "Unable to make a determination of which version of $package_name is installed."
				echo "This message should not be visible."
			fi
		fi
	else
		echo "Unable to make a determination of which version of $package_name is installed."
		echo "This message should not be visible."
	fi
}
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
#
# Check package version after mass install. Provide error message 
# if not.
#
# Repetitive function, will probably end up getting deleted after testing improved single function above.

function package_version_check_function () {
	if [ "$not_available_check" -eq "1" ]; then
		echo "${bold}${red}Package $package_name is not available in your distribution's repository. Minimum version is $minimum_version.${normal}"
		echo
		[ -z "$package_description_1_none" ] || echo "$package_description_1_none"
		[ -z "$package_description_2_none" ] || echo "$package_description_2_none"
		[ -z "$package_description_3_none" ] || echo "$package_description_3_none"
		[ -z "$package_description_4_none" ] || echo "$package_description_4_none"
		[ -z "$package_description_5_none" ] || echo "$package_description_5_none"
		echo
		#Check if variable $package_description empty. Don't display if empty, but display if content found.
		[ -z "$package_description_1" ] || echo "$package_description_1"
		[ -z "$package_description_2" ] || echo "$package_description_2"
		[ -z "$package_description_3" ] || echo "$package_description_3"
		[ -z "$package_description_4" ] || echo "$package_description_4"
		[ -z "$package_description_5" ] || echo "$package_description_5"
		echo
		[ -z "$package_action_1_none" ] || echo "$package_action_1_none"
		echo
		echo
		[ -z "$package_action_2_none" ] || "$package_action_2_none"
		[ -z "$package_action_3_none" ] || "$package_action_3_none"
	elif [ "$version" = "(none)" ]; then
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${red}Package $package_name is not available in your distribution's repository. Minimum version is $minimum_version.${normal}"
		echo 
		[ -z "$package_description_1_none" ] || echo "$package_description_1_none"
		[ -z "$package_description_2_none" ] || echo "$package_description_2_none"
		[ -z "$package_description_3_none" ] || echo "$package_description_3_none"
		[ -z "$package_description_4_none" ] || echo "$package_description_4_none"
		[ -z "$package_description_5_none" ] || echo "$package_description_5_none"
		echo
		#Check if variable $package_description empty. Don't display if empty, but display if content found.
		[ -z "$package_description_1" ] || echo "$package_description_1"
		[ -z "$package_description_2" ] || echo "$package_description_2"
		[ -z "$package_description_3" ] || echo "$package_description_3"
		[ -z "$package_description_4" ] || echo "$package_description_4"
		[ -z "$package_description_5" ] || echo "$package_description_5"
		echo
		[ -z "$package_action_1_none" ] || echo "$package_action_1_none"
		echo
		echo
		[ -z "$package_action_2_none" ] || "$package_action_2_none"
		[ -z "$package_action_3_none" ] || "$package_action_3_none"
	elif [ "$version" > "$minimum_version" ] || [ "$version" = "$minimum_version" ]; then
		echo "${bold}${green}Package $package_name ($version) is installed. Minimum version is $minimum_version.${normal}"
	elif [ "$version" < "$minimum_version" ]; then
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${yellow}Package $package_name ($version) is not the minimum version ($minimum_version)${normal}."
		echo
		[ -z "$package_description_1_not_min" ] || echo "$package_description_1_not_min"
		[ -z "$package_description_2_not_min" ] || echo "$package_description_2_not_min"
		[ -z "$package_description_3_not_min" ] || echo "$package_description_3_not_min"
		[ -z "$package_description_4_not_min" ] || echo "$package_description_4_not_min"
		[ -z "$package_description_5_not_min" ] || echo "$package_description_5_not_min"
		echo
		#Check if variable $package_description empty. Don't display if empty, but display if content found.
		[ -z "$package_description_1" ] || echo "$package_description_1"
		[ -z "$package_description_2" ] || echo "$package_description_2"
		[ -z "$package_description_3" ] || echo "$package_description_3"
		[ -z "$package_description_4" ] || echo "$package_description_4"
		[ -z "$package_description_5" ] || echo "$package_description_5"
		echo
		[ -z "$package_action_1_not_min" ] || echo "$package_action_1_not_min"
		echo
		echo
		[ -z "$package_action_2_not_min" ] || "$package_action_2_not_min"
		[ -z "$package_action_3_not_min" ] || "$package_action_3_not_min"
	else
		echo "Unable to make a determination of which version of $package_name is installed."
	fi
}
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	package_name=perl-interpreter
	version_test_by_distro_function

	if [ "$test_installation_status" == "error_01_does_not_exist" ]; then
		echo "${red}The $package_name was not found for installation.${normal}"
		echo "This is required in certain places of the script."
		echo
		sleep 10
		exit
	elif [ "$test_installation_status" == "Not Installed" ]; then
		echo "The $package_name package is not yet installed, can install: $test_update_version"
		echo "This is required in certain places of the script."
		echo
		sudo $package_install_program perl-interpreter # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "Exiting script..." && echo "" && sleep 30 && exit
		sudo sed -i '\!^perl-interpreter =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!perl-interpreter = '"no"'!;H};x}' $app_installation_status_file
	elif [ "$test_installation_status" == "Installed and up to date" ]; then
		echo "The $package_name package is installed and up to date ($test_version)."
		echo "This is required in certain places of the script."
		sudo sed -i '\!^perl-interpreter =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!perl-interpreter = '"yes"'!;H};x}' $app_installation_status_file
	elif [ "$test_installation_status" == "Installed and not up to date" ]; then
		echo "Package $package_name is installed ($test_version) and there is an update available ($test_update_version)."
		echo "This is required in certain places of the script."
		
		sudo $package_install_program perl-interpreter # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "Exiting script..." && echo "" && sleep 30 && exit
		sudo sed -i '\!^perl-interpreter =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!perl-interpreter = '"yes"'!;H};x}' $app_installation_status_file
	else
		echo "This not available check for Fedora should not be visible."
	fi
fi

# app_does_not_exist=0
# app_installed=0
# app_not_installed=0
# progs=(cmake extra-cmake-modules g++ libgif-dev libkf5archive-dev libkf5dnssd-dev libmicrohttpd-dev libminiupnpc-dev libqt5network5 libqt5svg5-dev libsodium-dev libsystemd-dev mini-httpd miniupnpc nginx openssl qtbase5-dev qtmultimedia5-dev qttools5-dev);
# package_install_status_check_function

function package_install_status_check_function () {
	for p in "${progs[@]}"; do
		if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
			# Verifies if app exists in repository and is installed.
			# if [[ $(apt-cache --quiet=0 policy "$p" 2>&1 | grep "Unable to locate package $p" | cut -c 4-80) != "Unable to locate package $p" ]] && [[ $(apt-cache policy "$p" | grep "Installed:" | cut -c 14-80) != "(none)" ]]; then
			#       if [[ "$package_install_status_check_decision_tree_q1" != "$package_install_status_check_decision_tree_a1" ]] && [[ "$package_install_status_check_decision_tree_q2" != "$package_install_status_check_decision_tree_a2" ]]; then
			
			# Verifies if app exists in repository but is not installed.
			# elif [[ $(apt-cache policy "$p" | grep "Installed:" | cut -c 14-80) = "(none)" ]]; then
			#       elif [[ "$package_install_status_check_decision_tree_q2" = "$package_install_status_check_decision_tree_a2" ]]; then
			package_install_status_check_decision_tree_q1=$( apt-cache --quiet=0 policy "$p" 2>&1 | grep "Unable to locate package $p" | cut -c 4-80 )		
			package_install_status_check_decision_tree_a1="Unable to locate package $p"
			package_install_status_check_decision_tree_a3="Unable to locate package $p"
			
			# Verifies if app does not exist in repository.
			# elif [[ $(apt-cache --quiet=0 policy "$p" 2>&1 | grep "Unable to locate package $p" | cut -c 4-80) = "Unable to locate package $p" ]]; then
			#      elif [[ "$package_install_status_check_decision_tree_q1" = "$package_install_status_check_decision_tree_a3" ]]; then
			package_install_status_check_decision_tree_q2=$( apt-cache policy "$p" | grep "Installed:" | cut -c 14-80 )
			package_install_status_check_decision_tree_a2="(none)"
		fi
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
			package_install_status_check_decision_tree_q1=$( dnf info -q $p | sed -n '2 p' )
			if [[ "${package_install_status_check_decision_tree_q1,,}" == "installed packages" || "${package_install_status_check_decision_tree_q1,,}" == "available packages" ]]; then
				# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
				:
			else
				package_install_status_check_decision_tree_q1=$( dnf info -q $p | sed -n '1 p' )
				if [[ "${package_install_status_check_decision_tree_q1,,}" == "installed packages" || "${package_install_status_check_decision_tree_q1,,}" == "available packages" ]]; then
					# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
					:
				else
					package_install_status_check_decision_tree_q1="error"
				fi
			fi
			
			package_install_status_check_decision_tree_a1="Error: No matching Packages to list"
			package_install_status_check_decision_tree_a3="Error: No matching Packages to list"
			
			package_install_status_check_decision_tree_q2=$( dnf info -q $p | sed -n '2 p' )
			if [[ "${package_install_status_check_decision_tree_q2,,}" == "installed packages" || "${package_install_status_check_decision_tree_q2,,}" == "available packages" ]]; then
				# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
				:
			else
				package_install_status_check_decision_tree_q2=$( dnf info -q $p | sed -n '1 p' )
				if [[ "${package_install_status_check_decision_tree_q2,,}" == "installed packages" || "${package_install_status_check_decision_tree_q2,,}" == "available packages" ]]; then
					# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
					:
				else
					package_install_status_check_decision_tree_q2="error"
				fi
			fi
			
			package_install_status_check_decision_tree_a2="Available Packages"
			# Installed Packages
			# Available Packages
			# Error: No matching Packages to list
		fi
		if [[ "${package_install_status_check_decision_tree_q1,,}" != "${package_install_status_check_decision_tree_a1,,}" ]] && [[ "${package_install_status_check_decision_tree_q2,,}" != "${package_install_status_check_decision_tree_a2,,}" ]]; then
			# Verifies if app exists in repository and is installed.
			if grep -qw "$p" $app_installation_status_file; then
				echo "Entry already made for $p, skipping entry for App Installation Status."
			else
				echo "$p = yes" | sudo tee -a $app_installation_status_file
				# sudo sed -i '\!^$p =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!$p = '"yes"'!;H};x}' $app_installation_status_file
			fi
			let app_installed++
		elif hash "${p}" 2>&-; then
			# Verifies app exists, even if compiled from source and is not in repository.
			# Notes --> https://unix.stackexchange.com/questions/70963/difference-between-2-2-dev-null-dev-null-and-dev-null-21
			#			The general form of this one is M>&-, where "M" is a file descriptor number. This will close output for whichever file descriptor is referenced, i.e. "M".
			#       --> http://www.tldp.org/LDP/abs/html/io-redirection.html
			#			M>N --> "M" is a file descriptor, which defaults to 1, if not explicitly set.
			if grep -qw "$p" $app_installation_status_file; then
				echo "Entry already made for $p, skipping entry for App Installation Status."
			else
				echo "$p = yes" | sudo tee -a $app_installation_status_file
				# sudo sed -i '\!^$p =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!$p = '"yes"'!;H};x}' $app_installation_status_file
			fi
			let app_installed++
		elif [[ "${package_install_status_check_decision_tree_q2,,}" = "${package_install_status_check_decision_tree_a2,,}" ]]; then
			# Verifies if app exists in repository but is not installed.
			if grep -qw "$p" $app_installation_status_file; then
				echo "Entry already made for $p, skipping entry for App Installation Status."
			else
				echo "$p = no" | sudo tee -a $app_installation_status_file
				# sudo sed -i '\!^$p =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!$p = '"no"'!;H};x}' $app_installation_status_file
			fi
			let app_not_installed++
		elif [[ "${package_install_status_check_decision_tree_q1,,}" = "${package_install_status_check_decision_tree_a3,,}" ]]; then
			# Verifies if app does not exist in repository.
			echo "$p does not exist."
			if grep -qw "$p" $app_installation_status_file; then
				echo "Entry already made for $p, skipping entry for App Installation Status."
			else
				echo "$p = error" | sudo tee -a $app_installation_status_file
				# sudo sed -i '\!^$p =!{h;s!=.*!= '"error"'!};${x;\!^$!{s!!$p = '"error"'!;H};x}' $app_installation_status_file
			fi
			let app_does_not_exist++
		else
			echo "$p program was unable to be processed by these rules."
		fi
	done

	if [[ "$app_does_not_exist" != "0" ]]; then
		echo
		printf "%d programs do not exist in repository nor were compiled from source.\n" "$app_does_not_exist"
		echo
		echo "You may be unable to compile the program from source."
		echo "Checks will be made later to determine to proceed or"
		echo "exit the script depending on if the package is"
		echo "required or is an optional package."
		echo
		echo "Waiting 30 seconds before proceeding."
		echo
		sleep 30
	else
		# Do nothing as no error was detected.
		# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
		:
	fi

	# The sort command used at the end sorts the list alphabetically.
	sudo sort $app_installation_status_file -o $app_installation_status_file
	# This removes any duplicates that may exist in the file.
	perl -i -ne 'print if ! $a{$_}++' $app_installation_status_file
}
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}*****Updating software list available for updates and new packages. . . .*****${normal}"
echo
sudo $packages_update_program 
# || echo "" && echo "${bold}${red}Update check failed.${normal}" && echo "Exiting script..." && echo "" && sleep 30 && exit
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}*****Update system packages . . . ?*****${normal}"
echo
echo 'Would you like to update all installed packages? This step may take a while' 
echo 'to complete if you choose to do this.'
echo
echo 'y for yes'
echo 'n for no'
echo
while :; do
	read -r -p "${bold}${cyan}Enter a letter and hit enter to continue:${normal} " install_all_packages
	echo
	if [ "$install_all_packages" == "y" ] || [ "$install_all_packages" == "Y" ] || [ "$install_all_packages" == "yes" ] || [ "$install_all_packages" == "YES" ] || [ "$install_all_packages" == "Yes" ] || [ "$install_all_packages" == "n" ] || [ "$install_all_packages" == "N" ] || [ "$install_all_packages" == "no" ] || [ "$install_all_packages" == "NO" ] || [ "$install_all_packages" == "No" ]; then
		break
	elif [ "$install_all_packages" == "" ]; then
		break
	else
		echo
		echo "${bold}${red}Invalid input selection, try again.${normal}"
		echo
		echo ----------------------------------------------------------------------------------
		echo
	fi
done
if [ "$install_all_packages" == "y" ] || [ "$install_all_packages" == "Y" ] || [ "$install_all_packages" == "yes" ] || [ "$install_all_packages" == "YES" ] || [ "$install_all_packages" == "Yes" ] ; then
	echo 'Updating already installed packages . . .'
	echo
	sudo $packages_system_upgrade
	sudo $packages_clean_program
else
	echo 'Skipping update of all installed packages.'
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}*****Check install status of packages and write to file . . .*****${normal}"
echo
echo "Packages already installed will come up with 'yes' and packages not yet"
echo "installed will appear with 'no'."
echo
# To be used to determine if any program/package is listening to port 80 or 443 for web hosting
# prior to NGINX install. This way the user can be alerted of potential problems.
# https://linuxconfig.org/using-ss-command-on-linux
if [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ] && [ "$verify_if_this_is_raspbian_or_debian" == "" ]; then
	# If Ubuntu or Debian (excluding Raspbian for Desktop and Raspbian for Pi on ARM)
	port_80_listening=$( ss -na | grep "0.0.0.0:80 " | grep "LISTEN" | awk '{ print $2 }' )
	port_443_listening=$( ss -na | grep "0.0.0.0:443 " | grep "LISTEN" | awk '{ print $2 }' )	
	# Old
	# port_80_listening=$( ss -na | grep "0 0.0.0.0:80 " | grep "LISTEN" | awk '{ print $6 }' )
	# port_443_listening=$( ss -na | grep "0 0.0.0.0:443 " | grep "LISTEN" | awk '{ print $6 }' )
	port_80_listening_app=$( sudo ss -nap | grep "0.0.0.0:80 " | grep "LISTEN" | awk '{ print $7 }' | sed -n 's!.*"\(.*\)",.*!\1!p' )
	port_443_listening_app=$( sudo ss -nap | grep "0.0.0.0:443 " | grep "LISTEN" | awk '{ print $7 }' | sed -n 's!.*"\(.*\)",.*!\1!p' )
	# tcp   LISTEN    0      511                                          0.0.0.0:80                0.0.0.0:*      users:(("nginx",pid=23074,fd=7),("nginx",pid=23073,fd=7),("nginx",pid=23072,fd=7)) 
fi
if [ "$what_linux_name" != "NAME=\"Ubuntu\"" ] || [ "$what_linux_name" != "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" != "Architecture: x86-64" ] && [ "$verify_if_this_is_raspbian_or_debian" != "" ]; then
	# If NOT Ubuntu or NOT Debian (but would include Raspbian for Desktop and Raspbian for Pi on ARM)
	port_80_listening=$( netstat -na | grep "0.0.0.0:80 " | grep "LISTEN" | awk '{ print $6 }' )
	port_443_listening=$( netstat -na | grep "0.0.0.0:443 " | grep "LISTEN" | awk '{ print $6 }' )
	# Old
	# port_80_listening=$( netstat -na | grep "0 0.0.0.0:80 " | grep "LISTEN" | awk '{ print $6 }' )
	# port_443_listening=$( netstat -na | grep "0 0.0.0.0:443 " | grep "LISTEN" | awk '{ print $6 }' )
	port_80_listening_app=$( sudo netstat -nap | grep "0 0.0.0.0:80 " | grep "LISTEN" | awk '{ print $7 }' | sed -n 's!.*/\(.*\):!\1!p' )
	port_443_listening_app=$( sudo netstat -nap | grep "0 0.0.0.0:443 " | grep "LISTEN" | awk '{ print $7 }' | sed -n 's!.*/\(.*\):!\1!p' )
	#																										Sed example text --> 1618/nginx:
	#																										Sed looks for any characters leading up to /, captures everything up to :
	#																										then replaces with captured group. Used ! instead of / to avoid escaping.
fi

# cargo clang build-essential
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	# dnf search PROGRAM
	# Minimal List
	# program_list_to_install_actual_dependencies="cmake extra-cmake-modules gcc-c++ git kf5-karchive-devel qt5-qtsvg-devel make policycoreutils-python-utils qt5-qtmultimedia-devel qt5-qtbase-devel zlib-devel cronie"
	# program_list_to_install_optional_dependencies="libmicrohttpd-devel libsodium-devel sqlite"
	
	# Full List 
	program_list_to_install_actual_dependencies="clang cmake cronie extra-cmake-modules gcc-c++ git kf5-karchive-devel kf5-kdnssd-devel make miniupnpc-devel policycoreutils-python-utils python3-gunicorn python-unversioned-command qt5-qtbase-devel qt5-qtmultimedia-devel qt5-qtnetworkauth-devel qt5-qtsvg-devel qt5-qttools-devel qt5-qtwebsockets-devel zlib-devel libwebp-devel"
	program_list_to_install_optional_dependencies="httpd-core libmicrohttpd-devel libsodium-devel libvpx-devel nginx openssl qtkeychain-qt5-devel sqlite systemd-devel"

	# Full List Unsorted
	# program_list_to_install_actual_dependencies="cmake extra-cmake-modules gcc-c++ git kf5-karchive-devel kf5-kdnssd-devel miniupnpc-devel qt5-qtnetworkauth-devel qt5-qtsvg-devel make	policycoreutils-python-utils qt5-qtbase-devel qt5-qtmultimedia-devel qt5-qttools-devel zlib-devel cronie python3-gunicorn python-unversioned-command clang qt5-qtwebsockets-devel"
	# program_list_to_install_optional_dependencies="libmicrohttpd-devel libsodium-devel systemd-devel httpd-core nginx openssl qtkeychain-qt5-devel libvpx-devel sqlite"
fi
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && ( [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Forty)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Workstation Edition)\"" ]] || [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 41 (Server Edition)\"" ]] || [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 41 (Forty One)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 41 (Workstation Edition)\"" ]] ); then
	# dnf search PROGRAM
	# Minimal List
	# program_list_to_install_actual_dependencies="cmake extra-cmake-modules gcc-c++ git kf5-karchive-devel qt5-qtsvg-devel make policycoreutils-python-utils qt5-qtmultimedia-devel qt5-qtbase-devel zlib-devel cronie"
	# program_list_to_install_optional_dependencies="libmicrohttpd-devel libsodium-devel sqlite"
	
	# Full List 
	#QT5
	program_list_to_install_actual_dependencies="clang cmake cronie extra-cmake-modules gcc-c++ git kf5-karchive-devel libzip-devel libzip-tools kf5-kdnssd-devel make miniupnpc-devel policycoreutils-python-utils python3-gunicorn python-unversioned-command qt5-qtbase-devel qt5-qtmultimedia-devel qt5-qtnetworkauth-devel qt5-qtsvg-devel qt5-qtsvg-devel qt5-qttools-devel qt5-qtwebsockets-devel zlib-ng-devel zlib-ng-compat-devel libwebp-devel"
	# QT6
	# program_list_to_install_actual_dependencies="clang cmake cronie extra-cmake-modules gcc-c++ git kf5-karchive-devel libzip-devel libzip-tools kf5-kdnssd-devel make miniupnpc-devel policycoreutils-python-utils python3-gunicorn python-unversioned-command qt6-qtbase-devel qt6-qtmultimedia-devel qt6-qtnetworkauth-devel qt6-qtsvg-devel qt6-qttools-devel qt6-qtwebsockets-devel zlib-ng-devel zlib-ng-compat-devel libwebp-devel"
	program_list_to_install_optional_dependencies="httpd-core libmicrohttpd-devel libsodium-devel libvpx-devel nginx openssl qtkeychain-qt6-devel sqlite systemd-devel"

	# Full List Unsorted
	# program_list_to_install_actual_dependencies="cmake extra-cmake-modules gcc-c++ git kf5-karchive-devel kf5-kdnssd-devel miniupnpc-devel qt5-qtnetworkauth-devel qt5-qtsvg-devel make	policycoreutils-python-utils qt5-qtbase-devel qt5-qtmultimedia-devel qt5-qttools-devel zlib-devel cronie python3-gunicorn python-unversioned-command clang qt5-qtwebsockets-devel"
	# program_list_to_install_optional_dependencies="libmicrohttpd-devel libsodium-devel systemd-devel httpd-core nginx openssl qtkeychain-qt5-devel libvpx-devel sqlite"
fi
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 31 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 31 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 32 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 32 (Server Edition)\"" ]]; then
	# dnf search PROGRAM
	# Minimal List
	# program_list_to_install_actual_dependencies="cmake extra-cmake-modules gcc-c++ git kf5-karchive-devel qt5-qtsvg-devel make policycoreutils-python-utils qt5-qtmultimedia-devel qt5-qtbase-devel zlib-devel cronie"
	# program_list_to_install_optional_dependencies="libmicrohttpd-devel libsodium-devel sqlite"
	
	# Full List - optional dependencies are slightly different - httpd-core libmicrohttpd-devel libsodium-devel
	program_list_to_install_actual_dependencies="clang cmake cronie extra-cmake-modules gcc-c++ git kf5-karchive-devel kf5-kdnssd-devel make miniupnpc-devel policycoreutils-python-utils python3-gunicorn python-unversioned-command qt5-qtbase-devel qt5-qtmultimedia-devel qt5-qtnetworkauth-devel qt5-qtsvg-devel qt5-qttools-devel qt5-qtwebsockets-devel zlib-devel libwebp-devel"
	program_list_to_install_optional_dependencies="httpd libmicrohttpd libsodium libvpx-devel nginx openssl qtkeychain-qt5-devel sqlite systemd-devel"
	
	# Full List unsorted
	# program_list_to_install_actual_dependencies="cmake extra-cmake-modules gcc-c++ git kf5-karchive-devel kf5-kdnssd-devel miniupnpc-devel qt5-qtnetworkauth-devel qt5-qtsvg-devel make	policycoreutils-python-utils qt5-qtbase-devel qt5-qtmultimedia-devel qt5-qttools-devel zlib-devel cronie python3-gunicorn python-unversioned-command clang qt5-qtwebsockets-devel"
	# program_list_to_install_optional_dependencies="libmicrohttpd libsodium systemd-devel httpd nginx openssl qtkeychain-qt5-devel libvpx-devel sqlite"
fi
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	program_list_to_install_actual_dependencies="apache2-utils build-essential clang cmake extra-cmake-modules g++ libgif-dev libkf5archive-dev libkf5dnssd-dev libminiupnpc-dev libqt5network5 libqt5svg5-dev libqt5websockets5-dev libsqlite3-dev miniupnpc policycoreutils python3.*-venv python3-pip python-is-python3 qtbase5-dev qtmultimedia5-dev qttools5-dev libwebp-dev"
	program_list_to_install_optional_dependencies="libmicrohttpd-dev libsodium-dev libsystemd-dev libvpx-dev mini-httpd nginx openssl qt5keychain-dev sqlite3"
	# Unsorted
	# program_list_to_install_actual_dependencies="cmake extra-cmake-modules g++ libgif-dev libkf5archive-dev libkf5dnssd-dev libminiupnpc-dev libqt5network5 libqt5svg5-dev miniupnpc qtbase5-dev qtmultimedia5-dev qttools5-dev python-is-python3 python3.*-venv clang build-essential apache2-utils libqt5websockets5-dev"
	# program_list_to_install_optional_dependencies="libmicrohttpd-dev libsodium-dev libsystemd-dev mini-httpd nginx openssl qt5keychain-dev libvpx-dev sqlite3"
fi
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
if [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ] && [ "$verify_if_this_is_raspbian_or_debian" == "" ]; then
	# Same as above for Not Fedora, but includes python-is-python3 for unversioned. Just a symlink I guess. python3.10-venv python3-pip / libpython3.10
	program_list_to_install_actual_dependencies="apache2-utils build-essential clang cmake extra-cmake-modules g++ libgif-dev libkf5archive-dev libkf5dnssd-dev libminiupnpc-dev libqt5network5 libqt5svg5-dev libqt5websockets5-dev libsqlite3-dev miniupnpc policycoreutils python3.*-venv python3-pip python-is-python3 qtbase5-dev qtmultimedia5-dev qttools5-dev libwebp-dev"
	program_list_to_install_optional_dependencies="libmicrohttpd-dev libsodium-dev libsystemd-dev libvpx-dev mini-httpd nginx openssl qt5keychain-dev sqlite3"

	
	# Unsorted
	# program_list_to_install_actual_dependencies="cmake extra-cmake-modules g++ libgif-dev libkf5archive-dev libkf5dnssd-dev libminiupnpc-dev libqt5network5 libqt5svg5-dev miniupnpc qtbase5-dev qtmultimedia5-dev qttools5-dev python3.*-venv python3-pip libsqlite3-dev policycoreutils python-is-python3 python3.*-venv clang build-essential apache2-utils libqt5websockets5-dev"
	
	# program_list_to_install_actual_dependencies="cmake extra-cmake-modules g++ libgif-dev libkf5archive-dev libkf5dnssd-dev libminiupnpc-dev libqt5network5 libqt5svg5-dev miniupnpc qtbase5-dev qtmultimedia5-dev qttools5-dev python-is-python3 python3.11-venv python3-pip libsqlite3-dev policycoreutils clang"
	# Unsorted
	#program_list_to_install_optional_dependencies="libmicrohttpd-dev libsodium-dev libsystemd-dev mini-httpd nginx openssl qt5keychain-dev libvpx-dev sqlite3"
fi
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
if [ "$what_linux_name" == "NAME=\"Ubuntu\"" ]; then
	# Same as above for Not Fedora, but includes python-is-python3 for unversioned. Just a symlink I guess. python3.10-venv python3-pip
	program_list_to_install_actual_dependencies="apache2-utils build-essential clang cmake extra-cmake-modules g++ libgif-dev libkf5archive-dev libkf5dnssd-dev libminiupnpc-dev libqt5network5 libqt5svg5-dev libqt5websockets5-dev libsqlite3-dev miniupnpc policycoreutils python3.*-venv python3-pip python-is-python3 qtbase5-dev qtmultimedia5-dev qttools5-dev libwebp-dev"
	program_list_to_install_optional_dependencies="libmicrohttpd-dev libsodium-dev libsystemd-dev libvpx-dev mini-httpd nginx openssl qt5keychain-dev sqlite3"
	
	# Unsorted
	# program_list_to_install_actual_dependencies="cmake extra-cmake-modules g++ libgif-dev libkf5archive-dev libkf5dnssd-dev libminiupnpc-dev libqt5network5 libqt5svg5-dev miniupnpc qtbase5-dev qtmultimedia5-dev qttools5-dev python3.10-venv python3-pip policycoreutils python-is-python3 python3.*-venv clang build-essential apache2-utils libqt5websockets5-dev"
	# program_list_to_install_optional_dependencies="libmicrohttpd-dev libsodium-dev libsystemd-dev mini-httpd nginx openssl qt5keychain-dev libvpx-dev sqlite3"
fi
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------


app_does_not_exist=0
app_installed=0
app_not_installed=0
progs=($program_list_to_install_actual_dependencies $program_list_to_install_optional_dependencies);
package_install_status_check_function

echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}*****Installing Dependencies . . .*****${normal}"
echo
# Compile Client Requirements - https://github.com/drawpile/Drawpile/wiki/Building-from-sources
# 
# *********** Actual Dependencies ***********
# **** Debian Packages (* means in use) *****																										Fedora Alternates (* means in use)
# cargo - Rust's package manager and build tool - that allows Rust projects to declare their various dependencies									-										
#         and ensure that you'll always get a repeatable build.																						-										
# clang - A C language family front-end for LLVM. The goal of the Clang project is to create a new C, C++, Objective C and Objective C++ 			clang									
#			front-end for the LLVM compiler. Its tools are built as libraries and designed to be loosely-coupled and extensible.					-										
# cmake * Cross platform open source make system																									cmake									*
# cronie - Cronie contains the standard UNIX daemon crond that runs specified programs at scheduled times and related tools. It is a 				cronie									*
#       fork of the original vixie-cron and has security and configuration enhancements like the ability to use pam and SELinux.					-										
# extra-cmake-modules * Extra modules and scripts for CMake																							extra-cmake-modules						*
# g++ * compiler 																																	gcc-c++									*
# git - Git is a fast, scalable, distributed revision control system with an 																		git										*
#       unusually rich command set that provides both high-level operations and full access to internals.											-										-
# libgif-dev * library for GIF images (development) (enables animated GIF export)																	giflib-devel.x86_64						*
# libkf5archive-dev * development files for karchive																								kf5-karchive-devel						*
# libkf5dnssd-dev * development files for kdnssd (enables local server discovery)																	kf5-kdnssd-devel						
# libminiupnpc-dev * UPnP IGD client lightweight library development files (enables automatic port forwarding)										miniupnpc-devel							
# libqt5network5  * Qt 5 network module																												qt5-qtnetworkauth-devel					
# libqt5svg5-dev * Qt 5 SVG module development files																								qt5-qtsvg-devel							*
# make - A GNU tool for controlling the generation of executables and other non-source files of a program from the program's source files. 			make									*
#       Make allows users to build and install packages without any significant knowledge about the details of the build process. The details 		-										-
#       about how the program should be built are provided for make in the program's makefile.														-										-
# miniupnpc * UPnP IGD client lightweight library client (enables automatic port forwarding)														miniupnpc-devel							
# policycoreutils-python-utils - SELinux policy core python utilities																				policycoreutils-python-utils			*
# python3-gunicorn - Green Unicorn (gunicorn) is an HTTP/WSGI server designed to serve fast clients or sleepy applications. That is to say; 		python3-gunicorn						*
#		behind a buffering front-end server such as nginx or lighttpd.																														
# python-unversioned-command - This package contains /usr/bin/python - the "python" command that runs Python 3.										python-unversioned-command 				*
# qtbase5-dev * Qt 5 base development files																											qt5-qtbase-devel						*
# qtmultimedia5-dev * APIs for multimedia functionality - development files																			qt5-qtmultimedia-devel					*
# qttools5-dev * Qt 5 tools development files																										qt5-qttools-devel						
# zlib-devel - is a general-purpose, patent-free, lossless data compression library which is used by many different programs.						zlib-devel								*
# libqt5websockets5-dev * This package contains the development files needed to build Qt applications using Qt 5 Web Sockets library.				qt5-qtwebsockets-devel					*

echo "${bold}${cyan}Installing Dependencies . . .${normal}"
sudo $package_install_program $program_list_to_install_actual_dependencies # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "Exiting script..." && echo "" && sleep 30 && exit
sudo $packages_clean_program
echo
# *********** Optional Dependencies ***********
# ***** Debian Packages (* means in use) ******																										Fedora Alternates (* means in use)
# libmicrohttpd-dev * library embedding HTTP server functionality (development, used for remote administration of drawpile server)					libmicrohttpd-devel	/ libmicrohttpd		*
#		libmicrohttpd-devel - Development files for libmicrohttpd																															
#		ibmicrohttpd - is a small C library that is supposed to make it easy to run an HTTP server as part of another application.															
# libsodium-dev * Network communication, cryptography and signaturing library - headers (server only, enables external authentication support)		libsodium-devel / libsodium				*
#		libsodium-devel - This package contains librarys and header files for developing applications that use libsodium libraries.															
#		libsodium - Sodium is a new, easy-to-use software library for encryption, decryption, signatures, password hashing, and more. It is a												
#				portable, cross-compilable, installable, packageable fork of NaCl, with a compatible API, and an extended API to improve usability											
#				even further. Its goal is to provide all of the core operations needed to build higher-level cryptographic tools. The design 												
#				choices emphasize security, and "magic constants" have clear rationales. 																									
# libsystemd-dev * systemd utility library - development files (enable socket drawpile server startup I believe)									systemd-devel							
# libvpx-dev * VP8 and VP9 video codec (development files) - VP8 and VP9 are open video codecs, originally developed by On2 and 					libvpx-devel							
#				released as open source by Google Inc. They are the successor of the VP3 codec, on which the Theora codec was based.				-										-
# 				This package contains the development libraries, header files needed by programs that want to compile with libvpx.					-										-
# mini-httpd * Small HTTP server (Used for creating password for use with NGINX)																	httpd-core / httpd						
#		httpd-core - The httpd-core package contains essential httpd binaries.																												
#		httpd - The Apache HTTP Server is a powerful, efficient, and extensible web server.																									
# nginx * small, powerful, scalable web/proxy server (used for reverse proxy to manage drawpile server in a more secure manner)						nginx									
# openssl * Secure Sockets Layer toolkit - cryptographic utility (used to create SSL key for encrypted drawing sessions)							openssl									
# qt5keychain-dev * It can use KWallet or GNOME Keyring, if one of them is available. Used for Drawpile Password storage.							qtkeychain-qt5-devel					
# QtColorPicker - Not chosen for install as it is bundled, but external library is used if available												-										-
# sqlite3 * Command line interface for SQLite 3, used by script to auto add settings so users don't have to do so.									sqlite									*

echo "${bold}${cyan}Installing Optional Dependencies . . .${normal}"
sudo $package_install_program $program_list_to_install_optional_dependencies # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "Exiting script..." && echo "" && sleep 30 && exit
sudo $packages_clean_program
echo
if [ "`systemctl is-enabled mini-httpd.service`" = "enabled" ]; then
	echo "${bold}${red}Mini-HTTPD is enabled, disabling and stopping service.${normal}"
	sudo systemctl disable mini-httpd.service
	sudo systemctl stop --now mini-httpd.service
	if [[ "`systemctl is-enabled nginx.service`" = "enabled" && ( "`systemctl is-active nginx.service`" = "failed" || "`systemctl is-active nginx.service`" = "inactive" ) ]]; then
		echo "${bold}${red}NGINX is failed and enabled, restarting service.${normal}"
		echo "${bold}${red}Likely due to mini-httpd being enabled.${normal}"
		sudo systemctl stop --now nginx.service
		sudo systemctl start --now nginx.service
	elif [[ "`systemctl is-active nginx.service`" = "active" ]]; then
		echo "${bold}${yellow}NGINX is running, restarting service.${normal}"
		sudo systemctl stop --now nginx.service
		sudo systemctl start --now nginx.service
	else
		echo "${bold}${yellow}NGINX is not currently running.${normal}"
	fi
elif [[ "`systemctl is-active mini-httpd.service`" = "active" ]]; then
	echo "${bold}${red}Mini-HTTPD is not enabled but running, stopping service.${normal}"
	sudo systemctl stop --now mini-httpd.service
	if [[ "`systemctl is-enabled nginx.service`" = "enabled" && ( "`systemctl is-active nginx.service`" = "failed" || "`systemctl is-active nginx.service`" = "inactive" ) ]]; then
		echo "${bold}${red}NGINX is failed and enabled, restarting service.${normal}"
		echo "${bold}${red}Likely due to mini-httpd being enabled.${normal}"
		sudo systemctl stop --now nginx.service
		sudo systemctl start --now nginx.service
	elif [[ "`systemctl is-active nginx.service`" = "active" ]]; then
		echo "${bold}${yellow}NGINX is running, restarting service.${normal}"
		sudo systemctl stop --now nginx.service
		sudo systemctl start --now nginx.service
	else
		echo "${bold}${yellow}NGINX is not currently running.${normal}"
	fi
else
	echo "${bold}${green}Mini-HTTPD is not enabled nor running.${normal}"
	echo "${bold}${green}No action required.${normal}"
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}***** Verifying Installation of Curl, Git, and Rust *****${normal}"
echo
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
# Verify curl is installed, not available on either Debian or Ubuntu by default, I forget which... 
package_name=curl
package_version_length=14-19
version_apt_or_dnf_function
minimum_version=7.52.1

package_available_dpkg_or_dnf_function

package_description_1_initial_check_none="This package is used to update the IP address with your"
package_description_2_initial_check_none="new hostname. Users will experience problems connecting to"
package_description_3_initial_check_none="your server if you do not have a static IP address."
package_description_4_initial_check_none="Also used to verify if drawpile compiled successfully."
package_description_5_initial_check_none="Attempting to install $package_name package now..."

package_description_1_not_initially_min="This package is used to update the IP address with your"
package_description_2_not_initially_min="new hostname. Users will experience problems connecting to"
package_description_3_not_initially_min="your server if you do not have a static IP address."
package_description_4_not_initially_min="Also used to verify if drawpile compiled successfully."
package_description_5_not_initially_min="Attempting to install $package_name package now..."

package_description_1_none="This package is used to update the IP address with your"
package_description_2_none="new hostname. Users will experience problems connecting to"
package_description_3_none="your server if you do not have a static IP address."
package_description_4_none="Also used to verify if drawpile compiled successfully."
package_description_5_none=

package_action_1_none="Continuing script in 30 seconds."
package_action_2_none="sleep 30"
package_action_3_none=

package_description_1_not_min="This package is used to update the IP address with your"
package_description_2_not_min="new hostname. Users will experience problems connecting to"
package_description_3_not_min="your server if you do not have a static IP address."
package_description_4_not_min="Also used to verify if drawpile compiled successfully."
package_description_5_not_min=

package_action_1_not_min="Continuing script in 30 seconds."
package_action_2_not_min="sleep 30"
package_action_3_not_min=

install_package_set="yes"
package_version_check_and_update_function
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
# Verify Git is installed, not available on Ubuntu... 
package_name=git
package_version_length=14-40
version_apt_or_dnf_function
minimum_version=1:2.11.0-3

package_available_dpkg_or_dnf_function

package_description_1_initial_check_none="Package git is used to clone Drawpile's source repository."
package_description_2_initial_check_none="You will not be able to proceed without git installed."
package_description_3_initial_check_none="Attempting to install $package_name now..."
package_description_4_initial_check_none=
package_description_5_initial_check_none=

package_description_1_not_initially_min="Package git is used to clone Drawpile's source repository."
package_description_2_not_initially_min="You may have problems using this script successfully."
package_description_3_not_initially_min="Attempting to update $package_name now..."
package_description_4_not_initially_min=
package_description_5_not_initially_min=

package_description_1_none="Package git is used to clone Drawpile's source repository."
package_description_2_none="You will not be able to proceed without git installed."
package_description_3_none="Please note this package name for reference."
package_description_4_none=
package_description_5_none=

package_action_1_none="Exiting script in 30 seconds."
package_action_2_none="sleep 30"
package_action_3_none="exit"

package_description_1_not_min="Package git is used to clone Drawpile's source repository."
package_description_2_not_min="You may experience problems with this script."
package_description_3_not_min=
package_description_4_not_min=
package_description_5_not_min=

package_action_1_not_min="Continuing script in 30 seconds."
package_action_2_not_min="sleep 30"
package_action_3_not_min=

install_package_set="yes"
package_version_check_and_update_function
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}***** Update Rust Installation . . . *****${normal}"
echo

function rust_install_or_update_function () {
	# https://www.rust-lang.org/tools/install
	if [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ] && [ "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ]; then
		# Needed for Raspbian for Desktop
		# rustup installs incorrect version when 64 bit kernel enabled in 32bit OS
		#     https://github.com/rust-lang/rustup/issues/3307
		curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
		echo
		. ~/.cargo/env
		rustup install --force-non-host stable-i686-unknown-linux-gnu
		echo
		rustup default stable-i686-unknown-linux-gnu
	else
		curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
		echo
		. ~/.cargo/env
	fi
	echo
	rustc --version
}

# Necessary in Fedora to prevent unexpected install messsage when doing version testing.
# unset command_not_found_handle

if ! rustc --version 2> /dev/null; then
    echo "Rust is not installed."
	echo
	rust_install_or_update_function
else
	current_version=$( rustc --version 2> /dev/null | awk '{ print $2 }' )
	required_version="1.66.1"
	if [ ! -z "$current_version" ]; then
		echo "Rust Version: $current_version"
		if [ "$(printf '%s\n' "$required_version" "$current_version" | sort -V | head -n1)" = "$required_version" ]; then 
			echo "Rust is up to date or past minimum version ($required_version) required. Skipping update."
		else
			echo "Version installed ($current_version) is less than requirement: $required_version"
			echo "Updating rust."
			echo
			rust_install_or_update_function
		fi
	else
		echo "This message for Rust Version check should not be visible."
	fi
fi

<<comment_EOF
Do not need sudo for cmake build options (server, headless, client, etc) nor 'cmake --build', as it won't read the rustup version that was just installed. Sudo changes the environment or something. 
To avoid that issue, chown is done to the build directory and the command '. ~/.cargo/env' is re-issued right before running it. The end user should have rust version 1.66.1 or newer. 
     https://github.com/drawpile/Drawpile/commit/bd11c10a748e8ea93ecb0f01d3cadf531dd95508


The changes below in the script were made due to it failing to compile otherwise. 
Changed --> make -j "$thread_count"
To Cmd  --> cmake --build . -j "$thread_count"

Changed --> sudo make install
To Cmd  --> sudo cmake --install .
comment_EOF
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}*****Verifying Installed Version of Packages . . .*****${normal}"
echo
echo "Minimum versions are versions that I know work. Lower versions may work for you."
echo

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# ---------------------------- **Actual Dependencies** ---------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

package_description_1_none="You will not be able to compile from source. Please note this package"
package_description_2_none="name for reference, and Google for information online to compile"
package_description_3_none="from source."
package_description_4_none=
package_description_5_none=

package_action_1_none="Exiting script in 30 seconds."
package_action_2_none="sleep 30"
package_action_3_none="exit"

package_description_1_not_min="You may experience problems. Please note this package name"
package_description_2_not_min="for reference."
package_description_3_not_min=
package_description_4_not_min=
package_description_5_not_min=

package_action_1_not_min="Continuing script in 30 seconds."
package_action_2_not_min="sleep 30"
package_action_3_not_min=

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
package_name=cmake
package_version_length=14-20
version_apt_or_dnf_function
# Removes non period and non-dash characters, but doesn't appear to be necessary with single bracket comparison test.
# clean_version="$(echo "$version" | perl -pe 's/[^0-9.-]//g')"
minimum_version=3.18
# minimum_version=3.7.2-1 (old version)
package_available_dpkg_or_dnf_function
package_description_1="cmake is a cross platform open source make system"
package_description_2=
package_description_3=
package_description_4=
package_description_5=
install_package_set="no"
package_version_check_and_update_function
# --------------------------------------------------------------------------------
package_name=extra-cmake-modules
package_version_length=14-21
version_apt_or_dnf_function
minimum_version=5.28.0-1
package_available_dpkg_or_dnf_function
package_description_1="extra-cmake-modules - Extra modules and scripts for CMake"
package_description_2=
package_description_3=
package_description_4=
package_description_5=
install_package_set="no"
package_version_check_and_update_function
# --------------------------------------------------------------------------------

if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=g++
fi
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	package_name=gcc-c++
fi
package_version_length=14-30
version_apt_or_dnf_function
minimum_version=4:6.3.0-4
package_available_dpkg_or_dnf_function
package_description_1="Package: g++ - compiler"
package_description_2=
package_description_3=
package_description_4=
package_description_5=
install_package_set="no"
package_version_check_and_update_function
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=libgif-dev
	package_version_length=14-24
	version_apt_or_dnf_function
	minimum_version=5.1.4-0.4
	package_available_dpkg_or_dnf_function
	package_description_1="libgif-dev - library for GIF images (development)."
	package_description_2="     (enables animated GIF export)"
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
package_name=git
package_version_length=14-24
version_apt_or_dnf_function
minimum_version=1:2.30.2-1
package_available_dpkg_or_dnf_function
package_description_1="git - Git is a fast, scalable, distributed revision control system with an"
package_description_2="     unusually rich command set that provides both high-level operations"
package_description_3="     and full access to internals."
package_description_4=
package_description_5=
install_package_set="no"
package_version_check_and_update_function
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=libkf5archive-dev
fi
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	package_name=kf5-karchive-devel
fi
package_version_length=14-21
version_apt_or_dnf_function
minimum_version=5.28.0-2
package_available_dpkg_or_dnf_function
package_description_1="libkf5archive-dev - development files for karchive"
package_description_2=
package_description_3=
package_description_4=
package_description_5=
install_package_set="no"
package_version_check_and_update_function
# --------------------------------------------------------------------------------
package_name=make
package_version_length=14-24
version_apt_or_dnf_function
minimum_version=4.3-4.1
package_available_dpkg_or_dnf_function
package_description_1="make - A GNU tool for controlling the generation of executables and other non-source files of a program from the program's source files."
package_description_2="     Make allows users to build and install packages without any significant knowledge about the details of the build process. The details"
package_description_3="     about how the program should be built are provided for make in the program's makefile."
package_description_4=
package_description_5=
install_package_set="no"
package_version_check_and_update_function
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=libkf5dnssd-dev
	package_version_length=14-21
	version_apt_or_dnf_function
	minimum_version=5.28.0-1
	package_available_dpkg_or_dnf_function
	package_description_1="libkf5dnssd-dev - development files for kdnssd"
	package_description_2="     (enables local server discovery)"
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=libminiupnpc-dev
	package_version_length=14-27
	version_apt_or_dnf_function
	minimum_version=1.9.20140610-4
	package_available_dpkg_or_dnf_function
	package_description_1="libminiupnpc-dev - UPnP IGD client lightweight library development files"
	package_description_2="     (enables automatic port forwarding)"
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=libqt5network5
	package_version_length=14-18
	version_apt_or_dnf_function
	minimum_version=5.7.1
	package_available_dpkg_or_dnf_function
	package_description_1="libqt5network5  - Qt 5 network module"
	package_description_2=
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=libqt5svg5-dev
	package_version_length=14-18
	version_apt_or_dnf_function
	minimum_version=5.7.1
	package_available_dpkg_or_dnf_function
	package_description_1="libqt5svg5-dev - Qt 5 SVG module development files"
	package_description_2=
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=miniupnpc
	package_version_length=14-27
	version_apt_or_dnf_function
	minimum_version=1.9.20140610-4
	package_available_dpkg_or_dnf_function
	package_description_1="miniupnpc - UPnP IGD client lightweight library client"
	package_description_2="     (enables automatic port forwarding)"
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=qtbase5-dev
	package_description_1="qtbase5-dev - Qt 5 base development files"
fi
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	package_name=qt5-qtbase-devel
	package_description_1="qt5-qtbase-devel - Qt 5 base development files"
fi
package_version_length=14-18
version_apt_or_dnf_function
minimum_version=5.7.1
package_available_dpkg_or_dnf_function

package_description_2=
package_description_3=
package_description_4=
package_description_5=
install_package_set="no"
package_version_check_and_update_function
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=qtmultimedia5-dev
	package_version_length=14-18
	version_apt_or_dnf_function
	minimum_version=5.7.1
	package_available_dpkg_or_dnf_function
	package_description_1="qtmultimedia5-dev - APIs for multimedia functionality - dev files"
	package_description_2=
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=qttools5-dev
	package_version_length=14-20
	version_apt_or_dnf_function
	minimum_version=5.7.1-1
	package_available_dpkg_or_dnf_function
	package_description_1="qttools5-dev - Qt 5 tools development files"
	package_description_2=
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Forty)\"" ]]; then
	# Don't check on...
	# [[ "$what_linux_flavor" != "PRETTY_NAME=\"Fedora Linux 41 (Server Edition)\"" && "$what_linux_flavor" != "PRETTY_NAME=\"Fedora Linux 41 (Forty One)\"" ]] && [[ "$what_linux_flavor" != "PRETTY_NAME=\"Fedora Linux 40 (Workstation Edition)\"" && "$what_linux_flavor" != "PRETTY_NAME=\"Fedora Linux 41 (Workstation Edition)\"" ]]
	package_name=zlib-devel
	package_version_length=14-20
	version_apt_or_dnf_function
	minimum_version=1.2.13
	package_available_dpkg_or_dnf_function
	package_description_1="zlib-devel - is a general-purpose, patent-free, lossless data compression"
	package_description_2="     library which is used by many different programs."
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi

if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && ( [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Forty)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Workstation Edition)\"" ]] || [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 41 (Server Edition)\"" ]] || [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 41 (Forty One)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 41 (Workstation Edition)\"" ]] ); then
	# echo "${bold}${yellow}Placeholder for Fedora 40 and Zlib${normal}."
	
	package_name=zlib-ng-devel
	package_version_length=14-20
	version_apt_or_dnf_function
	minimum_version=2.1.7
	package_available_dpkg_or_dnf_function
	package_description_1="zlib-ng-devel - contains libraries and header files for"
	package_description_2="     developing application that use zlib-ng."
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
	
	
	package_name=zlib-ng-compat-devel
	package_version_length=14-20
	version_apt_or_dnf_function
	minimum_version=2.1.7
	package_available_dpkg_or_dnf_function
	package_description_1="zlib-ng-compat-devel - contains libraries and header files for"
	package_description_2="     developing application that use zlib."
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------- **Optional Dependencies** --------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

package_description_1_none="This is an optional package. You may experience specific"
package_description_2_none="problems with Drawpile configuration and use. Please note"
package_description_3_none="this package name for reference, as you may wish to"
package_description_4_none="compile this package from source after looking up"
package_description_5_none="information via Google."

package_action_1_none="Continuing script in 30 seconds."
package_action_2_none="sleep 30"
package_action_3_none=

package_description_1_not_min="This is an optional package. You may experience specific"
package_description_2_not_min="problems with Drawpile configuration and use. Please note"
package_description_3_not_min="this package name for reference, as you may wish to"
package_description_4_not_min="compile this package from source after looking up"
package_description_5_not_min="information via Google."

package_action_1_not_min="Continuing script in 30 seconds."
package_action_2_not_min="sleep 30"
package_action_3_not_min=

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 31 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 31 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 32 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 32 (Server Edition)\"" ]]; then
	package_name=libmicrohttpd
elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	package_name=libmicrohttpd-devel
else
	package_name=libmicrohttpd-dev
fi
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=libmicrohttpd-dev
fi
package_version_length=14-21
version_apt_or_dnf_function
minimum_version=0.9.51-1
package_available_dpkg_or_dnf_function
package_description_1="libmicrohttpd-dev - library embedding HTTP server"
package_description_2="     functionality (development, used for remote"
package_description_3="     administration of drawpile server)"
package_description_4=
package_description_5=
install_package_set="no"
package_version_check_and_update_function
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 31 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 31 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 32 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 32 (Server Edition)\"" ]]; then
	package_name=libsodium
elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	package_name=libsodium-devel
else
	package_name=libmicrohttpd-dev
fi
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=libsodium-dev
fi
package_version_length=14-21
version_apt_or_dnf_function
minimum_version=1.0.11-2
package_available_dpkg_or_dnf_function
package_description_1="libsodium-dev - Network communication, cryptography and"
package_description_2="     signaturing library - headers (server only, enables"
package_description_3="     external nickname authentication support)"
package_description_4=
package_description_5=
install_package_set="no"
package_version_check_and_update_function
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=libsystemd-dev
	package_version_length=14-19
	version_apt_or_dnf_function
	minimum_version=232-25
	package_available_dpkg_or_dnf_function
	package_description_1="libsystemd-dev - systemd utility library - development files"
	package_description_2="     (enable socket drawpile server startup I believe)"
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=mini-httpd
	package_version_length=14-21
	version_apt_or_dnf_function
	minimum_version=1.23-1.2
	package_available_dpkg_or_dnf_function
	package_description_1="mini-httpd - Small HTTP server (Used for creating password"
	package_description_2="     for use with NGINX)"
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=openssl
	package_version_length=14-18
	version_apt_or_dnf_function
	minimum_version=1.1.0
	package_available_dpkg_or_dnf_function
	package_description_1="openssl - Secure Sockets Layer toolkit - cryptographic"
	package_description_2="     utility (used to create SSL key for encrypted"
	package_description_3="     drawing sessions)"
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=qt5keychain-dev
	package_version_length=14-21
	version_apt_or_dnf_function
	minimum_version=0.10.0-1
	package_available_dpkg_or_dnf_function
	package_description_1="qt5keychain-dev - Used for storing passwords in Drawpile"
	package_description_2="     client, if you choose to install it."
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=libvpx-dev
	package_version_length=14-20
	version_apt_or_dnf_function
	minimum_version=1.9.0-1
	package_available_dpkg_or_dnf_function
	package_description_1="libvpx-dev - I believe it is used for exporting animations."
	package_description_2=
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=sqlite3
fi
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	package_name=sqlite
fi
package_version_length=14-21
version_apt_or_dnf_function
minimum_version=3.34.1-3
package_available_dpkg_or_dnf_function
package_description_1="sqlite3 - used for importing values into server db"
package_description_2="     automatically so user doesn't have to configure"
package_description_3="     it manually."
package_description_4=
package_description_5=
install_package_set="no"
package_version_check_and_update_function
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
echo
echo "${bold}${cyan}If no errors appeared, all packages are set up as expected.${normal}"
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}***** Cloning Drawpile Repository . . . *****${normal}"
echo
cd "$dp_install_loc"

if [[ ! -d  "$dp_install_loc/Programs/Drawpile" ]]; then
	sudo chmod 777 "$dp_install_loc" -R
fi

cd "$dp_install_loc/Programs"
if [[ -d  "$dp_install_loc/Programs/Drawpile" ]]; then
	# ---------------------------------------------------------------------------------
	# Testing new concept - commented out temporarily
	# echo Download detected of Drawpile files, removing content before downloading.
	# rm -f -R "$dp_install_loc/Programs/Drawpile"
	# echo
	# ---------------------------------------------------------------------------------
	cd Drawpile
	
	git config --global --add safe.directory "$dp_install_loc/Programs/Drawpile"
	# Updates local repo
	git fetch
	
	# Checks local commit info
	git_local_commit=$( git rev-parse HEAD )
	# Checks remote commit info
	git_remote_commit=$( git rev-parse '@{u}' )
	
	if [[ "$git_local_commit" == "$git_remote_commit" ]] ; then
		git reset --hard origin/main
		git_repo_status=currently_up_to_date
		# git checkout -f feature/qtwasm
		# git pull
	else
		# Resets any changes made to the local code so it matches the remote code. 
		# git reset --hard origin/master
		git reset --hard origin/main
		git_repo_status=out_of_date
		# git checkout -f feature/qtwasm
		# git pull
	fi
else
	git_repo_status=out_of_date
	# Use the git hub link to access more information about drawpile on a web browser.
	git clone https://github.com/drawpile/Drawpile.git
	cd Drawpile
	# git checkout -f feature/qtwasm
	# git pull
fi
echo
echo '--------------------------------------------------------------------------------'
echo
drawpile_version_manual_type_for_script=2.1.20
drawpile_program_version_with_git=$( git describe )

# Find Latest Version (May provide beta or stable release info)
# drawpile_program_version_on_website=$( curl -s -N https://raw.githubusercontent.com/drawpile/Drawpile/main/src/desktop/net.drawpile.drawpile.appdata.xml | grep -m 1 'release version' )
drawpile_program_version_on_website=$( curl -s -N https://raw.githubusercontent.com/drawpile/Drawpile/main/src/desktop/net.drawpile.drawpile.appdata.xml | grep -m 1 'release version' | awk '{ print $2 }' | grep -o -P '(?<=version=").*(?=")' )

# Find Latest Stable Release - <release version="2.1.20" date="2021-09-12">
drawpile_program_version_release_on_website=$( curl -s -N https://raw.githubusercontent.com/drawpile/Drawpile/main/src/desktop/net.drawpile.drawpile.appdata.xml | grep -v 'type="development"' | grep -m 1 'release version' | awk '{ print $2 }' | grep -o -P '(?<=version=").*(?=")' )

# Find Latest Beta Version - <release version="2.2.0-beta.5" type="development" date="2023-06-21">
drawpile_program_version_beta_on_website=$( curl -s -N https://raw.githubusercontent.com/drawpile/Drawpile/main/src/desktop/net.drawpile.drawpile.appdata.xml | grep 'type="development"' | grep -m 1 'release version' | awk '{ print $2 }' | grep -o -P '(?<=version=").*(?=")' )

echo "${bold}${cyan}***** Select Drawpile Branch . . . *****${normal}"
echo
echo "Would you like to get the latest drawpile, or the stable branch from"
echo "website, or the 2.1.20 series?" 
echo
echo "     Note: Sometimes these options may be duplicates."
echo
echo "     ${bold}${cyan}1${normal} - Latest Drawpile, which may not be stable or compile ..."
echo "              Should be relatively stable and fixes some server"
echo "              issues in the latest stable release. ${underline}Recommended${normal}"
echo "              ${underline}if you don't mind testing. You can always re-run${normal}"
echo "              ${underline}the script to change to a different server version.${normal}"
echo "              Script check: $drawpile_program_version_with_git" # $drawpile_prograDm_version_on_website (or newer)
echo ""
echo "     ${bold}${cyan}2${normal} - Drawpile latest stable release code for server and client. ${underline}${bold}(Recommended).${normal}"
echo "              Script check: $drawpile_program_version_release_on_website"
echo ""
echo "     ${bold}${cyan}3${normal} - Drawpile 2.1.20 code for server and client"
echo "              Manually typed in: $drawpile_version_manual_type_for_script"
echo
while :; do
	read -r -p "${bold}${cyan}Enter a number and hit enter to continue:${normal} " git_clone_dp_checkout
	[[ $git_clone_dp_checkout =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
	if (( $git_clone_dp_checkout >= 1 && $git_clone_dp_checkout <= 3)); then
		break
	else
		echo
		echo "Invalid number selection, try again."
		echo
	fi
done
echo
echo '--------------------------------------------------------------------------------'

if [ "$git_clone_dp_checkout" == "1" ]; then
	# Do nothing as no error was detected.
	# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
	:
elif [ "$git_clone_dp_checkout" == "2" ]; then
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	git checkout -f $drawpile_program_version_release_on_website
	git pull
elif [ "$git_clone_dp_checkout" == "3" ]; then
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	git checkout -f $drawpile_version_manual_type_for_script
	git pull
else
	echo "This message for git_clone_dp_checkout should not be visible."
fi
#---------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------
<<comment_EOF_delete
comment_EOF_delete
if [[ "$git_clone_dp_checkout" = "1" ]]; then drawpile_version_script_check=$drawpile_program_version_with_git; fi
if [[ "$git_clone_dp_checkout" = "2" ]]; then drawpile_version_script_check=$drawpile_program_version_release_on_website; fi
if [[ "$git_clone_dp_checkout" = "3" ]]; then drawpile_version_script_check=$drawpile_version_manual_type_for_script; fi

function drawpile_srv_reboot_warn_function () {
	# Server auto-announcement message for brief restart
	ssl_encryption_config=$( grep -m 1 "ssl_encryption_config = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )

	if [[ -e "/etc/nginx/passwords" && "$ssl_encryption_config" != "3" ]]; then
		nginx_username_encoded_1=$( grep -m 1 "nginx_username_encoded_1 = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
		nginx_htpasswd_encoded_1=$( grep -m 1 "nginx_htpasswd_encoded_1 = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
		
		if [ -z "$nginx_username_encoded_1" ] || [ -z "$nginx_htpasswd_encoded_1" ]; then
			# echo "${bold}${red}Wasn't able to read username and/or password from:${normal} $drawpile_configuration_values_file"
			:
			# Do nothing as no error was detected.
			# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
		else
			#Value not null, proceeding.
			nginx_username_1="$(echo "$nginx_username_encoded_1" | python -c 'import sys; from urllib.parse import unquote; print(unquote(sys.stdin.readline().strip()))')"
			nginx_htpasswd_1="$(echo "$nginx_htpasswd_encoded_1" | python -c 'import sys; from urllib.parse import unquote; print(unquote(sys.stdin.readline().strip()))')"
			
			hostname=$( grep -m 1 "hostname = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
			systemd_selection=$( grep -m 1 "systemd_selection = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
			
			if [[ "$systemd_selection" == "1" || "$systemd_selection" == "2" || "$systemd_selection" == "4" || "$systemd_selection" == "5" || "$systemd_selection" == "9" || "$systemd_selection" == "14" || "$systemd_selection" == "15" || "$systemd_selection" == "17" ]]; then
				# Support Session backed Files 1, 2, 4, 5, 9, 14, 15, 17
				echo
				echo "${bold}${red}Sending warning message to all sessions:${normal}"
				echo "Server Announcement: Server will be rebooted now! Boards set to persist without users will be restored when the server is back online. Other boards that are not persistent should save their work to be safe. Should only be down for a minute at most."
				echo 
				curl -k -u "$nginx_username_1:$nginx_htpasswd_1" -X PUT -H 'Content-Type: application/json' -d '{"alert":"Server Announcement: Server will be rebooted now! Boards set to persist without users will be restored when the server is back online. Should only be down for a minute at most."}' "https://$hostname/admin/api/sessions"
				echo
				sleep 5
			else
				# elif [[ "$systemd_selection" == "3" || "$systemd_selection" == "6" || "$systemd_selection" == "7" || "$systemd_selection" == "8" || "$systemd_selection" == "10" || "$systemd_selection" == "11" || "$systemd_selection" == "12" || "$systemd_selection" == "13" || "$systemd_selection" == "16" || "$systemd_selection" == "18" || "$systemd_selection" == "19" "$systemd_selection" == "20" ]]; then
				# Does not Support Session backed Files 3, 6, 7, 8, 10, 11, 12, 13, 16, 18, 19, 20
				#
				# echo "Wasn't able to determine if file-backed sessions are in use."
				echo
				echo "${bold}${red}Sending warning message to all sessions:${normal}"
				echo "Server Announcement: Server will be rebooted now! Please save your drawings, the boards will be gone when the server is back online. Should only be down for a minute at most."
				echo 
				curl -k -u "$nginx_username_1:$nginx_htpasswd_1" -X PUT -H 'Content-Type: application/json' -d '{"alert":"Server Announcement: Server will be rebooted now! Please save your drawings, the boards will be gone when the server is back online. Should only be down for a minute at most."}' "https://$hostname/admin/api/sessions"
				sleep 5
			fi
		fi
	fi
	# Server auto-announcement message for brief restart
}

function drawpile_srv_socket_status_function () {
	# Display limited info on the status of running Drawpile services.
	# The number ordering chosen is based on the order in which they appear in RPi-Monitor. Not the order in which they are used in the script.
	service_name_to_check_01=drawpile-srv.socket
	if [ -e "/etc/systemd/system/drawpile-srv.socket" ]; then
		drawpile_srv_socket_loaded=$( systemctl status $service_name_to_check_01 | grep "Loaded: " | sed -nEr "s/.*$service_name_to_check_01; (.*); vendor.*/\1/p" )
		# ------------------------------------------------------------------------------------------------------------------------------------------------------------
		# Check to ensure output is not blank and find it in an alternate way
		# echo Value: $drawpile_srv_socket_loaded
		# echo
		if [ -z "$drawpile_srv_socket_loaded" ]; then
			# echo Oops. Blank!
			drawpile_srv_socket_loaded=$( systemctl status $service_name_to_check_01 | grep "Loaded: " | sed -nEr "s/.*$service_name_to_check_01; (.*); preset:.*/\1/p" )
			# echo
		fi
		# echo Value: $drawpile_srv_socket_loaded
		# echo
		if [ -z "$drawpile_srv_socket_loaded" ]; then
			# echo Oops. Blank!
			drawpile_srv_socket_loaded=error
			# echo
		fi
		# ------------------------------------------------------------------------------------------------------------------------------------------------------------
		drawpile_srv_socket_status=$( systemctl status $service_name_to_check_01 | grep "Active: " | sed -nEr 's/.*(\(.*\)).*/\1/p' )
		echo "Service name : $service_name_to_check_01"
		echo "Start on boot: $drawpile_srv_socket_loaded"
		echo "Loaded Status: $drawpile_srv_socket_status"
	else
		drawpile_srv_socket_loaded="not_loaded"
		drawpile_srv_socket_status="not_loaded"
		echo "The $service_name_to_check_01 is not yet loaded. No action required."
	fi
}

function drawpile_srv_service_status_function () {
	service_name_to_check_02=drawpile-srv.service
	if [ -e "/etc/systemd/system/drawpile-srv.service" ]; then
		drawpile_srv_service_loaded=$( systemctl status $service_name_to_check_02 | grep "Loaded: " | sed -nEr "s/.*$service_name_to_check_02; (.*); vendor.*/\1/p" )
		# ------------------------------------------------------------------------------------------------------------------------------------------------------------
		# Check to ensure output is not blank and find it in an alternate way
		# echo Value: $drawpile_srv_service_loaded
		# echo
		if [ -z "$drawpile_srv_service_loaded" ]; then
			# echo Oops. Blank!
			drawpile_srv_service_loaded=$( systemctl status $service_name_to_check_02 | grep "Loaded: " | sed -nEr "s/.*$service_name_to_check_02; (.*); preset:.*/\1/p" )
			# echo
		fi
		# echo Value: $drawpile_srv_service_loaded
		# echo
		if [ -z "$drawpile_srv_service_loaded" ]; then
			# echo Oops. Blank!
			drawpile_srv_service_loaded=error
			# echo
		fi
		# ------------------------------------------------------------------------------------------------------------------------------------------------------------
		drawpile_srv_service_status=$( systemctl status $service_name_to_check_02 | grep "Active: " | sed -nEr 's/.*(\(.*\)).*/\1/p' )
		if [ -z "$drawpile_srv_service_status" ]; then
			drawpile_srv_service_status=error
		fi
		echo "Service name : $service_name_to_check_02"
		echo "Start on boot: $drawpile_srv_service_loaded"
		echo "Loaded Status: $drawpile_srv_service_status"
	else
		drawpile_srv_service_loaded="not_loaded"
		drawpile_srv_service_status="not_loaded"
		echo "The $service_name_to_check_02 is not yet loaded. No action required."
	fi
}

function stop_drawpile_srv_if_running_function () {
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}***** If Drawpile-Srv Running, Stopping Process . . . *****${normal}"
	echo
	# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
	# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
	# Check for drawpile-monitor.service
	# This one looks for legacy name. Checks if it exists, then if it is enabled. Stops it, renames it, restarts it so the script can continue as it normally would do so.
	if [ -e "/etc/systemd/system/drawpile_monitor.service" ]; then
		echo "Detected old service name, drawpile_monitor.service."
		echo "Reconfiguring service to utilize - instead of _."
		if [ "`systemctl is-enabled drawpile_monitor.service`" = "enabled" ]; then
			drawpile_monitor_test_rename_status=enabled
			sudo systemctl disable drawpile_monitor.service
		else
			drawpile_monitor_test_rename_status=disabled
		fi
		sudo systemctl stop --now drawpile_monitor.service
		
		sudo mv /etc/systemd/system/drawpile_monitor.service /etc/systemd/system/drawpile-monitor.service
		
		if [[ "$drawpile_monitor_test_rename_status" == "enabled" ]]; then
			sudo systemctl enable drawpile-monitor.service
			sudo systemctl start --now drawpile-monitor.service
			sleep 3
		fi
		# Fixes up RPi-Monitor if configured
		if [ -e "/etc/rpimonitor/template/services.conf" ]; then
			sudo sed -i -e 's/drawpile_monitor.service/drawpile-monitor.service/g' /etc/rpimonitor/template/services.conf
			wait $!
			sudo systemctl daemon-reload
			sudo service rpimonitor restart
		fi
	fi
	# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
	if [ -e "/etc/systemd/system/drawpile-monitor.service" ]; then
		if [ "`systemctl is-enabled drawpile-monitor.service`" = "enabled" ]; then
			echo "drawpile-monitor.service enabled, stopping service"
			echo "to avoid unnecessary warnings in Discord."
			sudo systemctl stop --now drawpile-monitor.service
		else
			echo Drawpile monitor is not enabled, no need to stop process.
		fi
		echo
	else
		echo Drawpile monitor is not available.
		echo
	fi	
	# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
	# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
	drawpile_srv_socket_status_function
	echo
	drawpile_srv_service_status_function
	# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
	# Stop the server if necessary. 
	if [[ ( -e "/etc/systemd/system/drawpile-srv.service" && -e "/etc/systemd/system/drawpile-srv.socket" ) || ( -e "/etc/systemd/system/drawpile-srv.service" && ! -e "/etc/systemd/system/drawpile-srv.socket" ) ]]; then
		if [[ "$drawpile_srv_socket_loaded" == "enabled" && ( "$drawpile_srv_socket_status" == "(running)" || "$drawpile_srv_socket_status" == "(listening)" ) && "$drawpile_srv_service_loaded" == "disabled" ]]; then
			drawpile_srv_reboot_warn_function
			sudo systemctl stop --now $service_name_to_check_01
			if [[ "$drawpile_srv_service_status" == "(running)" ]]; then
				drawpile_srv_reboot_warn_function
				sudo systemctl stop --now $service_name_to_check_02
			fi
		elif [[ "$drawpile_srv_socket_loaded" == "disabled" && "$drawpile_srv_service_loaded" == "enabled" && "$drawpile_srv_service_status" == "(running)" ]]; then
			drawpile_srv_reboot_warn_function
			sudo systemctl stop --now $service_name_to_check_02
		elif [[ "$drawpile_srv_socket_loaded" == "enabled" && "$drawpile_srv_service_loaded" == "enabled" && "$drawpile_srv_service_status" == "(running)" ]]; then
			drawpile_srv_reboot_warn_function
			sudo systemctl stop --now $service_name_to_check_02
		elif [[ "$drawpile_srv_socket_loaded" == "disabled" && "$drawpile_srv_service_loaded" == "disabled" ]]; then
			echo "Drawpile server startup is not yet configured. No action required."
		elif [[ "$drawpile_srv_socket_loaded" == "error" || "$drawpile_srv_socket_status" == "error" || "$drawpile_srv_service_loaded" == "error" || "$drawpile_srv_service_status" == "error" ]]; then
			echo "${bold}${cyan}Was not able to pull status values correctly.${normal}"
			echo "${bold}${cyan}This section will not function as intended.${normal}"
		else
			echo "This message should not be visible for stopping drawpile-srv prior to compiling code update."
		fi
	fi
}

function start_drawpile_srv_if_updated_function () {
	# echo '--------------------------------------------------------------------------------'
	# echo '--------------------------------------------------------------------------------'
	# echo
	echo "${bold}${cyan}***** If Drawpile-Srv was Running Previously, Starting Process . . . *****${normal}"
	echo
	service_name_to_check_01=drawpile-srv.socket
	service_name_to_check_02=drawpile-srv.service
	if [[ ( -e "/etc/systemd/system/drawpile-srv.service" && -e "/etc/systemd/system/drawpile-srv.socket" ) || ( -e "/etc/systemd/system/drawpile-srv.service" && ! -e "/etc/systemd/system/drawpile-srv.socket" ) ]]; then
		if [[ "$drawpile_srv_socket_loaded" == "enabled" && ( "$drawpile_srv_socket_status" == "(running)" || "$drawpile_srv_socket_status" == "(listening)" ) && "$drawpile_srv_service_loaded" == "disabled" ]]; then
			echo "sudo systemctl start --now $service_name_to_check_01"
			sudo systemctl start --now $service_name_to_check_01
			echo '--------------------------------------------------------------------------------'
			sudo systemctl status $service_name_to_check_01 --no-pager -l
			echo '--------------------------------------------------------------------------------'
			sudo systemctl status $service_name_to_check_02 --no-pager -l
		elif [[ "$drawpile_srv_socket_loaded" == "disabled" && "$drawpile_srv_service_loaded" == "enabled" && ( "$drawpile_srv_service_status" == "(running)" || "$drawpile_srv_service_status" != "(running)" ) ]]; then
			echo "sudo systemctl start --now $service_name_to_check_02"
			sudo systemctl start --now $service_name_to_check_02
			echo '--------------------------------------------------------------------------------'
			sudo systemctl status $service_name_to_check_02 --no-pager -l
		elif [[ "$drawpile_srv_socket_loaded" == "disabled" && "$drawpile_srv_service_loaded" == "disabled" ]]; then
			echo "Drawpile server startup is not yet configured. No action required."
		else
			echo "This message should not be visible for starting drawpile-srv after to compiling code update."
		fi
	fi
	echo
	# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
	# Check for drawpile-monitor.service
	if [ -e "/etc/systemd/system/drawpile-monitor.service" ]; then
		if [ "`systemctl is-enabled drawpile-monitor.service`" = "enabled" ]; then
			echo "drawpile-monitor.service enabled, starting service."
			sudo systemctl start --now drawpile-monitor.service
		fi
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
}

function wacom_explanation_function () {
	echo
	xsetwacom --list devices
	echo
	xsetwacom --list parameters
	echo
	echo 'Use the following in the terminal more information.'
	echo 'man wacom'
	echo
	echo 'You can set the tablet from absolute positioning to relative via this command.'
	echo 'xsetwacom set stylus mode relative'
	echo
	echo 'You may have to replace stylus with the ID listed for the device, which you'
	echo 'can find by typing the following: xwacom --list devices'
	echo 'Additionally, you may use the full name of the device in single quotes as well'
	echo 'To represent the device. For example, the following could be used . . .'
	echo 'Wacom Intuos3 6x8 Pen stylus'
	echo
	echo 'There does not appear to be any working graphical based configuration program'
	echo 'for the wacom tablet that I have been able to find as of yet.'
	echo
	echo 'Read more on configuring your Wacom Tablet here --> http://tinyurl.com/blhyk7m'
	echo 'write the following command in the terminal to read more on Wacom Configuration:'
	echo 'man wacom'
	echo
}

function drawpile_client_shortcut_function () {
	if (( "$drawpile_build_configuration" >= "3" && "$drawpile_build_configuration" <= "8" )) ; then
		mkdir -p -v "$option_loc_4/drawpile_icons"
		sudo $wget_or_wget2_quiet_progress https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/images/Drawpile%20Icon.png -O "$option_loc_4/drawpile_icons/drawpile-icon.png"
		drawpile_client_shortcut_png="$option_loc_4/drawpile_icons/drawpile-icon.png"
		echo
		
		if [[ -e  "/usr/local/bin/drawpile" ]]; then
			location_created_executable_dp=/usr/local/bin/drawpile
		elif [[ -e  "/usr/bin/drawpile" ]]; then
			location_created_executable_dp=/usr/bin/drawpile
		else
				echo "Was unable to determine location of created executable."
				echo "This will cause issues with the script."
				echo
				sleep 30
				exit
		fi
		
		if [[ ! -e "$option_loc_2/Drawpile Client.desktop" && -d "$option_loc_2" && "$what_linux_name" == "NAME=\"Fedora Linux\"" ]] || [[ ! -e "$option_loc_2/Drawpile Client.desktop" && -d "$option_loc_2" && "$what_linux_name" == "NAME=Fedora" ]] || [[ ! -e "$option_loc_2/Drawpile Client.desktop" && -d "$option_loc_2" && "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" && "$what_architecture" == "Architecture: x86-64" && "$verify_if_this_is_raspbian_or_debian" == "" ]]; then
			echo
			echo "Fedora/Debian doesn't enable Desktop icons by default. If you want that enabled so the"
			echo "script generated shortcuts work, go to the website below, click the link "
			echo "'Click here to install browser extension' and follow the prompts. After that"
			echo "that, click 'Install' to enable the extension."
			echo
			echo "     https://extensions.gnome.org/extension/2087/desktop-icons-ng-ding/"
			echo
			gnome-shell --version
			echo
			pause
		fi
		
		if [[ ! -e "$option_loc_2/Drawpile Client.desktop" ]]; then
			echo Creating shortcut for Drawpile Client on Desktop.
			cat <<EOF | sudo tee "$option_loc_2/Drawpile Client.desktop" >/dev/null
[Desktop Entry]
Name=Drawpile Client
Comment=Drawpile Client
Terminal=false
TryExec=drawpile
Exec=$location_created_executable_dp
Type=Application
Icon=$drawpile_client_shortcut_png
Name[en_GB]=Drawpile Client
EOF
			sudo chown $current_username "$option_loc_2/Drawpile Client.desktop"
			sudo chmod 754 "$option_loc_2/Drawpile Client.desktop"
			if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] || [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" && "$what_architecture" == "Architecture: x86-64" && "$verify_if_this_is_raspbian_or_debian" == "" ]]; then
				# Trust the Desktop shortcut so it's launchable. 
				# https://askubuntu.com/questions/1218954/desktop-files-allow-launching-set-this-via-cli
				# gio set "~/Desktop/Drawpile Client.desktop" metadata::trusted true
				gio set "$option_loc_2/Drawpile Client.desktop" metadata::trusted true
				echo
			fi
		else
			echo Shortcut for Drawpile Client already exists on Desktop.
		fi
	fi
}

function compile_drawpile_client_only_function () {
	echo
	echo "${bold}${cyan}*****Compiling with $thread_count threads.*****${normal}"
	echo
	. ~/.cargo/env
	cmake --build . -j "$thread_count"
	# make -j "$thread_count"
	echo
	echo 'Making installation of compiled program, libraries, and documentation to proper locations.'
	echo
	sudo cmake --install .
	# sudo make install
	echo
	#Location of created executable --> /usr/local/bin/
	if [[ -e "/usr/local/bin/drawpile" || -e  "/usr/bin/drawpile" ]]; then
		if [[ "$drawpile_version" = "$drawpile_version_script_check" ]]; then
			echo "${green}Drawpile $drawpile_version compiled successfully!${normal}"
			echo
			drawpile_client_shortcut_function
			
			drawpile_srv_compile_verification_stored_result=1
			sudo sed -i '\!^drawpile_srv_compile_verification_stored_result =!{h;s!=.*!= '"$drawpile_srv_compile_verification_stored_result"'!};${x;\!^$!{s!!drawpile_srv_compile_verification_stored_result = '"$drawpile_srv_compile_verification_stored_result"'!;H};x}' $drawpile_configuration_values_file

			# The sort command used at the end sorts the list alphabetically.
			sudo sort $app_installation_status_file -o $app_installation_status_file
			# This removes any duplicates that may exist in the file.
			perl -i -ne 'print if ! $a{$_}++' $app_installation_status_file
			# sudo sort $drawpile_configuration_values_file -o $drawpile_configuration_values_file
			sudo sed -i '\!^drawpile_script_completed =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!drawpile_script_completed = '"yes"'!;H};x}' $drawpile_configuration_values_file
			echo
			echo "Exiting script in 30 seconds since no further"
			echo "configuration is required."
			echo
			sleep 30
			exit
		else
			echo "${red}Drawpile $drawpile_version has been detected but is not${normal}"
			echo "${red}the correct version of $drawpile_version_script_check.${normal}"
			echo
			echo "Please copy output from terminal for diagnostic purposes."
			echo
			echo "${red}${bold}Pausing script for 30 seconds.${normal}"
			echo
			sleep 30
		fi		
<<comment_EOF_delete
	#Location of created executable --> /usr/local/bin/
	if [[ -e "/usr/local/bin/drawpile" || -e  "/usr/bin/drawpile" ]]; then
		if [[ "$git_clone_dp_checkout" = "1" ]]; then
			echo "${yellow}Drawpile version check skipped.${normal}"
			echo "Because I'm not sure how to reliably compare and check "
			echo "     this via script."
			echo
			# drawpile_program_version_with_git=$( git describe )
			echo Version: $drawpile_version
			echo
			sleep 10
		elif [[ "$git_clone_dp_checkout" = "2" ]] || [[ "$git_clone_dp_checkout" = "3" ]]; then
			if [[ "$drawpile_version" = "$drawpile_version_script_check" ]]; then
				echo "${green}Drawpile $drawpile_version compiled successfully!${normal}"
				echo
				drawpile_client_shortcut_function
				echo
				echo "Exiting script in 30 seconds since no further"
				echo "configuration is required."
				echo
				# The sort command used at the end sorts the list alphabetically.
				sudo sort $app_installation_status_file -o $app_installation_status_file
				# This removes any duplicates that may exist in the file.
				perl -i -ne 'print if ! $a{$_}++' $app_installation_status_file
				# sudo sort $drawpile_configuration_values_file -o $drawpile_configuration_values_file
				sudo sed -i '\!^drawpile_script_completed =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!drawpile_script_completed = '"yes"'!;H};x}' $drawpile_configuration_values_file
				sleep 30
				exit
			else
				echo "${red}Drawpile $drawpile_version has been detected but is not${normal}"
				echo "${red}the correct version of $drawpile_version_script_check.${normal}"
				echo
				echo "Please copy output from terminal for diagnostic purposes."
				echo
				echo "${red}${bold}Pausing script for 30 seconds.${normal}"
				echo
				sleep 30
			fi
		else
			echo "${red}${bold}This message should not be visible for drawpile compile check.${normal}"
		fi
comment_EOF_delete
	elif [[ ! -e "/usr/local/bin/drawpile" && ! -e  "/usr/bin/drawpile" ]]; then
		echo "${red}Drawpile failed to compile. Stopping script.${normal}"
		echo
		echo "Please copy output from terminal for diagnostic purposes."
		echo
		echo "${red}Exiting script in 30 seconds.${normal}"
		echo 
		sleep 30
		exit
	else
		echo "${red}Unable to tell if Drawpile compiled successfully.${normal}"
		echo "This message should not be visible."
		echo
		echo "${red}Exiting script in 30 seconds.${normal}"
		echo 
		sleep 30
		exit
	fi
}

function drawpile_client_compile_verification_function () {	
	if [[ -e "$dp_install_loc/Programs/Drawpile/build/bin/drawpile-srv" ]]; then
		drawpile_version=$( QT_QPA_PLATFORM=offscreen "$dp_install_loc"/Programs/Drawpile/build/bin/drawpile -v 2>/dev/null | grep -m 1 drawpile | awk '{ print $2 }' )
	else
		drawpile_version=$( QT_QPA_PLATFORM=offscreen drawpile -v 2>/dev/null | grep -m 1 drawpile | awk '{ print $2 }' )
	fi
	#Location of created executable --> /usr/local/bin/
	if [[ -e "/usr/local/bin/drawpile" || -e  "/usr/bin/drawpile" ]]; then
		if [[ "$drawpile_version" = "$drawpile_version_script_check" ]]; then
			echo "${green}Drawpile $drawpile_version compiled successfully!${normal}"
			drawpile_client_compile_verification=1
			echo
		else
			drawpile_client_compile_verification=0
			echo "${red}Drawpile $drawpile_version has been detected but is not${normal}"
			echo "${red}the correct version of $drawpile_version_script_check.${normal}"
			if [ "$skip_build_checks" == "1" ]; then
				:
			else
				# elif [ "$skip_build_checks" == "0" ]; then
				echo
				echo "Please copy output from terminal for diagnostic purposes."
				echo
				echo "${red}${bold}Pausing script for 30 seconds.${normal}"
				echo
				drawpile_srv_compile_verification_stored_result=0
				sudo sed -i '\!^drawpile_srv_compile_verification_stored_result =!{h;s!=.*!= '"$drawpile_srv_compile_verification_stored_result"'!};${x;\!^$!{s!!drawpile_srv_compile_verification_stored_result = '"$drawpile_srv_compile_verification_stored_result"'!;H};x}' $drawpile_configuration_values_file
				sleep 30
			fi
			echo
		fi
	
<<comment_EOF_delete
		if [[ "$git_clone_dp_checkout" = "1" ]]; then
			echo "${yellow}Drawpile version check skipped.${normal}"
			echo "Because I'm not sure how to reliably compare and check "
			echo "     this via script."
			echo
			echo Version: $drawpile_version
			echo
			sleep 10
		elif [[ "$git_clone_dp_checkout" = "2" ]] || [[ "$git_clone_dp_checkout" = "3" ]]; then
			if [[ "$drawpile_version" = "$drawpile_version_script_check" ]]; then
				echo "${green}Drawpile $drawpile_version compiled successfully!${normal}"
				echo
			else
				echo "${red}Drawpile $drawpile_version has been detected but is not${normal}"
				echo "${red}the correct version of $drawpile_version_script_check.${normal}"
				echo
				echo "Please copy output from terminal for diagnostic purposes."
				echo
				echo "${red}${bold}Pausing script for 30 seconds.${normal}"
				echo
				sleep 30
			fi
		else
			echo "${red}${bold}This message should not be visible for drawpile compile check.${normal}"
		fi
comment_EOF_delete
	elif [[ ! -e "/usr/local/bin/drawpile" && ! -e  "/usr/bin/drawpile" ]]; then
		echo "${red}Drawpile failed to compile. Stopping script.${normal}"
		echo
		echo "Please copy output from terminal for diagnostic purposes."
	else
		echo "${red}Unable to tell if Drawpile compiled successfully.${normal}"
		echo "This message should not be visible."
	fi
}

function drawpile_srv_compile_verification_function () {
	if [[ "$USER" = "root" ]] || [[ "$USER" = "Root" ]] || [[ "$USER" = "ROOT" ]] || [[ $EUID == 0 ]]; then
		if [[ -e "$dp_install_loc/Programs/Drawpile/build/bin/drawpile-srv" ]]; then
			drawpile_srv_version=$( su -c "$dp_install_loc/Programs/Drawpile/build/bin/drawpile-srv -v" drawpileuser | grep -m 1 drawpile-srv | awk '{ print $2 }' )
			drawpile_srv_version_stripped=$( su -c "$dp_install_loc/Programs/Drawpile/build/bin/drawpile-srv -v" drawpileuser | perl -0777 -ne '/drawpile-srv\s+([0-9]+\.[0-9]+\.[0-9]+)/; print $1' )
		else
			drawpile_srv_version=$( su -c 'drawpile-srv -v' drawpileuser | grep -m 1 drawpile-srv | awk '{ print $2 }' )
			drawpile_srv_version_stripped=$( su -c 'drawpile-srv --version' drawpileuser | perl -0777 -ne '/drawpile-srv\s+([0-9]+\.[0-9]+\.[0-9]+)/; print $1' )
		fi
	else
		if [[ -e "$dp_install_loc/Programs/Drawpile/build/bin/drawpile-srv" ]]; then
			drawpile_srv_version=$( "$dp_install_loc"/Programs/Drawpile/build/bin/drawpile-srv -v | grep -m 1 drawpile-srv | awk '{ print $2 }' )
			drawpile_srv_version_stripped=$( "$dp_install_loc"/Programs/Drawpile/build/bin/drawpile-srv -v | perl -0777 -ne '/drawpile-srv\s+([0-9]+\.[0-9]+\.[0-9]+)/; print $1' )
		else
			drawpile_srv_version=$( drawpile-srv -v | grep -m 1 drawpile-srv | awk '{ print $2 }' )
			drawpile_srv_version_stripped=$( drawpile-srv --version | perl -0777 -ne '/drawpile-srv\s+([0-9]+\.[0-9]+\.[0-9]+)/; print $1' )
		fi
	fi
	if [ -z "$drawpile_srv_version_stripped" ] && [[ "$dp_compile_check_bypass" != "false" ]] ; then
		echo "${bold}${red}Unable to remove extra information from drawpile-srv. This will cause problems. ${normal}"
		echo "${bold}${red}Exiting script, unable to continue.${normal}"
		echo
		sleep 30
		exit
	fi
	if [ -z "$drawpile_srv_version_stripped" ] && [[ "$dp_compile_check_bypass" == "false" ]] ; then
		echo "${bold}${red}Unable to remove extra information from drawpile-srv. This may cause problems. ${normal}"
		echo "${bold}${red}Ignoring error since compile check bypass is enabled.${normal}"
	fi
	
	if [[ ( -e "/usr/local/bin/drawpile-srv" || -e "/usr/bin/drawpile-srv" ) || -e "$dp_install_loc/Programs/Drawpile/build/bin/drawpile-srv" ]]; then
		if [[ "$drawpile_srv_version" = "$drawpile_version_script_check" ]]; then
			echo "${green}Drawpile-srv $drawpile_srv_version compiled successfully!${normal}"
			drawpile_srv_compile_verification=1
			echo
		else
			drawpile_srv_compile_verification=0
			echo "${red}Drawpile-srv $drawpile_srv_version has been detected but is not${normal}"
			echo "${red}the correct version of $drawpile_version_script_check.${normal}"
			if [ "$skip_build_checks" == "1" ]; then
				:
			else
				# elif [ "$skip_build_checks" == "0" ]; then
				echo "Please copy output from terminal for diagnostic purposes."
				echo
				echo "${red}${bold}Exiting script in 30 seconds.${normal}"
				echo
				drawpile_srv_compile_verification_stored_result=0
				sudo sed -i '\!^drawpile_srv_compile_verification_stored_result =!{h;s!=.*!= '"$drawpile_srv_compile_verification_stored_result"'!};${x;\!^$!{s!!drawpile_srv_compile_verification_stored_result = '"$drawpile_srv_compile_verification_stored_result"'!;H};x}' $drawpile_configuration_values_file
				sleep 30
				exit
			fi
			echo
		fi
<<comment_EOF_delete
		if [[ "$git_clone_dp_checkout" = "1" ]]; then
			# Could be beta, could be stable. Who knows without manual checking?
			echo "${yellow}Drawpile-srv version check skipped.${normal}"
			echo "Because I'm not sure how to reliably compare and check "
			echo "     this via script."
			echo
			echo Version: $drawpile_srv_version
			echo
			sleep 10
		elif [[ "$git_clone_dp_checkout" = "2" ]] || [[ "$git_clone_dp_checkout" = "3" ]]; then
			# 2 is a release version, but not checked by script author. Verifiable.
			# 3 is a release version, and checked by script author. Verifiable.
				if [[ "$drawpile_srv_version" = "$drawpile_version_script_check" ]]; then
					echo "${green}Drawpile-srv $drawpile_srv_version compiled successfully!${normal}"
					echo
				else
					echo "${red}Drawpile-srv $drawpile_srv_version has been detected but is not${normal}"
					echo "${red}the correct version of $drawpile_version_script_check.${normal}"
					echo
					echo "Please copy output from terminal for diagnostic purposes."
					echo
					echo "${red}${bold}Exiting script in 30 seconds.${normal}"
					echo
					sleep 30
					exit
				fi
		else
			echo "${red}${bold}This message should not be visible for server compile check.${normal}"
		fi
comment_EOF_delete
	elif [[ ! -e "$dp_install_loc/Programs/Drawpile/build/bin/drawpile-srv" ]]; then
		drawpile_srv_compile_verification=0
		echo "${red}${bold}Drawpile-srv failed to compile.${normal}"
		if [ "$skip_build_checks" == "1" ]; then
			:
		else
			# elif [ "$skip_build_checks" == "0" ]; then
			echo
			echo "Please copy output from terminal for diagnostic purposes."
			echo
			echo "${red}${bold}Exiting script in 30 seconds.${normal}"
			echo 
			drawpile_srv_compile_verification_stored_result=0
			sudo sed -i '\!^drawpile_srv_compile_verification_stored_result =!{h;s!=.*!= '"$drawpile_srv_compile_verification_stored_result"'!};${x;\!^$!{s!!drawpile_srv_compile_verification_stored_result = '"$drawpile_srv_compile_verification_stored_result"'!;H};x}' $drawpile_configuration_values_file
			sleep 30
			exit
		fi
	else
		drawpile_srv_compile_verification=0
		echo "${red}${bold}Unable to tell if Drawpile compiled successfully.${normal}"
		echo "This message should not be visible."
		echo
		echo "${red}${bold}Exiting script in 30 seconds.${normal}"
		echo
		drawpile_srv_compile_verification_stored_result=0
		sudo sed -i '\!^drawpile_srv_compile_verification_stored_result =!{h;s!=.*!= '"$drawpile_srv_compile_verification_stored_result"'!};${x;\!^$!{s!!drawpile_srv_compile_verification_stored_result = '"$drawpile_srv_compile_verification_stored_result"'!;H};x}' $drawpile_configuration_values_file
		sleep 30
		exit
	fi
}

function drawpile_tools_compile_verification_function () {
	if [[ -e "$dp_install_loc/Programs/Drawpile/build/bin/dprectool" ]]; then
		dprec_tool_version=$( "$dp_install_loc/Programs/Drawpile/build/bin/dprectool" -v | grep -m 1 dprectool | awk '{ print $2 }' )
	else
		dprec_tool_version=$( dprectool -v | grep -m 1 dprectool | awk '{ print $2 }' )
	fi	
	# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
	if [[ -e "$dp_install_loc/Programs/Drawpile/build/bin/drawpile-cmd" ]]; then
		drawpile_cmd_version=$( "$dp_install_loc/Programs/Drawpile/build/bin/drawpile-cmd" -platform offscreen -v 2> /dev/null | grep -m 1 drawpile-cmd | awk '{ print $2 }' )
		if [ -z "$drawpile_cmd_version" ]; then
			drawpile_cmd_version=$( "$dp_install_loc/Programs/Drawpile/build/bin/drawpile-cmd" -v 2> /dev/null | grep -m 1 drawpile-cmd | awk '{ print $2 }' )
		fi
	else
		drawpile_cmd_version=$( drawpile-cmd -platform offscreen -v 2> /dev/null | grep -m 1 drawpile-cmd | awk '{ print $2 }' )
		if [ -z "$drawpile_cmd_version" ]; then
			drawpile_cmd_version=$( drawpile-cmd -v 2> /dev/null | grep -m 1 drawpile-cmd | awk '{ print $2 }' )
		fi
	fi
	
	# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
	if [[ -e "/usr/local/bin/drawpile-cmd" && -e "/usr/local/bin/dprectool" ]] || [[ -e "/usr/bin/drawpile-cmd" && -e "/usr/bin/dprectool" ]]; then
		if [[ "$drawpile_cmd_version" = "$drawpile_version_script_check" ]] && [[ "$dprec_tool_version" = "$drawpile_version_script_check" ]]; then
			echo "${green}Drawpile-cmd $drawpile_cmd_version and dprectool $dprec_tool_version compiled successfully!${normal}"
		else
			echo "${red}Drawpile-cmd $drawpile_cmd_version and dprectool $dprec_tool_version have been detected but${normal}"
			echo "${red}aren't the correct version of $drawpile_version_script_check.${normal}"
		fi
	elif [[ ! -e "/usr/local/bin/drawpile-cmd" && -e "/usr/local/bin/dprectool" ]] || [[ ! -e "/usr/bin/drawpile-cmd" && -e "/usr/bin/dprectool" ]]; then
		echo "${red}Drawpile-cmd failed to compile.${normal}"
		echo "However, the dprectool did compile successfully."
		echo
		echo "Please copy output from terminal for diagnostic purposes."
	elif [[ -e "/usr/local/bin/drawpile-cmd" && ! -e "/usr/local/bin/dprectool" ]] || [[ -e "/usr/bin/drawpile-cmd" && ! -e "/usr/bin/dprectool" ]]; then
		echo "${red}Dprectool failed to compile.${normal}"
		echo "However, the Drawpile-cmd program did compile successfully."
		echo
		echo "Please copy output from terminal for diagnostic purposes."
	elif [[ ! -e "/usr/local/bin/drawpile-cmd" && ! -e "/usr/local/bin/dprectool" && ! -e "/usr/bin/drawpile-cmd" && ! -e "/usr/bin/dprectool" ]]; then
		echo
		echo "${red}Drawpile failed to compile drawpile-cmd and dprectool.${normal}"
		echo "git_clone_dp_checkout=$git_clone_dp_checkout"
	else
		echo "Unable to tell if Drawpile tools compiled successfully."
		echo "This message should not be visible."
	fi
}

function drawpile_dprectool_compile_verification_function () {
	if [[ -e "$dp_install_loc/Programs/Drawpile/build/bin/dprectool" ]]; then
		dprec_tool_version=$( "$dp_install_loc/Programs/Drawpile/build/bin/dprectool" -v | grep -m 1 dprectool | awk '{ print $2 }' )
	else
		dprec_tool_version=$( dprectool -v | grep -m 1 dprectool | awk '{ print $2 }' )
	fi

	if [[ "/usr/local/bin/dprectool" ]] || [[ -e "/usr/bin/dprectool" ]]; then
		if [[ "$dprec_tool_version" = "$drawpile_version_script_check" ]]; then
			echo "${green}Dprectool $dprec_tool_version compiled successfully!${normal}"
		else
			echo "${red}Dprectool $dprec_tool_version have been detected but${normal}"
			echo "${red}aren't the correct version of $drawpile_version_script_check.${normal}"
			echo
			echo "Please copy output from terminal for diagnostic purposes."
		fi
	elif [[ ! -e "/usr/local/bin/dprectool" && ! -e "/usr/bin/dprectool" ]]; then
		echo
		echo "${red}Drawpile failed to compile dprectool.${normal}"
		echo "git_clone_dp_checkout=$git_clone_dp_checkout"
	else
		echo "Unable to tell if Drawpile tools compiled successfully."
		echo "This message should not be visible."
	fi
}

function drawpile_compile_verification_function () {
	if [[ "$USER" = "root" ]] || [[ "$USER" = "Root" ]] || [[ "$USER" = "ROOT" ]] || [[ $EUID == 0 ]]; then
		if [[ -e "$dp_install_loc/Programs/Drawpile/build/bin/drawpile-srv" ]]; then
			drawpile_srv_version=$( su -c "$dp_install_loc/Programs/Drawpile/build/bin/drawpile-srv -v" drawpileuser | grep -m 1 drawpile-srv | awk '{ print $2 }' )
			drawpile_srv_version_stripped=$( su -c "$dp_install_loc/Programs/Drawpile/build/bin/drawpile-srv -v" drawpileuser | perl -0777 -ne '/drawpile-srv\s+([0-9]+\.[0-9]+\.[0-9]+)/; print $1' )
		else
			drawpile_srv_version=$( su -c 'drawpile-srv -v' drawpileuser | grep -m 1 drawpile-srv | awk '{ print $2 }' )
			drawpile_srv_version_stripped=$( su -c 'drawpile-srv --version' drawpileuser | perl -0777 -ne '/drawpile-srv\s+([0-9]+\.[0-9]+\.[0-9]+)/; print $1' )
		fi
	else
		if [[ -e "$dp_install_loc/Programs/Drawpile/build/bin/drawpile-srv" ]]; then
			drawpile_srv_version=$( "$dp_install_loc"/Programs/Drawpile/build/bin/drawpile-srv -v | grep -m 1 drawpile-srv | awk '{ print $2 }' )
			drawpile_srv_version_stripped=$( "$dp_install_loc"/Programs/Drawpile/build/bin/drawpile-srv -v | perl -0777 -ne '/drawpile-srv\s+([0-9]+\.[0-9]+\.[0-9]+)/; print $1' )
		else
			drawpile_srv_version=$( drawpile-srv -v | grep -m 1 drawpile-srv | awk '{ print $2 }' )
			drawpile_srv_version_stripped=$( drawpile-srv --version | perl -0777 -ne '/drawpile-srv\s+([0-9]+\.[0-9]+\.[0-9]+)/; print $1' )
		fi
	fi
	
	if [[ -e "$dp_install_loc/Programs/Drawpile/build/bin/drawpile" ]]; then
		drawpile_version=$( QT_QPA_PLATFORM=offscreen "$dp_install_loc"/Programs/Drawpile/build/bin/drawpile -v 2>/dev/null | grep -m 1 drawpile | awk '{ print $2 }' )
	else
		drawpile_version=$( QT_QPA_PLATFORM=offscreen drawpile -v 2>/dev/null | grep -m 1 drawpile | awk '{ print $2 }' )
	fi	

	if [ "$drawpile_build_configuration" == "1" ] || [ "$drawpile_build_configuration" == "2" ]; then
		# 1 - Server - Graphical User Interface (GUI)															sudo cmake .. -DINITSYS=systemd -DCLIENT=OFF
		# 2 - Server - Non-GUI (also known as headless)															sudo cmake .. -DINITSYS=systemd -DCLIENT=OFF -DSERVERGUI=off
		drawpile_srv_compile_verification_function
		drawpile_dprectool_compile_verification_function
	elif [ "$drawpile_build_configuration" == "3" ] || [ "$drawpile_build_configuration" == "4" ] || [ "$drawpile_build_configuration" == "5" ] || [ "$drawpile_build_configuration" == "6" ]; then
		# 3 - Server And Client - GUI server, client, Wacom Tablet drivers, dprectool, and drawpile-cmd tool		sudo cmake .. -DINITSYS=systemd -DTOOLS=on												--> sudo $package_install_program libwacom-bin libwacom-common libwacom-dev libwacom2 libwacom2-dbg xserver-xorg-input-wacom
		# 4 - Server And Client - GUI server, client, dprectool, and drawpile-cmd tool							sudo cmake .. -DINITSYS=systemd -DTOOLS=on -DCMAKE_BUILD_TYPE=release
		# 5 - Server And Client - GUI Server, debugging client, dprectool, and drawpile-cmd tool					sudo cmake .. -DINITSYS=systemd -DTOOLS=on -DCMAKE_BUILD_TYPE=debug
		# 6 - Server And Client - Headless server, debugging client, dprectool, and drawpile-cmd tool				sudo cmake .. -DINITSYS=systemd -DTOOLS=on -DCMAKE_BUILD_TYPE=debug -DSERVERGUI=off
		drawpile_srv_compile_verification_function
		drawpile_client_compile_verification_function
		drawpile_tools_compile_verification_function
	elif [ "$drawpile_build_configuration" == "9" ] || [ "$drawpile_build_configuration" == "10" ]; then
		# 9 - Server - Graphical User Interface (GUI) WARNING NO SERVER CONFIGURATION							sudo cmake .. -DINITSYS=systemd -DCLIENT=OFF
		# 10 - Server - Non-GUI (also known as headless) WARNING NO SERVER CONFIGURATION						sudo cmake .. -DINITSYS=systemd -DCLIENT=OFF -DSERVERGUI=off
		drawpile_srv_compile_verification_function
		drawpile_dprectool_compile_verification_function
		
		drawpile_srv_compile_verification_stored_result=1
		sudo sed -i '\!^drawpile_srv_compile_verification_stored_result =!{h;s!=.*!= '"$drawpile_srv_compile_verification_stored_result"'!};${x;\!^$!{s!!drawpile_srv_compile_verification_stored_result = '"$drawpile_srv_compile_verification_stored_result"'!;H};x}' $drawpile_configuration_values_file
		
		# The sort command used at the end sorts the list alphabetically.
		sudo sort $app_installation_status_file -o $app_installation_status_file
		# This removes any duplicates that may exist in the file.
		perl -i -ne 'print if ! $a{$_}++' $app_installation_status_file
		perl -i -ne 'print if ! $a{$_}++' $app_installation_status_file
		# sudo sort $drawpile_configuration_values_file -o $drawpile_configuration_values_file
		sudo sed -i '\!^drawpile_script_completed =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!drawpile_script_completed = '"yes"'!;H};x}' $drawpile_configuration_values_file
		echo
		echo "Exiting script in 30 seconds since no further"
		echo "configuration is required."
		echo
		sleep 30
		exit
	else
		echo "${red}${bold}Some error occurred in the script. (Drawpile Compile Verification Function)${normal}"
		echo "${red}${bold}This message should not be visible.${normal}"
	fi
}

function drawpile_build_and_compile_function () {
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Preparing to Build Drawpile . . .*****${normal}"
	echo
	cd "$dp_install_loc/Programs/Drawpile"
	sudo mkdir -p -v build > /dev/null
	sudo chmod 777 "$dp_install_loc/Programs/Drawpile/build" -R
	cd "$dp_install_loc/Programs/Drawpile/build"
	#
	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	# These lines are to fix an issue with an older version of KArchive which cannot be easily upgraded.
	# KArchive apparently doesn't supply a version number macro so this can't be detected at compile time as a problem.
	# File is located under Drawpile/src/libclient/ora/orawriter.cpp and replaces the following text
	# zip.errorLine() 
	# zf.errorLine() 
	#
	# with this instead as per the creator of Drawpile
	#
	# QString("ZIP error")
	#
	# It is presumable that the current (09/18/2017) stable release of KArchive at 5.28.0-2 has this issue fixed with 
	# the testing version of KArchive which is 5.37.0-2. Once updated to or past that number, this section below should
	# no longer be necessary to use.
	#
	# Page for newest KArchive download ---> https://api.kde.org/frameworks/karchive/html/index.html
	# Also see https://tracker.debian.org/pkg/karchive
	# Or see https://packages.qa.debian.org/k/karchive.html
	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
		package_name=libkf5archive-dev
		version=$( apt-cache policy libkf5archive-dev | grep "Installed:" | cut -c 14-40 )
	fi
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		package_name=kf5-karchive-devel
		version=$( dnf info -q kf5-karchive-devel | grep -i "Version" | tr -s " " | grep -i "Version :" | tail -1 | awk '{ print $3 }' )
	fi
	echo "$package_name is using version $version"
	echo

	if [ "$version" > "5.29" ]; then
			echo "${green}Installed version of K Archive is greater than 5.29.${normal}"
		echo "${green}No modification of source files required.${normal}"
	elif [ "$version" = "5.29" ]; then
		echo "${green}Installed version of K Archive is equal to 5.29.${normal}"
		echo "${green}No modification of source files required.${normal}"
	elif [ "$version" < "5.29" ]; then
		echo "${yellow}${bold}Installed version of K Archive is less than 5.29.${normal}"
		echo "${yellow}${bold}Modification of source files required.${normal}"
		echo
		echo 'Creating backup of file orawriter.cpp before modification.'
		sudo cp "$dp_install_loc/Programs/Drawpile/src/libclient/ora/orawriter.cpp" "$dp_install_loc/Programs/Drawpile/src/libclient/ora/orawriter.cpp.backup"
		echo
		echo 'Modifying file orawriter.cpp for use with older version of KArchive (5.28.0-2).'
		sudo sed -i -e 's/zip.errorString()/QString("ZIP error")/g' "$dp_install_loc/Programs/Drawpile/src/libclient/ora/orawriter.cpp"
		sudo sed -i -e 's/zf.errorString()/QString("ZIP error")/g' "$dp_install_loc/Programs/Drawpile/src/libclient/ora/orawriter.cpp"
	else
		echo "Unable to make a determination of which version of K Archive is installed."
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	# These lines are to fix an issue with an older version of QTBase5-dev.
	# Q_FALLTHROUGH was introduced in Qt 5.8, this can be fixed by adding
	# the following to the loginhandler.cpp file: #define Q_FALLTHROUGH (void)0
	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	echo
	if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
		package_name=qtbase5-dev
		version_qt=$( apt-cache policy qtbase5-dev | grep "Installed:" | cut -c 14-18 )
	fi
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		package_name=qt5-qtbase-devel
		version_qt=$( dnf info -q qt5-qtbase-devel | grep -i "Version" | tr -s " " | grep -i "Version :" | tail -1 | awk '{ print $3 }' )
	fi
	echo "$package_name is using version $version_qt"
	echo

	if [ "$version_qt" > "5.8" ]; then
		echo "${green}Installed version of $package_name is greater than 5.8.${normal}"
		echo "${green}No modification of source files required.${normal}"
	elif [ "$version_qt" = "5.8" ]; then
		echo "${green}Installed version of $package_name is equal to 5.8.${normal}"
		echo "${green}No modification of source files required.${normal}"
	elif [ "$version_qt" < "5.8" ]; then
		echo "${yellow}${bold}Installed version of $package_name is less than 5.8.${normal}"
		echo "${yellow}${bold}Modification of source files required.${normal}"
		echo '--------------------------------------------------------------------------------'
		echo 'Creating backup of file loginhandler.cpp before modification.'	
		sudo cp "$dp_install_loc/Programs/Drawpile/src/libserver/loginhandler.cpp" "$dp_install_loc/Programs/Drawpile/src/libserver/loginhandler.cpp.backup"
		echo
		echo 'Modifying file loginhandler.cpp for use with older version of qtbase5-dev.'
		sudo sed -i -e 's/#include <QNetworkReply>/#include <QNetworkReply>\n#define Q_FALLTHROUGH() (void)0/g' "$dp_install_loc/Programs/Drawpile/src/libserver/loginhandler.cpp"
		echo '--------------------------------------------------------------------------------'
		echo 'Creating backup of file aclfilter.cpp before modification.'
		sudo cp "$dp_install_loc/Programs/Drawpile/src/libclient/canvas/aclfilter.cpp" "$dp_install_loc/Programs/Drawpile/src/libclient/canvas/aclfilter.cpp.backup"
		echo
		echo 'Modifying file aclfilter.cpp for use with older version of qtbase5-dev.'
		sudo sed -i -e 's/#include "..\/shared\/net\/undo.h"/#include "..\/shared\/net\/undo.h"\n#define Q_FALLTHROUGH() (void)0/g' "$dp_install_loc/Programs/Drawpile/src/libclient/canvas/aclfilter.cpp"
		sudo sed -i -e 's/#include "..\/libshared\/net\/undo.h"/#include "..\/libshared\/net\/undo.h"\n#define Q_FALLTHROUGH() (void)0/g' "$dp_install_loc/Programs/Drawpile/src/libclient/canvas/aclfilter.cpp"
		echo '--------------------------------------------------------------------------------'
		echo 'Creating backup of file navigator.cpp before modification.'
		sudo cp "$dp_install_loc/Programs/Drawpile/src/desktop/docks/navigator.cpp" "$dp_install_loc/Programs/Drawpile/src/desktop/docks/navigator.cpp.backup"
		echo
		echo 'Modifying file navigator.cpp for use with older version of qtbase5-dev.'
		sudo sed -i -e 's/right.center()/0.5 * right.p1() + 0.5 * right.p2()/g' "$dp_install_loc/Programs/Drawpile/src/desktop/docks/navigator.cpp"
		echo '--------------------------------------------------------------------------------'
		echo 'Creating backup of file joindialog.cpp before modification.'
		sudo cp "$dp_install_loc/Programs/Drawpile/src/desktop/dialogs/joindialog.cpp" "$dp_install_loc/Programs/Drawpile/src/desktop/dialogs/joindialog.cpp.backup"
		echo
		echo 'Modifying file joindialog.cpp for use with older version of qtbase5-dev.'
		sudo sed -i -e 's/currentSecsSinceEpoch()/currentMSecsSinceEpoch() \/ 1000/g' "$dp_install_loc/Programs/Drawpile/src/desktop/dialogs/joindialog.cpp"
		echo '--------------------------------------------------------------------------------'
		cd "$dp_install_loc/Programs/Drawpile"
		sudo $wget_or_wget2_quiet_progress "https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/scripts-for-other-scripts-only/elapsed-timer.patch"
		sudo $wget_or_wget2_quiet_progress"https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/scripts-for-other-scripts-only/elapsed-timer2.patch"
		echo '--------------------------------------------------------------------------------'
		patch -p1 < elapsed-timer.patch
		echo '--------------------------------------------------------------------------------'
		patch -p1 < elapsed-timer2.patch
		#
		# Changing back to prior directory before continuing script.
		#
		cd "$dp_install_loc/Programs/Drawpile/build"
	else
		echo "Unable to make a determination of which version of qtbase5-dev is installed."
	fi
	echo
	
	drawpile_program_version_with_git_dirty=$( git describe --dirty )
	
	if [[ "$drawpile_program_version_with_git" == "$drawpile_program_version_with_git_dirty" ]]; then
		# Do nothing, no action required
		:
	elif [[ "$drawpile_program_version_with_git" != "$drawpile_program_version_with_git_dirty" ]]; then
		echo "Modifications to source file occurred. Updating version number for comparison check."
		drawpile_program_version_with_git=$drawpile_program_version_with_git_dirty
	else
		echo "This git dirty check message should not be visible."
	fi

	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Drawpile Build Configuration . . .*****${normal}"
	echo
	variable_to_read_1="drawpile_build_configuration"
	variable_to_read_2="drawpile_build_configuration_number_desc"
	variable_to_read_3="drawpile_build_configuration_settings"

	value_description_1="This value corresponds to these build settings: "

	read_stored_config_value_query_function
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Using stored value and moving on."
		drawpile_build_configuration=$read_stored_config_value_query_1
		drawpile_build_configuration_old_value=$drawpile_build_configuration
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		if [ ! -z "$read_stored_build_value_query_1" ] || [ "$read_stored_build_value_query_1" != "=" ]; then
			drawpile_build_configuration_old_value="Value not configured"
		else
			drawpile_build_configuration_old_value=$read_stored_config_value_query_1
		fi
		echo 'These options configure the installation of Drawpile for your device.'
		echo 'All options with the server assume systemd will be in use, which helps'
		echo 'manage server startup. This does not apply to client only options.'
		echo
		echo "${bold}${cyan}Definitions:${normal}"
		echo "${bold}Drawpile-cmd${normal} - tool is used for converting recordings to pictures. This"
		echo '     is useful if using file backed sessions with archive set or recordings set.'
		echo '     That step will be presented to you later. A script for automatically converting '
		echo '     recordings and naming them to user friendly formats is included in the server'
		echo '     management script. This only compiles when the client is also built.'
		echo "${bold}File backed sessions${normal} - write sessions to file, helps sessions to survive"
		echo '    power outages and server crashes. Can serve as a recording if server'
		echo '    database set to Archive terminated sessions, however filenames are'
		echo '    saved like 926a80d5-3168-401d-b406-f05d3fc05c32.dprec with a'
		echo '    corresponding text file, the session title is inside the text file.'
		echo "${bold}GUI${normal} - Graphical User Interface, this script right now is an example"
		echo '    of a non GUI interface, command line, or terminal.'
		echo "${bold}Headless${normal} - No graphical user interface. Changes must be done by script"
		echo '    or by remote server management.' 
		echo "${bold}Recording${normal} - records all sessions, may not be necessary with file backed"
		echo '    sessions turned on, though it can be useful for debugging broken boards or '
		echo '    recovering art from broken boards. This can be turned on an individual basis'
		echo '    when a room is active on the server by going to File and then Record... ,'
		echo "    or by combining the file backed sessions option and checking ${underline}Archive${normal}"
		echo "    ${underline}terminated sessions${normal}."
		echo
		echo "${bold}Other Notes${normal} - If installing server only, will need to use another computer to"
		echo '    host and draw.'
		echo
		if [[ "$gui_status" == "GUI Enabled" ]]; then
			echo "${bold}${cyan}Recommended Option:${normal} 4"
		else
			# elif [[ "$gui_status" == "GUI Disabled" ]]; then
			echo "${bold}${cyan}Recommended Option:${normal} 2"
		fi
		echo
		echo "${bold}Drawpile Server Only Options:${normal}"
		echo ' 1 - Server - Graphical User Interface (GUI) and dprectool'
		if [[ "$gui_status" == "GUI Enabled" ]]; then
			echo " 2 - Server - Non-GUI (also known as headless) and dprectool"
		else
			# elif [[ "$gui_status" == "GUI Disabled" ]]; then
			echo " ${bold}${cyan}2 - Server - Non-GUI (also known as headless) and dprectool - Recommended${normal}"
		fi
		echo
		echo "${bold}Drawpile Server And Client Options:${normal}"
		echo ' 3 - Server and Client - GUI server, client, Wacom Tablet drivers, dprectool, and drawpile-cmd tool'

		if [[ "$gui_status" == "GUI Enabled" ]]; then
			echo " ${bold}${cyan}4 - Server And Client - GUI server, client, dprectool, and drawpile-cmd tool - Recommended${normal}"
		else
			# elif [[ "$gui_status" == "GUI Disabled" ]]; then
			echo " 4 - Server And Client - GUI server, client, dprectool, and drawpile-cmd tool"
		fi
		echo ' 5 - Server And Client - GUI Server, debugging client, dprectool, and drawpile-cmd tool'
		echo ' 6 - Server And Client - Headless server, debugging client, dprectool, and drawpile-cmd tool'
		echo
		echo "${bold}Drawpile Client Only Options:${normal}"
		echo ' 7 - Drawpile Client Only - with Wacom Tablet drivers Installed'
		echo ' 8 - Drawpile Client Only - Client program only'
		echo
		echo "${bold}${red}Drawpile Server Only & No Server Configuration Options:${normal}"
		echo "${bold}${red}WARNING - ADVANCED USERS ONLY${normal}"
		echo ' 9 - Server - Graphical User Interface (GUI) and dprectool'
		echo '10 - Server - Non-GUI (also known as headless) and dprectool'
		echo "${bold}${red}WARNING - ADVANCED USERS ONLY${normal}"
		echo
		while :; do
			read -r -p "${bold}${cyan}Enter a number and hit enter to continue:${normal} " drawpile_build_configuration
			[[ $drawpile_build_configuration =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
			if (( $drawpile_build_configuration >= 1 && $drawpile_build_configuration <= 10)); then
				break
			else
				echo
				echo "Invalid number selection, try again."
				echo
			fi
		done
		sudo sed -i '\!^drawpile_build_configuration =!{h;s!=.*!= '"$drawpile_build_configuration"'!};${x;\!^$!{s!!drawpile_build_configuration = '"$drawpile_build_configuration"'!;H};x}' $drawpile_configuration_values_file
	else
		echo "This message should not be visible."
	fi
	
	drawpile_srv_compile_verification_stored_result=$( grep -m 1 "drawpile_srv_compile_verification_stored_result = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
	if [ ! -z "$drawpile_srv_compile_verification_stored_result" ] || [ "$drawpile_srv_compile_verification_stored_result" != "=" ]; then
		drawpile_srv_compile_verification_stored_result="Value not configured"
	else
		# Do nothing.
		:
	fi
	
	if [[ "$drawpile_build_configuration" != "$drawpile_build_configuration_old_value" && "$drawpile_build_configuration_old_value" != "Value not configured" ]]; then
		# Remove build directory contents. Recommended for different build configurations.
		sudo rm -rf "$dp_install_loc/Programs/Drawpile/build/*"
	elif [[ "$drawpile_build_configuration" == "$drawpile_build_configuration_old_value" && "$drawpile_srv_compile_verification_stored_result" == "0" ]]; then
		# Remove build directory contents. Recommended for failed compile jobs.
		sudo rm -rf "$dp_install_loc/Programs/Drawpile/build/*"
	else
		# Do not remove build directory contents. First time running or build options were not changed.
		:
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	t_max=$(grep -c ^processor /proc/cpuinfo)

	echo "${bold}${cyan}*****Determine Compile Speed . . .*****${normal}"
	echo

	if [ "$t_max" == "1" ] ; then
		echo "Only one core available for compiling. Continuing Script."
		thread_count=1
	else
		echo 'You can hit enter to continue here, as it will pick the maximum amount of'
		echo 'threads available from the processor. If the script froze at this stage, try'
		if [ "$t_max" == "2" ] ; then
			echo "using 1 instead. This uses less system resources and is more likely to"
			echo 'complete without freezing up.'
		else
			echo "using a number between 1 and $t_max. This uses less system resources and is more"
			echo 'likely to complete without freezing up.'
		fi
		echo
		echo 'This is the command to be run, where # is a number input by you:'
		echo 'cmake --build . -j #'
		# echo 'sudo make -j #'
		echo
		read -r -p "${bold}${cyan}Enter compiling thread count (blank for maximum of $t_max): ${normal}" thread_count
		while [ true ] ; do
			if [ -z "$thread_count" ] ; then
				echo
				echo "Compiling using maximum"
				thread_count=$t_max
				break
			elif [[ $thread_count =~ ^[0-9]+$ ]] ; then
				if (($thread_count>0)) && (($thread_count<=$t_max)) ; then
					break
				else
					echo
					echo "Value: '$thread_count' is not within the range [1,$t_max]"
					echo
				fi
			else
				echo
				echo "Value: '$thread_count' is not a positive integer"
				echo
			fi
			read -r -p "${bold}${cyan}Enter compiling thread count (blank for maximum of $t_max): ${normal}" thread_count
		done
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
<<comment_EOF
	#---------------------------------------------------------------------------------------------------------------------------------
	# Raspbian Package Descriptions
	#----------------------------------------
		libwacom-bin ______________	libwacom is a library to identify wacom tablets and their model-specific features.
									It provides easy access to information such as "is this a built-in on-screen tablet",
									"what is the size of this model", etc. This package contains the utilities which 
									are used by the libraries.
		libwacom-common ___________ Same as above description.
		libwacom-dev ______________ Same as above description.
		libwacom2 _________________ Same as above description.
		libwacom2-dbg _____________ Same as above description. (Doesn't appear to be available any longer)
									https://packages.debian.org/buster/libwacom2-dbg
		xserver-xorg-input-wacom __ This package provides the X.Org driver for Wacom tablet devices.
	#---------------------------------------------------------------------------------------------------------------------------------
	# Fedora Package Descriptions
	#----------------------------------------
		kcm_wacomtablet ___________	This module implements a GUI for the Wacom Linux Drivers and extends it with 
									profile support to handle different button/pen layouts per profile.
		libwacom __________________ libwacom is a library that provides information about Wacom tablets and tools. 
									This information can then be used by drivers or applications to tweak the UI
									or general settings to match the physical tablet.
		libwacom-data _____________ Tablet information client library data files.
		libwacom-devel ____________ Tablet information client library development package.
		libwacom-utils ____________ Utilities to handle and/or debug libwacom devices.
		xorg-x11-drv-wacom ________ X.Org X11 wacom input driver for Wacom tablets.
		xorg-x11-drv-wacom-devel __ X.Org X11 wacom input driver development files.
	#---------------------------------------------------------------------------------------------------------------------------------
comment_EOF

	if [ "$drawpile_build_configuration" == "3" ] || [ "$drawpile_build_configuration" == "7" ]; then
		# For builds that install Wacom drivers and such also
		app_does_not_exist=0
		app_installed=0
		app_not_installed=0
		if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
			program_list_to_install_wacom="libwacom-bin libwacom-common libwacom-dev libwacom2 xserver-xorg-input-wacom"
			progs=(libwacom-bin libwacom-common libwacom-dev libwacom2 xserver-xorg-input-wacom);
		fi
		if [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ] && [ "$verify_if_this_is_raspbian_or_debian" == "" ]; then
			program_list_to_install_wacom="libwacom-bin libwacom-common libwacom-dev xserver-xorg-input-wacom"
			progs=(libwacom-bin libwacom-common libwacom-dev xserver-xorg-input-wacom);
		fi
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
			program_list_to_install_wacom="kcm_wacomtablet libwacom libwacom-data libwacom-devel libwacom-utils xorg-x11-drv-wacom xorg-x11-drv-wacom-devel"
			progs=(kcm_wacomtablet libwacom libwacom-data libwacom-devel libwacom-utils xorg-x11-drv-wacom xorg-x11-drv-wacom-devel);
		fi
		# package_install_status_check_function
	fi

	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	# Read more here --->		https://github.com/drawpile/Drawpile/wiki/Building-from-sources
	# -DCLIENT=off				: Compile only the server
	# -DCMAKE_BUILD_TYPE=debug	: Compile a debugging version
	# -DINITSYS=systemd			: enable systemd socket activation and logging support for the dedicated server
	# -DSERVER=off				: Don't build the standalone server
	# -DSERVERGUI=off			: Do not include the server GUI. (Good when deploying to a headless server.)
	# -DTOOLS=on				: Compile additional tools (Generates dprectool. Also generates drawpile-cmd when the client is set to be built)
	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	echo "${bold}${cyan}*****Preliminary Build Setup . . . *****${normal}"
	echo
	sudo chown $current_username "$dp_install_loc/Programs/Drawpile/build" -R
	if [ "$drawpile_build_configuration" == "1" ] || [ "$drawpile_build_configuration" == "9" ]; then
		if [[ "$drawpile_build_configuration" = "1" ]]; then drawpile_build_configuration_number_desc="1 - Server - Graphical User Interface (GUI) and dprectool"; fi
		if [[ "$drawpile_build_configuration" = "9" ]]; then drawpile_build_configuration_number_desc="9 - Server - Graphical User Interface (GUI) and dprectool WARNING NO SERVER CONFIGURATION"; fi
		sudo sed -i '\!^drawpile_build_configuration_number_desc =!{h;s!=.*!= '"$drawpile_build_configuration_number_desc"'!};${x;\!^$!{s!!drawpile_build_configuration_number_desc = '"$drawpile_build_configuration_number_desc"'!;H};x}' $drawpile_configuration_values_file
		drawpile_build_configuration_settings="cmake .. -DCMAKE_BUILD_TYPE=Release -DINITSYS=systemd -DCLIENT=OFF -DSERVER=ON -DTOOLS=on"
		sudo sed -i '\!^drawpile_build_configuration_settings =!{h;s!=.*!= '"$drawpile_build_configuration_settings"'!};${x;\!^$!{s!!drawpile_build_configuration_settings = '"$drawpile_build_configuration_settings"'!;H};x}' $drawpile_configuration_values_file
		# May cause shell to exit so do this right before command runs to make sure it reads it.
		. ~/.cargo/env
		$drawpile_build_configuration_settings	
	elif [ "$drawpile_build_configuration" == "2" ] || [ "$drawpile_build_configuration" == "10" ]; then
		if [[ "$drawpile_build_configuration" = "2" ]]; then drawpile_build_configuration_number_desc="2 - Server - Non-GUI (also known as headless) and dprectool"; fi
		if [[ "$drawpile_build_configuration" = "10" ]]; then drawpile_build_configuration_number_desc="10 - Server - Non-GUI (also known as headless) and dprectool WARNING NO SERVER CONFIGURATION"; fi
		sudo sed -i '\!^drawpile_build_configuration_number_desc =!{h;s!=.*!= '"$drawpile_build_configuration_number_desc"'!};${x;\!^$!{s!!drawpile_build_configuration_number_desc = '"$drawpile_build_configuration_number_desc"'!;H};x}' $drawpile_configuration_values_file
		drawpile_build_configuration_settings="cmake .. -DCMAKE_BUILD_TYPE=Release -DINITSYS=systemd -DCLIENT=OFF -DSERVERGUI=off -DSERVER=ON -DTOOLS=on"
		sudo sed -i '\!^drawpile_build_configuration_settings =!{h;s!=.*!= '"$drawpile_build_configuration_settings"'!};${x;\!^$!{s!!drawpile_build_configuration_settings = '"$drawpile_build_configuration_settings"'!;H};x}' $drawpile_configuration_values_file
		# May cause shell to exit so do this right before command runs to make sure it reads it.
		. ~/.cargo/env
		$drawpile_build_configuration_settings	
	elif [ "$drawpile_build_configuration" == "3" ]; then
		drawpile_build_configuration_number_desc="3 - Server And Client - GUI server, client, Wacom Tablet drivers, dprectool, and drawpile-cmd tool"
		sudo sed -i '\!^drawpile_build_configuration_number_desc =!{h;s!=.*!= '"$drawpile_build_configuration_number_desc"'!};${x;\!^$!{s!!drawpile_build_configuration_number_desc = '"$drawpile_build_configuration_number_desc"'!;H};x}' $drawpile_configuration_values_file
		drawpile_build_configuration_settings="cmake .. -DCMAKE_BUILD_TYPE=Release -DINITSYS=systemd -DTOOLS=on -DSERVER=ON"
		sudo sed -i '\!^drawpile_build_configuration_settings =!{h;s!=.*!= '"$drawpile_build_configuration_settings"'!};${x;\!^$!{s!!drawpile_build_configuration_settings = '"$drawpile_build_configuration_settings"'!;H};x}' $drawpile_configuration_values_file
		# May cause shell to exit so do this right before command runs to make sure it reads it.
		. ~/.cargo/env
		$drawpile_build_configuration_settings
		package_install_status_check_function
		sudo $package_install_program $program_list_to_install_wacom # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
		wacom_explanation_function
	elif [ "$drawpile_build_configuration" == "4" ]; then
		drawpile_build_configuration_number_desc="4 - Server And Client - GUI server, client, dprectool, and drawpile-cmd tool"
		sudo sed -i '\!^drawpile_build_configuration_number_desc =!{h;s!=.*!= '"$drawpile_build_configuration_number_desc"'!};${x;\!^$!{s!!drawpile_build_configuration_number_desc = '"$drawpile_build_configuration_number_desc"'!;H};x}' $drawpile_configuration_values_file
		drawpile_build_configuration_settings="cmake .. -DCMAKE_BUILD_TYPE=Release -DINITSYS=systemd -DSERVER=ON -DTOOLS=on"
		sudo sed -i '\!^drawpile_build_configuration_settings =!{h;s!=.*!= '"$drawpile_build_configuration_settings"'!};${x;\!^$!{s!!drawpile_build_configuration_settings = '"$drawpile_build_configuration_settings"'!;H};x}' $drawpile_configuration_values_file
		# May cause shell to exit so do this right before command runs to make sure it reads it.
		. ~/.cargo/env
		$drawpile_build_configuration_settings	
	elif [ "$drawpile_build_configuration" == "5" ]; then
		drawpile_build_configuration_number_desc="5 - Server And Client - GUI Server, debugging client, dprectool, and drawpile-cmd tool"
		sudo sed -i '\!^drawpile_build_configuration_number_desc =!{h;s!=.*!= '"$drawpile_build_configuration_number_desc"'!};${x;\!^$!{s!!drawpile_build_configuration_number_desc = '"$drawpile_build_configuration_number_desc"'!;H};x}' $drawpile_configuration_values_file
		drawpile_build_configuration_settings="cmake .. -DCMAKE_BUILD_TYPE=Release -DINITSYS=systemd -DTOOLS=on -DCMAKE_BUILD_TYPE=debug -DSERVER=ON"
		sudo sed -i '\!^drawpile_build_configuration_settings =!{h;s!=.*!= '"$drawpile_build_configuration_settings"'!};${x;\!^$!{s!!drawpile_build_configuration_settings = '"$drawpile_build_configuration_settings"'!;H};x}' $drawpile_configuration_values_file
		# May cause shell to exit so do this right before command runs to make sure it reads it.
		. ~/.cargo/env
		$drawpile_build_configuration_settings	
	elif [ "$drawpile_build_configuration" == "6" ]; then
		drawpile_build_configuration_number_desc="6 - Server And Client - Headless server, debugging client, dprectool, and drawpile-cmd tool"
		sudo sed -i '\!^drawpile_build_configuration_number_desc =!{h;s!=.*!= '"$drawpile_build_configuration_number_desc"'!};${x;\!^$!{s!!drawpile_build_configuration_number_desc = '"$drawpile_build_configuration_number_desc"'!;H};x}' $drawpile_configuration_values_file
		drawpile_build_configuration_settings="cmake .. -DCMAKE_BUILD_TYPE=Release -DINITSYS=systemd -DTOOLS=on -DCMAKE_BUILD_TYPE=debug -DSERVERGUI=off -DSERVER=ON"
		sudo sed -i '\!^drawpile_build_configuration_settings =!{h;s!=.*!= '"$drawpile_build_configuration_settings"'!};${x;\!^$!{s!!drawpile_build_configuration_settings = '"$drawpile_build_configuration_settings"'!;H};x}' $drawpile_configuration_values_file
		# May cause shell to exit so do this right before command runs to make sure it reads it.
		. ~/.cargo/env
		$drawpile_build_configuration_settings	
	elif [ "$drawpile_build_configuration" == "7" ]; then
		drawpile_build_configuration_number_desc="7 - Drawpile Client Only - with Wacom Tablet drivers Installed"
		sudo sed -i '\!^drawpile_build_configuration_number_desc =!{h;s!=.*!= '"$drawpile_build_configuration_number_desc"'!};${x;\!^$!{s!!drawpile_build_configuration_number_desc = '"$drawpile_build_configuration_number_desc"'!;H};x}' $drawpile_configuration_values_file
		drawpile_build_configuration_settings="cmake .. -DCMAKE_BUILD_TYPE=Release -DSERVER=off"
		sudo sed -i '\!^drawpile_build_configuration_settings =!{h;s!=.*!= '"$drawpile_build_configuration_settings"'!};${x;\!^$!{s!!drawpile_build_configuration_settings = '"$drawpile_build_configuration_settings"'!;H};x}' $drawpile_configuration_values_file
		# May cause shell to exit so do this right before command runs to make sure it reads it.
		. ~/.cargo/env
		$drawpile_build_configuration_settings
		package_install_status_check_function
		sudo $package_install_program $program_list_to_install_wacom # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
		wacom_explanation_function
		compile_drawpile_client_only_function
	elif [ "$drawpile_build_configuration" == "8" ]; then
		drawpile_build_configuration_number_desc="8 - Drawpile Client Only - Client program only"
		sudo sed -i '\!^drawpile_build_configuration_number_desc =!{h;s!=.*!= '"$drawpile_build_configuration_number_desc"'!};${x;\!^$!{s!!drawpile_build_configuration_number_desc = '"$drawpile_build_configuration_number_desc"'!;H};x}' $drawpile_configuration_values_file
		drawpile_build_configuration_settings="cmake .. -DCMAKE_BUILD_TYPE=Release -DSERVER=off"
		sudo sed -i '\!^drawpile_build_configuration_settings =!{h;s!=.*!= '"$drawpile_build_configuration_settings"'!};${x;\!^$!{s!!drawpile_build_configuration_settings = '"$drawpile_build_configuration_settings"'!;H};x}' $drawpile_configuration_values_file
		# May cause shell to exit so do this right before command runs to make sure it reads it.
		. ~/.cargo/env
		$drawpile_build_configuration_settings	
		compile_drawpile_client_only_function
	else
		echo "${red}This message should not be visible.${normal}"
		echo
		echo "${red}Exiting script in 30 seconds.${normal}"
		echo 
		sleep 30
		exit
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Compiling with $thread_count threads . . . *****${normal}"
	echo
	. ~/.cargo/env
	cmake --build . -j "$thread_count"
	# make -j "$thread_count"
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	if [ "$drawpile_build_configuration" == "7" ] || [ "$drawpile_build_configuration" == "8" ]; then
		echo "${bold}${cyan}*****Making installation of compiled program,*****${normal}"
		echo "${bold}${cyan}*****      libraries, and documentation      *****${normal}"
		echo "${bold}${cyan}*****          to proper locations.          *****${normal}"
		echo
		#Location of created executable --> /usr/local/bin/
		sudo cmake --install .
		wait $!
		# sudo make install
	else
		drawpile_srv_socket_status_function
		echo
		drawpile_srv_service_status_function
		echo
		echo '--------------------------------------------------------------------------------'
		echo '--------------------------------------------------------------------------------'
		echo
		# The below section handles the following:
		# - If the server is not currently running, don't skip initial setup.
		# - If the server is currently running, don't install to locations and do later.
		if [[ ( "$drawpile_srv_socket_loaded" == "enabled" && ( "$drawpile_srv_socket_status" == "(running)" || "$drawpile_srv_socket_status" == "(listening)" ) && "$drawpile_srv_service_loaded" == "disabled") || ( "$drawpile_srv_socket_loaded" == "disabled" && "$drawpile_srv_service_loaded" == "enabled" && "$drawpile_srv_service_status" == "(running)" ) || "$drawpile_srv_service_status" == "(running)" ]]; then
			#Do nothing because now we will do this function later to stop server once (instead of twice potentially).
			echo "${bold}${yellow}***** Skipping installation of compiled program, *****${normal}"
			echo "${bold}${yellow}*****        libraries, and documentation        *****${normal}"
			echo "${bold}${yellow}*****           to proper locations.             *****${normal}"
			echo
			echo "${bold}${yellow}   Will occur later for systemd completion/changes.${normal}"
			echo "${bold}${yellow}   Avoids multiple drawpile-srv restarts if running.${normal}"
		else
			# The service is either disabled, not yet configured, or not running.  Continue as normal for installation.
			echo "${bold}${cyan}***** Making installation of compiled program, *****${normal}"
			echo "${bold}${cyan}*****       libraries, and documentation       *****${normal}"
			echo "${bold}${cyan}*****           to proper locations.           *****${normal}"
			echo
			#Location of created executable --> /usr/local/bin/
			sudo cmake --install .
			wait $!
			# sudo make install
		fi
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Verifying if Drawpile Compiled Successfully . . . *****${normal}"
	echo
	drawpile_compile_verification_function
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
}
#---------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------

if [[ -e "/usr/local/bin/drawpile-srv" || -e "/usr/bin/drawpile-srv" ]] || [[ -e "/usr/local/bin/drawpile" || -e "/usr/bin/drawpile" ]]; then
	echo
	echo "${bold}${cyan}*****     Located Drawpile on System . . .    *****${normal}"
	echo "${bold}${cyan}***** Testing if compiling is necessary . . . *****${normal}"
	echo
	# If Drawpile server or client exists, then read file to check build configuration and test that it is up to date.
	read_stored_build_value_query_1=$( grep -m 1 "drawpile_build_configuration = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
	drawpile_build_configuration=$read_stored_build_value_query_1
	if [ ! -z "$read_stored_build_value_query_1" ] || [ "$read_stored_build_value_query_1" != "=" ]; then
		skip_build_checks=1
		# If value read from file is not null or the equal sign, verify it compiled properly.
		if [ "$drawpile_build_configuration" == "1" ] || [ "$drawpile_build_configuration" == "2" ]; then
			# 1 - Server - Graphical User Interface (GUI)															sudo cmake .. -DINITSYS=systemd -DCLIENT=OFF -DTOOLS=on
			# 2 - Server - Non-GUI (also known as headless)															sudo cmake .. -DINITSYS=systemd -DCLIENT=OFF -DSERVERGUI=off -DTOOLS=on
			drawpile_srv_compile_verification_function
			drawpile_dprectool_compile_verification_function
			echo
			if [[ -z "$dp_compile_check_bypass" || "$dp_compile_check_bypass" == "true" ]]; then
				# If compiled, skip action and continue on with script setup. If failure, attempt compiling again.
				if [ "$drawpile_srv_compile_verification" == "1" ]; then
					echo "${bold}${green}Drawpile Server successfully built.${normal}"
					echo
					echo "${bold}${green}Skipping compiling step.${normal}"
					echo
					echo '--------------------------------------------------------------------------------'
					echo '--------------------------------------------------------------------------------'
				elif [ "$drawpile_srv_compile_verification" == "0" ]; then
					echo "${bold}${cyan}*****   Drawpile is using old version . . .   *****${normal}"
					echo "${bold}${cyan}*****     Will run compiling options . . .    *****${normal}"
					
					drawpile_build_and_compile_function
				else
					echo "${bold}${red}This message should not be visible for skipping compiling check."
				fi
			else
				# if [[ "$dp_compile_check_bypass" == "false" ]]; then
				echo "${bold}${yellow}*****        Forced Compile Mode . . .        *****${normal}"
				echo "${bold}${yellow}*****     Will run compiling options . . .    *****${normal}"
				
				drawpile_build_and_compile_function
			fi
		elif [ "$drawpile_build_configuration" == "3" ] || [ "$drawpile_build_configuration" == "4" ] || [ "$drawpile_build_configuration" == "5" ] || [ "$drawpile_build_configuration" == "6" ]; then
			# 3 - Server And Client - GUI server, client, Wacom Tablet drivers, dprectool, and drawpile-cmd tool		sudo cmake .. -DINITSYS=systemd -DTOOLS=on												--> sudo $package_install_program libwacom-bin libwacom-common libwacom-dev libwacom2 libwacom2-dbg xserver-xorg-input-wacom
			# 4 - Server And Client - GUI server, client, dprectool, and drawpile-cmd tool							sudo cmake .. -DINITSYS=systemd -DTOOLS=on -DCMAKE_BUILD_TYPE=release
			# 5 - Server And Client - GUI Server, debugging client, dprectool, and drawpile-cmd tool					sudo cmake .. -DINITSYS=systemd -DTOOLS=on -DCMAKE_BUILD_TYPE=debug
			# 6 - Server And Client - Headless server, debugging client, dprectool, and drawpile-cmd tool				sudo cmake .. -DINITSYS=systemd -DTOOLS=on -DCMAKE_BUILD_TYPE=debug -DSERVERGUI=off
			drawpile_srv_compile_verification_function
			drawpile_client_compile_verification_function
			drawpile_tools_compile_verification_function
			echo
			# If compiled, skip action and continue on with script setup.
			
			if [[ -z "$dp_compile_check_bypass" || "$dp_compile_check_bypass" == "true" ]]; then
				if [ "$drawpile_srv_compile_verification" == "1" ] && [ "$drawpile_client_compile_verification" == "1" ]; then
					echo "${bold}${green}Drawpile Client and Server successfully built.${normal}"
					echo
					echo "${bold}${green}Skipping compiling step.${normal}"
					echo
					echo '--------------------------------------------------------------------------------'
					echo '--------------------------------------------------------------------------------'
				elif [ "$drawpile_srv_compile_verification" == "0" ] || [ "$drawpile_client_compile_verification" == "0" ]; then
					echo "${bold}${cyan}*****   Drawpile is using old version . . .   *****${normal}"
					echo "${bold}${cyan}*****     Will run compiling options . . .    *****${normal}"
					
					drawpile_build_and_compile_function
				else
					echo "${bold}${red}This message should not be visible for skipping compiling check."
				fi
			else
				# if [[ "$dp_compile_check_bypass" == "false" ]]; then
				echo "${bold}${yellow}*****        Forced Compile Mode . . .        *****${normal}"
				echo "${bold}${yellow}*****     Will run compiling options . . .    *****${normal}"
				
				drawpile_build_and_compile_function
			fi
		elif [ "$drawpile_build_configuration" == "9" ] || [ "$drawpile_build_configuration" == "10" ]; then
			# 9 - Server - Graphical User Interface (GUI) WARNING NO SERVER CONFIGURATION							sudo cmake .. -DINITSYS=systemd -DCLIENT=OFF -DTOOLS=on
			# 10 - Server - Non-GUI (also known as headless) WARNING NO SERVER CONFIGURATION						sudo cmake .. -DINITSYS=systemd -DCLIENT=OFF -DSERVERGUI=off -DTOOLS=on
			skip_build_checks=0
			drawpile_srv_compile_verification_function
			drawpile_dprectool_compile_verification_function
			
			if [[ -z "$dp_compile_check_bypass" || "$dp_compile_check_bypass" == "true" ]]; then
				# If compiled, skip action and continue on with script exit. If failure, attempt compiling again.
				if [ "$drawpile_srv_compile_verification" == "1" ]; then
					echo "${bold}${green}Drawpile Server successfully built.${normal}"
					echo
					echo "${bold}${green}Skipping compiling step.${normal}"
					echo
					echo '--------------------------------------------------------------------------------'
					echo '--------------------------------------------------------------------------------'
				elif [ "$drawpile_srv_compile_verification" == "0" ]; then
					echo "${bold}${cyan}*****   Drawpile is using old version . . .   *****${normal}"
					echo "${bold}${cyan}*****     Will run compiling options . . .    *****${normal}"
					
					drawpile_build_and_compile_function
				else
					echo "${bold}${red}This message should not be visible for skipping compiling check."
				fi
			else
				# if [[ "$dp_compile_check_bypass" == "false" ]]; then
				echo "${bold}${yellow}*****        Forced Compile Mode . . .        *****${normal}"
				echo "${bold}${yellow}*****     Will run compiling options . . .    *****${normal}"
				
				drawpile_build_and_compile_function
			fi

			drawpile_srv_compile_verification_stored_result=1
			sudo sed -i '\!^drawpile_srv_compile_verification_stored_result =!{h;s!=.*!= '"$drawpile_srv_compile_verification_stored_result"'!};${x;\!^$!{s!!drawpile_srv_compile_verification_stored_result = '"$drawpile_srv_compile_verification_stored_result"'!;H};x}' $drawpile_configuration_values_file
			# The sort command used at the end sorts the list alphabetically.
			sudo sort $app_installation_status_file -o $app_installation_status_file
			# This removes any duplicates that may exist in the file.
			perl -i -ne 'print if ! $a{$_}++' $app_installation_status_file
			perl -i -ne 'print if ! $a{$_}++' $app_installation_status_file
			# sudo sort $drawpile_configuration_values_file -o $drawpile_configuration_values_file
			sudo sed -i '\!^drawpile_script_completed =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!drawpile_script_completed = '"yes"'!;H};x}' $drawpile_configuration_values_file
			echo
			echo "Exiting script in 30 seconds since no further"
			echo "configuration is required."
			echo
			sleep 30
			exit
		else
			echo "${red}${bold}Some error occurred in the script. (Check if built and up to date already) ${normal}"
			echo "${red}${bold}This message should not be visible.${normal}"
			drawpile_build_and_compile_function
		fi
	else
		# Continue to build Drawpile, build configuration value is null or equal sign.
		skip_build_checks=0
		drawpile_build_and_compile_function
	fi
	# sudo sed -i '\!^skip_build_checks =!{h;s!=.*!= '"$skip_build_checks"'!};${x;\!^$!{s!!skip_build_checks = '"$skip_build_checks"'!;H};x}' $drawpile_configuration_values_file
else
	# Continue to build Drawpile, hasn't compiled yet.
	skip_build_checks=0
	drawpile_build_and_compile_function
fi

#---------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------
echo
echo "${bold}${green}*****      Drawpile is Compiled . . .      *****${normal}"
echo "${bold}${green}***** Setting location of executable . . . *****${normal}"

drawpile_srv_compile_verification_stored_result=1
sudo sed -i '\!^drawpile_srv_compile_verification_stored_result =!{h;s!=.*!= '"$drawpile_srv_compile_verification_stored_result"'!};${x;\!^$!{s!!drawpile_srv_compile_verification_stored_result = '"$drawpile_srv_compile_verification_stored_result"'!;H};x}' $drawpile_configuration_values_file

#location_created_executable_dpsrv=$( grep -m 1 "location_created_executable_dpsrv = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
#if [ -z "$location_created_executable_dpsrv" ] || [ "$location_created_executable_dpsrv" = "=" ]; then
	if [[ -e  "/usr/local/bin/drawpile-srv" ]]; then
		location_created_executable_dpsrv=/usr/local/bin/drawpile-srv
	elif [[ -e  "/usr/bin/drawpile-srv" ]]; then
		location_created_executable_dpsrv=/usr/bin/drawpile-srv
	else
			echo "Was unable to determine location of created executable."
			echo "This will cause issues with the script."
			echo
			sleep 30
			exit
	fi
	#sudo sed -i '\!^location_created_executable_dpsrv =!{h;s!=.*!= '"$location_created_executable_dpsrv"'!};${x;\!^$!{s!!location_created_executable_dpsrv = '"$location_created_executable_dpsrv"'!;H};x}' $drawpile_configuration_values_file
	echo
#fi
drawpile_client_shortcut_function
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}***** Checking for SELinux to see if configuration is *****${normal}"
echo "${bold}${cyan}*****      required to allow communication . . .       *****${normal}"
echo

<<comment_EOF
selinux_status=$( getenforce 2>/dev/null )
selinux_available_check=$?

# echo "Available:		$selinux_available_check"
# echo "SELinux Current Status:	$selinux_status"

if [ "$selinux_available_check" -eq "0" ]; then
	# SELinux installed.
	if [ "$selinux_status" == "Disabled" ]; then
		echo "SELinux status is: Disabled."
		echo "No action is required. However, if you enable it in the future,"
		echo "it will cause drawpile-srv to not function as intended."
		echo
		sleep 10
	else
		selinux_config_status=$( sestatus 2>/dev/null | grep -i "Mode from config file:" | awk '{ print $5 }' )
		# echo "SELinux Config Status:	$selinux_config_status"
		# echo
		if [ "${selinux_status,,}" == "${selinux_config_status,,}" ]; then
			echo "SELinux status is not temporarily changed."
			if [ "$selinux_status" == "Enforcing" ]; then
				echo "SELinux status is: Enforcing"
				echo
				echo "Action required to ensure the server works."
			elif [ "$selinux_status" == "Permissive" ]; then
				echo "SELinux status is: Permissive."
				echo
				echo "No action is required."
			else
				echo "This message for SELinux status (1) should not be visible."
			fi
		elif [ "${selinux_status,,}" != "${selinux_config_status,,}" ]; then
			echo "SELinux status is temporarily changed."
			if [ "$selinux_status" == "Enforcing" ] && [ "$selinux_config_status" == "permissive" ]; then
				echo "SELinux status is: Enforcing"
				echo
				echo "However, on system reboot the status will return to permissive."
				echo "No action is required. It is recommended that you reboot when"
				echo "the script is completed or turn it back to permissive mode with"
				echo "the following command:"
				echo "     sudo setenforce 0"
				echo
				pause
				echo
			elif [ "$selinux_status" == "Permissive" ] && [ "$selinux_config_status" == "enforcing" ]; then
				echo "SELinux status is: Permissive."
				echo
				echo "However, on system reboot the status will return to enforcing."
				echo "Action required to ensure the server works on reboot."
			else
				echo "This message for SELinux status (2) should not be visible."
			fi
		else
			echo "This message for SELinux temporary status should not be visible."
		fi
	fi
elif [ "$selinux_available_check" -eq "127" ]; then
	# SELinux is not available. No action required.
	:
else
	echo "This message for SELinux check should not be visible."
fi
comment_EOF

<<comment_EOF
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && [ "$what_fedora_variant" == "VARIANT_ID=workstation" ]; then
	echo Fedora Workstation, adding firewall rules.
	sudo firewall-cmd --zone=FedoraWorkstation --permanent --add-port=27750/tcp
	sudo firewall-cmd --zone=FedoraWorkstation --permanent --add-port=27780/tcp
	# sudo firewall-cmd --zone=FedoraWorkstation --permanent --add-port=27750/udp
	# sudo firewall-cmd --zone=FedoraWorkstation --permanent --add-port=27780/udp
	sudo firewall-cmd --zone=FedoraWorkstation --permanent --add-service=http
	sudo firewall-cmd --zone=FedoraWorkstation --permanent --add-service=https
	sudo firewall-cmd --reload
	echo
	echo Fedora Workstation, adding SELinux access to /var/www/html.
	# Useful notes for trying to figure out why NGINX doesn't work. u3u
	# sudo ausearch -m avc -ts today | audit2allow
	# sudo cat /var/log/nginx/error.log
	
	# Needed so NGINX can access the directory
	sudo semanage fcontext -a -t httpd_sys_rw_content_t "/var/www/html/(/.*)?"
	sudo semanage port -a -t http_port_t -p tcp 27750
	sudo semanage port -a -t http_port_t -p tcp 27780
	
	sudo setsebool -P httpd_can_network_relay 1
elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && [ "$what_fedora_variant" == "VARIANT_ID=server" ]; then
	echo Fedora Server, adding firewall rules.
	sudo firewall-cmd --zone=FedoraServer --permanent --add-port=27750/tcp
	sudo firewall-cmd --zone=FedoraServer --permanent --add-port=27780/tcp
	# sudo firewall-cmd --zone=FedoraServer --permanent --add-port=27750/udp
	# sudo firewall-cmd --zone=FedoraServer --permanent --add-port=27780/udp
	sudo firewall-cmd --zone=FedoraServer --permanent --add-service=http
	sudo firewall-cmd --zone=FedoraServer --permanent --add-service=https
	sudo firewall-cmd --reload
	echo
	echo Fedora Server, adding SELinux access to /var/www/html.
	# Useful notes for trying to figure out why NGINX doesn't work. u3u
	# sudo ausearch -m avc -ts today | audit2allow
	# sudo cat /var/log/nginx/error.log
	
	# Needed so NGINX can access the directory
	sudo semanage fcontext -a -t httpd_sys_rw_content_t "/var/www/html/(/.*)?"
	sudo semanage port -a -t http_port_t -p tcp 27750
	sudo semanage port -a -t http_port_t -p tcp 27780
	
	sudo setsebool -P httpd_can_network_relay 1
elif [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	:
else
	echo This message should not be visible for Fedora Firewall Rules
fi
comment_EOF

function selinux_adjustments_function () {
	# Useful notes for trying to figure out why NGINX doesn't work. u3u
	# sudo ausearch -m avc -ts today | audit2allow
	# sudo cat /var/log/nginx/error.log
	
	echo "${bold}${cyan}Needed so NGINX can access the directory${normal}"
	echo 'sudo semanage fcontext -a -t httpd_sys_rw_content_t "/var/www/html/(/.*)?"'
	sudo semanage fcontext -a -t httpd_sys_rw_content_t "/var/www/html/(/.*)?"
	echo
	echo "${bold}${cyan}Used for Drawpile-srv${normal}"
	echo "sudo semanage port -a -t http_port_t -p tcp 27750"
	sudo semanage port -a -t http_port_t -p tcp 27750
	
	if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]]; then
		echo
		echo "${bold}${cyan}Used for Drawpile-srv to allow web version${normal}"
		echo "sudo semanage port -a -t http_port_t -p tcp 27751"
		sudo semanage port -a -t http_port_t -p tcp 27751
	fi
	echo
	echo "${bold}${cyan}Used for Drawpile-srv for web admin.${normal}"
	echo "sudo semanage port -a -t http_port_t -p tcp 27780"
	sudo semanage port -a -t http_port_t -p tcp 27780
	echo
	echo "${bold}${cyan}Believe it is used for accessing data on local host.${normal}"
	echo "sudo setsebool -P httpd_can_network_relay 1"
	sudo setsebool -P httpd_can_network_relay 1
}

selinux_status=$( getenforce 2>/dev/null )
selinux_available_check=$?

# echo "Available:		$selinux_available_check"
# echo "SELinux Current Status:	$selinux_status"

if [ "$selinux_available_check" -eq "0" ]; then
	# SELinux installed.
	if [ "$selinux_status" == "Disabled" ]; then
		echo "${bold}${green}SELinux status is: Disabled.${normal}"
		echo "No action is required. However, if you enable it in the future,"
		echo "it will cause drawpile-srv to not function as intended."
		echo
		sleep 10
	else
		selinux_config_status=$( sestatus 2>/dev/null | grep -i "Mode from config file:" | awk '{ print $5 }' )
		# echo "SELinux Config Status:	$selinux_config_status"
		# echo
		if [ "${selinux_status,,}" == "${selinux_config_status,,}" ]; then
			echo "${bold}${green}SELinux status is not temporarily changed.${normal}"
			if [ "$selinux_status" == "Enforcing" ]; then
				echo "${bold}${yellow}SELinux status is: Enforcing${normal}"
				echo
				echo "${bold}${yellow}Action required to ensure the server works.${normal}"
				echo
				echo '-------------------------------------------'				
				echo 
				selinux_adjustments_function
				echo
				sleep 10
			elif [ "$selinux_status" == "Permissive" ]; then
				echo "${bold}${green}SELinux status is: Permissive.${normal}"
				echo
				echo "No action is required."
				echo
			sleep 10
			else
				echo "${bold}${red}This message for SELinux status (1) should not be visible.${normal}"
			fi
		elif [ "${selinux_status,,}" != "${selinux_config_status,,}" ]; then
			echo "${bold}${yellow}SELinux status is temporarily changed.${normal}"
			if [ "$selinux_status" == "Enforcing" ] && [ "$selinux_config_status" == "permissive" ]; then
				echo "${bold}${yellow}SELinux status is: Enforcing${normal}"
				echo
				echo "However, on system reboot the status will return to permissive."
				echo "No action is required. It is recommended that you reboot when"
				echo "the script is completed or turn it back to permissive mode with"
				echo "the following command:"
				echo "     sudo setenforce 0"
				echo
				pause
				echo
			elif [ "$selinux_status" == "Permissive" ] && [ "$selinux_config_status" == "enforcing" ]; then
				echo "${bold}${yellow}SELinux status is: Permissive.${normal}"
				echo
				echo "However, on system reboot the status will return to enforcing."
				echo "Action required to ensure the server works on reboot."
				echo
				echo '-------------------------------------------'				
				echo
				selinux_adjustments_function
				echo
				sleep 10
			else
				echo "${bold}${red}This message for SELinux status (2) should not be visible.${normal}"
				echo
			sleep 10
			fi
		else
			echo "${bold}${red}This message for SELinux temporary status should not be visible.${normal}"
			echo
			sleep 10
		fi
	fi
elif [ "$selinux_available_check" -eq "127" ]; then
	echo "${bold}${green}SELinux is not available. No action required.${normal}"
	echo
	sleep 10
else
	echo "${bold}${red}This message for SELinux check should not be visible.${normal}"
	echo
	sleep 10
fi
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}***** Checking for Firewall to see if configuration is *****${normal}"
echo "${bold}${cyan}*****      required to allow communication . . .       *****${normal}"
echo

function firewall_cmd_adjustments_function () {
	firewall_zone_name=$( sudo firewall-cmd --list-all | sed -n '1 p' | awk '{ print $1 }' )
	
	echo "sudo firewall-cmd --zone=$firewall_zone_name --permanent --add-port=27750/tcp"
	sudo firewall-cmd --zone=$firewall_zone_name --permanent --add-port=27750/tcp
	echo
	echo "sudo firewall-cmd --zone=$firewall_zone_name --permanent --add-port=27780/tcp"
	sudo firewall-cmd --zone=$firewall_zone_name --permanent --add-port=27780/tcp
	echo
	# sudo firewall-cmd --zone=$firewall_zone_name --permanent --add-port=27750/udp
	# sudo firewall-cmd --zone=$firewall_zone_name --permanent --add-port=27780/udp
	
	echo "sudo firewall-cmd --zone=$firewall_zone_name --permanent --add-service=http"
	sudo firewall-cmd --zone=$firewall_zone_name --permanent --add-service=http
	echo
	echo "sudo firewall-cmd --zone=$firewall_zone_name --permanent --add-service=https"
	sudo firewall-cmd --zone=$firewall_zone_name --permanent --add-service=https
	echo
	echo "sudo firewall-cmd --reload"
	sudo firewall-cmd --reload
}

firewall_cmd_status=$( sudo firewall-cmd --state 2>/dev/null )
firewall_cmd_available_check=$?

# echo Check: $firewall_cmd_available_check

if [ "$firewall_cmd_available_check" -eq "0" ] || [ "$firewall_cmd_available_check" -eq "252" ] || [ "$firewall_cmd_available_check" -ne "1" ]; then
	# 0 is running, 252 is not running.
	# echo State: $firewall_cmd_status
	echo "${bold}${yellow}Firewall-cmd installed.${normal}"
	
	if firewall-cmd --state >/dev/null 2>&1; then
		echo "${bold}${yellow}Firewall-cmd is running currently.${normal}"
		echo
		echo "${bold}${yellow}Action required to ensure the server works.${normal}"
		echo
		echo '-------------------------------------------'				
		echo
		firewall_cmd_adjustments_function
		echo
		sleep 10
	else
		echo "${bold}${green}Firewall-cmd is not running currently.${normal}"
		echo
		echo "${bold}${yellow}Action required to ensure the server works if enabled.${normal}"
		echo
		echo '-------------------------------------------'				
		echo
		sudo systemctl start --now firewalld.service
		echo
		firewall_cmd_adjustments_function
		echo
		sudo systemctl stop --now firewalld.service

		sleep 10
	fi

<<comment_EOF_delete
	# This section is being retired because I apparently can't be sure it'll run
	if [ "$firewall_cmd_status" == "running" ]; then
		echo "${bold}${yellow}Firewall-cmd is running currently.${normal}"
		echo
		echo "${bold}${yellow}Action required to ensure the server works.${normal}"
		echo
		echo '-------------------------------------------'				
		echo
		firewall_cmd_adjustments_function
		echo
		sleep 10
	elif [ "$firewall_cmd_status" == "not running" ]; then
		echo "${bold}${green}Firewall-cmd is not running currently.${normal}"
		echo
		echo "${bold}${yellow}Action required to ensure the server works if enabled.${normal}"
		echo
		echo '-------------------------------------------'				
		echo
		firewall_cmd_adjustments_function
		echo
		sleep 10
	else
		echo "${bold}${red}This message should not be visible for firewall-cmd status.${normal}"
		echo
		sleep 10
	fi
comment_EOF_delete

elif [ "$firewall_cmd_available_check" -eq "1" ]; then
	echo "${bold}${green}Firewall_cmd is not available. No action required.${normal}"
	# sleep 10
else
	echo "${bold}${red}This message for Firewall_cmd check should not be visible.${normal}"
	sleep 10
fi
echo
echo "${bold}${cyan}--------------------------------------------------------------------------------${normal}"
echo "${bold}${cyan}--------------------------------------------------------------------------------${normal}"
echo "              ${bold}${cyan}***** Now setting up startup configuration . . .*****${normal}"
echo "${bold}${cyan}--------------------------------------------------------------------------------${normal}"
echo "${bold}${cyan}--------------------------------------------------------------------------------${normal}"
echo
echo "${bold}${cyan}***** This stage is for setting up an easy-to-remember *****${normal}"
echo "${bold}${cyan}*****        way to connect to your server . . .       *****${normal}"
echo 
variable_to_read_1="dns_choice"
variable_to_read_2=""
variable_to_read_3=""


value_description_1="This value is for keeping your hostname and IP address synchronized."
value_description_2=" "
value_description_3="1 for freeDNS.afraid.org"
value_description_4="2 for No-IP"
value_description_5="3 for DuckDNS"
value_description_6=" "
value_description_7="9 for no DNS update service."

read_stored_config_value_query_function

if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	dns_choice=$read_stored_config_value_query_1
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	echo "This step is primarily intended for small servers ran from home with a dynamic IP address"
	echo "which may change without notice, as these have options to automatically update the IP address"
	echo "with the service. FreeDNS.afraid.org, No-IP, and DuckDNS are great options for low cost servers"
	echo "to run from home. However, a paid hostname option will allow for greater security and versatility"
	echo "with server settings."
	echo
	echo "${underline}https://freedns.afraid.org/${normal}"
	echo "${bold}Pros:${normal} Free registration, renew hostname every six months."
	echo "${bold}Cons:${normal} Minor additional setup with script guided help required, guided setup."
	echo '      If a typo is made, you must use crontab -e to update the code manually.'
	echo 
	echo "${underline}https://www.noip.com/${normal}"
	echo "${bold}Pros:${normal} Free registration, simple setup, only slightly less complex than above"
	echo '      option listed above.'
	echo "${bold}Cons:${normal} Must renew the hostname via notification received in email every 30 days"
	echo '      or lose access. Might not be able to get the same name back.'
	echo
	echo "${underline}https://www.duckdns.org/${normal}"
	echo "${bold}Pros:${normal} Free registration, simple setup, lots of configuration options available."
	echo '      can use your own domain name (read the FAQs page).'
	echo "${bold}Cons:${normal} Cannot detect IPv6 addresses as of September 2023."
	echo '      It must be manually specified for now.'
	echo
	echo "${underline}Note:${normal}"
	echo "      If you have purchased your own domain name, usually they will provide the ability to set"
	echo "      a DNS A-record for you. In which case, this step is not needed and can be safely skipped."
	echo "      Some services are listed below"
	echo "           https://porkbun.com/products/domains"
	echo "           https://domains.squarespace.com/"
	echo
	echo 'Do you want to use freeDNS.afraid.org, No-IP, DuckDNS, or skip this step?'
	echo
	echo 'Press 1 for freeDNS.afraid.org'
	echo 'Press 2 for No-IP'
	echo 'Press 3 for DuckDNS'
	echo
	echo 'Press 9 to skip this step.'
	echo
	while :; do
		read -r -p "${bold}${cyan}Enter a number and hit enter to continue:${normal} " dns_choice
		[[ $dns_choice =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $dns_choice >= 1 && $dns_choice <= 3 || $dns_choice == 9 )); then
			echo
			break
		else
			echo
			echo "Invalid number selection, try again."
			echo
			echo '--------------------------------------------------------------------------------'
			echo
		fi
	done
	
	if [ "$dns_choice" == "1" ]; then
		variable_to_read_1="freeDNS_input"
		variable_to_read_2=""
		variable_to_read_3=""
		
		value_description_1="A service to use with dynamic IP address,"
		value_description_2="as this ensures people can connect to your"
		value_description_3="server by updating your IP address to a hostname"
		value_description_4="that was set up with this service."

		read_stored_config_value_query_function
		if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
			echo "Storing value in script memory and moving on."
			freeDNS_input=$read_stored_config_value_query_1
		elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
			# Assuming value is being set for first time, this should be no. If changed to yes, SSL certs and SSL script should probably also be updated.
			crontab_change=1
			if sudo crontab -u root -l | grep '#Drawpile Hostname' > /dev/null 2>&1; then
				echo
				echo "${bold}${yellow}Crontab set up for FreeDNS.${normal}"
				echo "${bold}${yellow}Removing old info before adding new content.${normal}"
				crontab_change=yes
				sudo crontab -u root -l | grep -v '#Drawpile Hostname' | sudo crontab -u root -
				echo
			else
				:
				# echo No crontab, sadge. Adding in crontab jerb.
			fi
			echo
			echo "${bold}${cyan}*****Setting up FreeDNS.afraid.org cronjob for auto update of IP . . . *****${normal}"
			echo 
			echo 'Requirements: Register an account, go to Subdomains option on the left,'
			echo 'select option Add a subdomain. Leave Type set to A, set any desired subdomain'
			echo 'name that you wish to use. Domain options are listed in the dropbox, you can '
			echo 'pick Many many more available in order to search for domain names you like '
			echo 'that are listed as Public. Click the link Shared Domain Registry and search '
			echo 'for a desired domain. Once you find a name you like, click on the link on the'
			echo 'left. Leave the fields Destination, TTL, and Wildcard as they currently are... '
			echo 'and fill in the Captcha that everyone loves and hates.'
			echo
			echo 'Click on Dynamic DNS on the left, then go to dynamic update interface'
			echo 'hyperlink at the top of the page, should say (version 2) beside it. Click '
			echo 'the checkbox beside your hostname, click Apply below that where the option to '
			echo 'the left should read: Action: Enable Dynamic DNS... . Then click cron script'
			echo 'on the gray table to the right of your registered hostname.'
			echo
			echo 'Copy only the very bottom line of the page and paste here.'
			echo 'Press Ctrl + Shift + V to paste.'
			echo 'That is everything which appears after this line ... '
			echo 'PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin'
			echo
			regexp=".*[[:space:]]*[[:space:]]*[[:space:]]*[[:space:]]*[[:space:]]sleep[[:space:]].*[[:space:]];[[:space:]]curl[[:space:]]-s[[:space:]]http://sync.afraid.org/u/.*/[[:space:]]>>[[:space:]]/tmp/freedns_.*log[[:space:]].*>"
			while :; do
				echo "${bold}${cyan}Enter the requested information now${normal}:"
				read freeDNS_input
				if [[ "$freeDNS_input" =~ $regexp ]]; then
					break
				else
					echo
					echo "${bold}${red}Invalid information entered, try again.${normal}"
					echo "${bold}${red}Was expecting 'something' + 'http://sync.afraid.org' + 'something' + '2>/dev/null'${normal}"
					echo
					echo 'Copy only the very bottom line of the page and paste in terminal (Ctrl + Shift + V).'
					echo 'That is everything which appears after this line ... '
					echo 'PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin'
					echo
					echo ----------------------------------------------------------------------------------
					echo
				fi
			done
			
			# This line below removes any existing copies of this line to prevent duplicates. This could be done in a variety of ways. 
			# 
			# crontab -u $USER -l | grep -v 'http://sync.afraid.org' | grep -v 'PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin' | crontab -u $USER -
			# crontab -u $USER -l | grep -v 'PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin #Drawpile Hostname' | grep -v 'http://sync.afraid.org' | crontab -u $USER -
			# 
			# It first displays output, then selects inverse lines that don't match the query for two lines, and saves this info to crontab to preserve other entries.
			# The line below simply looks for a comment and removes the line to ensure only removing intended lines.
			# 
			# crontab -u $USER -l | grep -v '#Drawpile Hostname' | crontab -u $USER -
			# 
			# You can check the "/tmp/freedns_YOUR-HOSTNAME.log" file on your system to verify update checks are happening every 5 minutes
			# 
			# echo "Removing duplicate entries, may have small error message that follows:"
			# crontab -u $USERNAME -l | grep -v '#Drawpile Hostname' | crontab -u $USERNAME -

			(sudo crontab -l -u root 2>>/dev/null; echo "PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin #Drawpile Hostname
$freeDNS_input #Drawpile Hostname") | sudo crontab -u root -
			# (sudo crontab -l -u root 2>>/dev/null; echo "PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin #Drawpile Hostname
# $freeDNS_input #Drawpile Hostname") | sudo crontab -u root -
			sudo sed -i '\!^freeDNS_input =!{h;s!=.*!= '"$freeDNS_input"'!};${x;\!^$!{s!!freeDNS_input = '"$freeDNS_input"'!;H};x}' $drawpile_configuration_values_file
			sudo sed -i '\!^freeDNS =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!freeDNS = '"yes"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^NoIP =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!NoIP = '"no"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^DuckDNS =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!DuckDNS = '"no"'!;H};x}' $app_installation_status_file
		else
			echo "This message should not be visible."
		fi
	elif [ "$dns_choice" == "2" ]; then
		echo
		echo "${bold}${cyan}***** Installing No-IP Service . . . *****${normal}"
		echo 
		cd "$dp_install_loc/Programs" || { echo "Failure to change directory, exiting script in 30 seconds."; sleep 30; exit 1; }
		sudo mkdir -p -v noip
		cd "$dp_install_loc/Programs/noip" || { echo "Failure to change directory, exiting script in 30 seconds."; sleep 30; exit 1; }
		sudo $wget_or_wget2_quiet_progress https://www.noip.com/client/linux/noip-duc-linux.tar.gz
		sudo tar vzxf noip-duc-linux.tar.gz
		cd noip-2.1.9-1
		cd "$dp_install_loc/Programs/noip/noip-2.1.9-1" || { echo "Failure to change directory, exiting script in 30 seconds."; sleep 30; exit 1; }
		sudo make
		sudo sed -i '\!^freeDNS =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!freeDNS = '"no"'!;H};x}' $app_installation_status_file
		sudo sed -i '\!^NoIP =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!NoIP = '"yes"'!;H};x}' $app_installation_status_file
		sudo sed -i '\!^DuckDNS =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!DuckDNS = '"no"'!;H};x}' $app_installation_status_file
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${cyan}*****Setting up NoIP account for auto update of IP . . . *****${normal}"
		echo
		echo "${bold}${cyan}Website:${normal} https://www.noip.com/"
		echo
		echo "${bold}${cyan}Requirements:${normal} Once logged in, you should be looking at the dashboard. You will "
		echo 'know if the hyperlink at the top is https://my.noip.com/#!/. Just type'
		echo 'your desired hostname and choose a domain drop down that you like. from the '
		echo 'Free Domains options. Click the button Add Hostname. You will just need your '
		echo 'username and password to set this up.'
		echo
		echo 'If using the classic site, click Add Host on the left. Type in your Hostname,'
		echo 'and choose a domain on the right from the list of No-IP Free Domains. Make '
		echo 'sure the host type is set to DNS Host (A). For IP Address, open a new tab'
		echo 'and go to www.whatismyip.com to get your IP and put it in this field. Leave '
		echo 'other options at default values and click Add Host.'
		echo
		echo 'You will be prompted to login with your No-IP account username and password.' 
		echo 'After logging into the DUC program, answer the questions to proceed. When asked' 
		echo 'how often you want the update to happen you must choose 5 or more. The interval'
		echo 'is listed in minutes, if you choose 5 the update interval will be 5 minutes.'
		echo 'If you choose 30 the interval will be 30 minutes.'
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		sudo make install
		# sudo $location_created_noip2_executable/noip2
		# echo 'Confirming service is working properly...'
		# sudo noip2 -S
		# Read install process here --> http://www.noip.com/support/knowledgebase/install-ip-duc-onto-raspberry-pi/
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${yellow}If you made a typo when putting in your password for no IP, simply${normal}"
		echo "${bold}${yellow}type the following:${normal}"
		echo
		echo 'noip2 -C -c /usr/local/etc/no-ip2.conf'
		echo
		sleep 5
	elif [ "$dns_choice" == "3" ]; then
		variable_to_read_1="DuckDNS_input"
		variable_to_read_2=""
		variable_to_read_3=""
		
		value_description_1="A service to use with dynamic IP address,"
		value_description_2="as this ensures people can connect to your"
		value_description_3="server by updating your IP address to a hostname"
		value_description_4="that was set up with this service."
		value_description_5=""

		read_stored_config_value_query_function
		if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
			echo "Storing value in script memory and moving on."
			DuckDNS_input=$read_stored_config_value_query_1
		elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
			# Assuming value is being set for first time, this should be no. If changed to yes, SSL certs and SSL script should probably also be updated.
			crontab_change=1
			if sudo crontab -u root -l | grep '#Drawpile Hostname' > /dev/null 2>&1; then
				echo
				echo "${bold}${yellow}Crontab set up for DuckDNS.${normal}"
				echo "${bold}${yellow}Removing old info before adding new content.${normal}"
				crontab_change=yes
				sudo crontab -u root -l | grep -v '#Drawpile Hostname' | sudo crontab -u root -
				echo
			else
				:
				# echo No crontab, sadge. Adding in crontab jerb.
			fi
			echo "${bold}${cyan}*****Setting up DuckDNS.org cronjob for auto update of IP . . . *****${normal}"
			echo 
			echo 'Requirements: Sign in using an existing account (Persona, Twitter, Github,'
			echo 'or Google).'
			echo
			echo 'Pick a name that you wish to use and click "add domain". Go to Google and '
			echo 'search "what is my IP", if you get an IPv6 address, update it on DuckDNS. '
			echo 'Your hostname will be something like: hostname-example.duckdns.org'
			echo 'That full address will need to be provided after this step is complete.'
			echo
			echo 'Click "install" (or use right click, open in new tab). At the bottom where '
			echo 'it says "first step - choose a domain.", click on the down box and select '
			echo 'your domain name. Back at the top under "Operating Systems", select the'
			echo 'option called "linux cron".'
			echo
			echo 'Scroll down to the fourth code box with the following text just above it:'
			echo '     hit ESC then use use arrow keys to move the cursor x deletes, i puts'
			echo '     you back into insert mode'
			echo
			echo 'Select the first part leading up to, but not including, the pipe symbol. '
			echo 'The pipe symbol is a vertical line --> |'
			echo
			echo 'The information copied should look something like this:'
			echo '     echo url="https://www.duckdns.org/update?domains=exampledomain&token=a7c4d0ad-114e-40ef-ba1d-d217904a50f2&ip="'
			# echo "     'echo url=\"https://www.duckdns.org/update?domains=' + name + '&token=' + random numbers + '&ip=\"'"
			echo
			echo 'Copy that and paste it into the script below.'
			echo
			regexp="echo[[:space:]]url=\"https://www.duckdns.org/update\?domains=.*\&token=.*\&ip=\""
			while :; do
				echo "${bold}${cyan}Enter the requested information now${normal}:"
				read DuckDNS_input
				if [[ "$DuckDNS_input" =~ $regexp ]] && [[ "$DuckDNS_input" != *" |"* ]]; then
					break
				else
					echo
					echo ----------------------------------------------------------------------------------
					echo
					echo "${bold}${red}Invalid information entered, try again. Was expecting the following:${normal}"
					echo "     'echo url=\"https://www.duckdns.org/update?domains=' + name + '&token=' + random numbers + '&ip=\"'"
					echo
					echo 'Copy only the part mentioned above.'
					echo
				fi
			done
			sudo mkdir -p -v "/home/drawpileuser/duckdns"
			cat <<EOF | sudo tee /home/drawpileuser/duckdns/duck.sh >/dev/null
$DuckDNS_input | curl -k -o /home/drawpileuser/duckdns/duck.log -K -
EOF
			sudo chmod 700 /home/drawpileuser/duckdns/duck.sh
			(sudo crontab -l -u root 2>>/dev/null; echo "*/5 * * * * /home/drawpileuser/duckdns/duck.sh >/dev/null 2>&1 #Drawpile Hostname") | sudo crontab -u root -
			sudo sed -i '\!^DuckDNS_input =!{h;s!=.*!= '"$DuckDNS_input"'!};${x;\!^$!{s!!DuckDNS_input = '"$DuckDNS_input"'!;H};x}' $drawpile_configuration_values_file
			sudo sed -i '\!^freeDNS =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!freeDNS = '"no"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^NoIP =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!NoIP = '"no"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^DuckDNS =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!DuckDNS = '"yes"'!;H};x}' $app_installation_status_file
		else
			echo "This message should not be visible."
		fi
	elif [ "$dns_choice" == "9" ]; then
		echo 'No IP update service to be set up!'
		sudo sed -i '\!^freeDNS =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!freeDNS = '"no"'!;H};x}' $app_installation_status_file
		sudo sed -i '\!^NoIP =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!NoIP = '"no"'!;H};x}' $app_installation_status_file
		sudo sed -i '\!^DuckDNS =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!DuckDNS = '"no"'!;H};x}' $app_installation_status_file
	else
		echo "${bold}${red}Invalid option selected. No DNS IP update service${normal}"
		echo "${bold}${red}to be set up!${normal}"
		echo
		echo "Moving on . . ."
		dns_choice=9
		sudo sed -i '\!^freeDNS =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!freeDNS = '"no"'!;H};x}' $app_installation_status_file
		sudo sed -i '\!^NoIP =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!NoIP = '"no"'!;H};x}' $app_installation_status_file
		sudo sed -i '\!^DuckDNS =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!DuckDNS = '"no"'!;H};x}' $app_installation_status_file
	fi
	
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && [[ "$dns_choice" == "1" || "$dns_choice" == "3" ]]; then
		sudo systemctl enable crond.service
		sudo systemctl start --now crond.service
		sudo systemctl status crond.service --no-pager -l
	fi
	
	sudo sed -i '\!^dns_choice =!{h;s!=.*!= '"$dns_choice"'!};${x;\!^$!{s!!dns_choice = '"$dns_choice"'!;H};x}' $drawpile_configuration_values_file
else
	echo "This message should not be visible."
fi

<<comment_EOF
		if [[ -e  "/usr/local/bin/noip2" ]]; then
			location_created_noip2_executable=/usr/local/bin
		elif [[ -e  "/usr/bin/noip2" ]]; then
			location_created_noip2_executable=/usr/bin
		else
			echo Was unable to determine location of noip2 executable.
			echo This will cause issues with the script.
			echo
			sleep 30
			exit
		fi
comment_EOF
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}***** Configure Hostname for Server . . .*****${normal}"
echo
#---------------------------------------------------------------------------------------------------------------------------------
external_ip_4=$(curl -s ipv4.icanhazip.com)
external_ip_6=$(curl -s ipv6.icanhazip.com)
hostname_attempt=1
hostname_same_attempt=1

function dns_ip_check () {
	if [[ $hostname_1 = $hostname_2 ]] && [[ "$hostname_1" = "" ]] && [[ "$hostname_2" = "" ]]; then
		:
		# Do nothing as no error was detected, hostname was left blank.
		# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
	elif [[ $hostname_1 = $hostname_2 ]]; then
		dns_verification_4=$(host -4 $hostname_1)
		# dns_verification_6=$(host -6 $hostname_1)

		dns_verification_4_stripped=$(echo $dns_verification_4 | awk '{ print $4 }' )
		# dns_verification_6_stripped=$(echo $dns_choice_verification_6 | awk '{ print $4 }' )
	elif [[ $hostname_1 != $hostname_2 ]]; then
		# This is not a real address on purpose to speed up checking
		dns_verification_4=256.256.256.256
		# dns_verification_6=256.256.256.256
	else
		echo this message should not be visible for IP verification.
	fi
}

# Examples
# Valid output with -4
# example.beerprojects.com has address 12.34.56.78
#
# Output when the server/router doesn't appear to support IPv6.
# ;; connection timed out; no servers could be reached
#---------------------------------------------------------------------------------------------------------------------------------

variable_to_read_1="hostname"
variable_to_read_2=""
variable_to_read_3=""

value_description_1="This is the user friendly address used to connect."
value_description_2="When the value is 'no_value_selected', then no hostname"
value_description_3="is in use for this server. This is NOT RECOMMENDED."
value_description_4=""
value_description_5=""

read_stored_config_value_query_function
if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	hostname=$read_stored_config_value_query_1
	hostname_old=$read_stored_config_value_query_1
	hostname_new=hostname_new
	reused_hostname_selection=yes
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	reused_hostname_selection=no
	
	read_stored_config_value_query_hostname_1=$( grep -m 1 "hostname = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
	if [ -z "$read_stored_config_value_query_hostname_1" ] || [ "$read_stored_config_value_query_hostname_1" = "=" ]; then
		hostname_old=hostname_old
	else
		hostname_old=$read_stored_config_value_query_hostname_1
	fi

	if ! host -V > /dev/null 2>&1; then
		echo "Package bind9-host used with hostname verification."
		echo "Not installed, so installing package now ..."
		echo
		if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
			sudo $package_install_program bind9-host
		else
			# For Fedora systems.
			sudo $package_install_program bind9-next-utils
		fi
		echo
	fi	
	echo 'This script assumes you have a hostname, and it is required for'
	echo 'encrypted server connections to protect private conversations'
	echo 'and also to mask your Public IP address when connecting to the'
	echo 'server.'
	echo
	echo 'Make sure this is correctly typed both times before proceeding'
	echo 'with the script. If you do not enter it correctly, users will'
	echo 'not be able to connect to hosted sessions with the server using'
	echo 'encryption by SSL.'
	echo
	echo "${bold}Examples below:${normal}"
	echo "${underline}example.hostwebsite.com ${normal}"
	if [ "$dns_choice" == "2" ]; then
		echo "${underline}example.ddns.net ${normal}"
	elif [ "$dns_choice" == "3" ]; then
		echo "${underline}example.duckdns.org ${normal}"
	else
		echo "${underline}example.chickenkiller.com ${normal}"
	fi
	echo
	echo 'If you do not have one, simply leave it blank and hit enter'
	echo 'twice. However, it is highly recommended to have one. They '
	echo 'can be available for free or low cost and makes it easier for'
	echo 'users to connect to your server.'
	echo
	echo "${bold}Note:${normal} If you do make a mistake, you can always run"
	echo "Option ${underline}6 - Change all startup options.${normal} via the script"
	echo 'drawpile-server.sh later on.'
	echo
	read -r -p "${bold}${cyan}Please enter your hostname now:${normal}  " hostname_1
	read -r -p "${bold}${cyan}Please enter your hostname again:${normal} " hostname_2
	dns_ip_check

	while [[ $hostname_1 != $hostname_2 ]] || [[ $external_ip_4 != $dns_verification_4_stripped ]]
	do
		if [[ $hostname_1 = $hostname_2 ]] && [[ "$hostname_1" = "" ]] && [[ "$hostname_2" = "" ]]; then
			hostname_attempt=$((hostname_attempt+1))
			hostname_same_attempt=$((hostname_same_attempt+1))
			break
		else
			if [[ $hostname_1 != $hostname_2 ]]; then
				hostname_attempt=$((hostname_attempt+1))
				hostname_same_attempt=1
				echo
				echo "${bold}${red}Hostnames entered do not match!${normal}"
				echo
				read -r -p "${bold}${cyan}Enter hostname:${normal} " hostname_1
				read -r -p "${bold}${cyan}Enter hostname again:${normal} " hostname_2
			elif [[ $hostname_1 != *.* ]]; then
				echo
				echo "${bold}${red}Hostnames entered do not contain a proper suffix!${normal}"
				echo "${bold}${red}     e.g. .com, .net, .art, and so forth${normal}"
				echo
				read -r -p "${bold}${cyan}Enter hostname:${normal} " hostname_1
				read -r -p "${bold}${cyan}Enter hostname again:${normal} " hostname_2
			elif [[ $hostname_1 = $hostname_2 ]] && (( $hostname_same_attempt >= 2 )); then
				echo
				echo "${bold}${yellow}Hostnames entered match but not appear to point to this server's IPv4 address!${normal}"
				echo "${bold}${yellow}Please be sure that you have not entered any typos.${normal}"
				echo
				echo "${bold}${red}You have the option to skip the DNS check, however, if the hostname is incorrect,${normal}"
				echo "${bold}${red}the script will need to be re-ran fresh, things will not work properly!${normal}"
				echo "${bold}${red}Also if you choose to use Let's Encrypt, the check may fail!${normal}"
				echo
				while :; do
					read -r -p "Would you like to skip DNS verification? (Y)es or (n)o? : " hostname_dns_verification_skip
					echo
					if [ "$hostname_dns_verification_skip" == "y" ] || [ "$hostname_dns_verification_skip" == "Y" ] || [ "$hostname_dns_verification_skip" == "yes" ] || [ "$hostname_dns_verification_skip" == "YES" ] || [ "$hostname_dns_verification_skip" == "Yes" ] || [ "$hostname_dns_verification_skip" == "n" ] || [ "$hostname_dns_verification_skip" == "N" ] || [ "$hostname_dns_verification_skip" == "no" ] || [ "$hostname_dns_verification_skip" == "NO" ] || [ "$hostname_dns_verification_skip" == "No" ]; then
						break
					else
						echo
						echo "${bold}${red}Invalid input selection, try again.${normal}"
						echo
						echo ----------------------------------------------------------------------------------
						echo
					fi
				done
				if [ "$hostname_dns_verification_skip" == "y" ] || [ "$hostname_dns_verification_skip" == "Y" ] || [ "$hostname_dns_verification_skip" == "yes" ] || [ "$hostname_dns_verification_skip" == "YES" ] || [ "$hostname_dns_verification_skip" == "Yes" ]; then
					echo "Skipping DNS Verification."
					break
				elif [ "$hostname_dns_verification_skip" == "n" ] || [ "$hostname_dns_verification_skip" == "N" ] || [ "$hostname_dns_verification_skip" == "no" ] || [ "$hostname_dns_verification_skip" == "NO" ] || [ "$hostname_dns_verification_skip" == "No" ]; then
					if [[ $hostname_1 = $hostname_2 ]] || [[ $external_ip_4 != $dns_verification_4_stripped ]]; then
						# hostname_same_attempt=$((hostname_same_attempt-1))
						echo
						echo "${bold}${red}Hostnames entered match but not appear to point to this server's IPv4 address!${normal}"
						echo "${bold}${red}Please check for typos and try again.${normal}"
						echo
						read -r -p "${bold}${cyan}Enter hostname:${normal} " hostname_1
						read -r -p "${bold}${cyan}Enter hostname again:${normal} " hostname_2	
					else
						echo "${bold}${red}This message should not be visible for Hostname IP verification.${normal}"
					fi
					dns_ip_check	
				else
					echo "This message should not be visible for DNS Hostname verification."
				fi
			elif [[ $hostname_1 = $hostname_2 ]] || [[ $external_ip_4 != $dns_verification_4_stripped ]]; then
				hostname_same_attempt=$((hostname_same_attempt+1))
				echo
				echo "${bold}${red}Hostnames entered match but not appear to point to this server's IPv4 address!${normal}"
				echo "${bold}${red}Please check for typos and try again.${normal}"
				echo
				read -r -p "${bold}${cyan}Enter hostname:${normal} " hostname_1
				read -r -p "${bold}${cyan}Enter hostname again:${normal} " hostname_2	
			else
				echo "${bold}${red}This message should not be visible for Hostname IP verification.${normal}"
			fi
			dns_ip_check
		fi	
	done

	if [[ $hostname_1 = $hostname_2 ]] && [[ "$hostname_1" = "" ]] && [[ "$hostname_2" = "" ]]; then
		hostname=no_value_selected
		echo
		echo "${bold}${red}Your hostname is was left blank.${normal}"
		echo
		echo "${bold}${red}No hostname will be used.${normal}"
		sudo sed -i '\!^hostname =!{h;s!=.*!= '"blank"'!};${x;\!^$!{s!!hostname = '"blank"'!;H};x}' $drawpile_configuration_values_file
	else
		hostname=$hostname_1
		echo
		echo "${bold}${green}Your hostname is: $hostname ${normal}"
		echo
		echo 'This will be used to display in the session listing instead of your'
		echo 'public IP address.'
		sudo sed -i '\!^hostname =!{h;s!=.*!= '"$hostname"'!};${x;\!^$!{s!!hostname = '"$hostname"'!;H};x}' $drawpile_configuration_values_file
	fi
	
	hostname_new=$hostname
else
	echo "This message should not be visible."
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'

# echo "${bold}${cyan}***** Setting up SSL Certificate Creation . . . *****${normal}"

function generate_self_signed_ssl () {
	echo "${bold}${cyan}***** Self Signed Certs . . .*****${normal}"
	echo
	echo 'This section is for encrypting server connections to keep them more private.'
	echo
	echo 'Please note in the following sections that the parts contained within'
	echo 'the brackets are the default option if no information is entered.'
	echo
	echo '--------------------------------------------------------------------------------'
	variable_to_read_1="ssl_country"
	variable_to_read_2=""
	variable_to_read_3=""

	value_description_1="Country name to use with self signed SSL certificate."

	read_stored_config_value_query_function
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing ssl_country value and moving on."
		ssl_country=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		while :; do
			read -r -p 'Country Name (2 letter code) [AU]: ' ssl_country
			
			if [ "$ssl_country" == "" ]; then
				ssl_country="AU"
				break
			elif echo "$ssl_country" | perl -0777 -ne 'exit(/\A\s*[A-Z]{2}\s*\z/ ? 0 : 1)'; then
				# echo 'Valid string'
				echo
				echo "Selected: $ssl_country"
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done
	else
		echo "This message should not be visible."
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	variable_to_read_1="ssl_state"
	variable_to_read_2=""
	variable_to_read_3=""
	
	value_description_1="State name to use with self signed SSL certificate."

	read_stored_config_value_query_function
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing ssl_state value and moving on."
		ssl_state=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		while :; do
			read -r -p 'State or Province Name (full name) [Some-State]: ' ssl_state

			if [ "$ssl_state" == "" ]; then
				ssl_state="Some-State"
				break
			elif echo "$ssl_state" | perl -0777 -ne 'exit(/\A\s*[^\/"]*\s*\z/ ? 0 : 1)'; then
				# echo 'Valid string'
				echo
				echo "Selected: $ssl_state"
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done
	else
		echo "This message should not be visible."
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	variable_to_read_1="ssl_locality"
	variable_to_read_2=""
	variable_to_read_3=""
	
	value_description_1="City name to use with self signed SSL certificate."

	read_stored_config_value_query_function
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing ssl_locality value and moving on."
		ssl_locality=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		while :; do
			read -r -p 'Locality name (e.g., city) [Some-City]: ' ssl_locality

			if [ "$ssl_locality" == "" ]; then
				ssl_locality="Some-City"
				break
			elif echo "$ssl_locality" | perl -0777 -ne 'exit(/\A\s*[^\/"]*\s*\z/ ? 0 : 1)'; then
				# echo 'Valid string'
				echo
				echo "Selected: $ssl_locality"
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done
	else
		echo "This message should not be visible."
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	variable_to_read_1="ssl_organization"
	variable_to_read_2=""
	variable_to_read_3=""

	value_description_1="Organization name, e.g. Community Drawpile Server, to use with "
	value_description_2="self signed SSL certificate."

	read_stored_config_value_query_function
	if [ "$hostname" != "no_value_selected" ]; then
		hostname_ssl_organization="$hostname Drawpile Server"
	else
		hostname_ssl_organization="Drawpile Server"
	fi
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing value and moving on."
		ssl_organization=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		while :; do
			read -r -p "Organization Name (e.g., company) [$hostname_ssl_organization]: " ssl_organization

			if [ "$ssl_organization" == "" ]; then
				ssl_organization="$hostname_ssl_organization"
				break
			elif echo "$ssl_organization" | perl -0777 -ne 'exit(/\A\s*[^\/"]*\s*\z/ ? 0 : 1)'; then
				# echo 'Valid string'
				echo
				echo "Selected: $ssl_organization"
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done
	else
		echo "This message should not be visible."
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	variable_to_read_1="ssl_unitname"
	variable_to_read_2=""
	variable_to_read_3=""

	value_description_1="Group name, e.g. Collaborating Artists, to use with "
	value_description_2="self signed SSL certificate."

	read_stored_config_value_query_function
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing value and moving on."
		ssl_unitname=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		while :; do
			read -r -p 'Organizational Unit Name (e.g., section) [Collaborating Artists]: ' ssl_unitname

			if [ "$ssl_unitname" == "" ]; then
				ssl_unitname="Collaborating Artists"
				break
			elif echo "$ssl_unitname" | perl -0777 -ne 'exit(/\A\s*[^\/"]*\s*\z/ ? 0 : 1)'; then
				# echo 'Valid string'
				echo
				echo "Selected: $ssl_unitname"
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done
	else
		echo "This message should not be visible."
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	variable_to_read_1="ssl_email"
	variable_to_read_2=""
	variable_to_read_3=""

	value_description_1="Email address to use with self signed SSL certificate."

	read_stored_config_value_query_function
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing value and moving on."
		ssl_email=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		while :; do
			read -r -p 'Email Address [noemail@noemail.com]: ' ssl_email

			if [ "$ssl_email" == "" ]; then
				ssl_email="noemail@noemail.com"
				break
			elif echo "$ssl_email" | perl -0777 -ne 'exit(/\A\s*[^\/"]*\s*\z/ ? 0 : 1)'; then
				# echo 'Valid string'
				echo
				echo "Selected: $ssl_email"
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done
	else
		echo "This message should not be visible."
	fi
	sudo sed -i '\!^ssl_country =!{h;s!=.*!= '"$ssl_country"'!};${x;\!^$!{s!!ssl_country = '"$ssl_country"'!;H};x}' $drawpile_configuration_values_file
	sudo sed -i '\!^ssl_state =!{h;s!=.*!= '"$ssl_state"'!};${x;\!^$!{s!!ssl_state = '"$ssl_state"'!;H};x}' $drawpile_configuration_values_file
	sudo sed -i '\!^ssl_locality =!{h;s!=.*!= '"$ssl_locality"'!};${x;\!^$!{s!!ssl_locality = '"$ssl_locality"'!;H};x}' $drawpile_configuration_values_file
	sudo sed -i '\!^ssl_organization =!{h;s!=.*!= '"$ssl_organization"'!};${x;\!^$!{s!!ssl_organization = '"$ssl_organization"'!;H};x}' $drawpile_configuration_values_file
	sudo sed -i '\!^ssl_unitname =!{h;s!=.*!= '"$ssl_unitname"'!};${x;\!^$!{s!!ssl_unitname = '"$ssl_unitname"'!;H};x}' $drawpile_configuration_values_file
	sudo sed -i '\!^ssl_email =!{h;s!=.*!= '"$ssl_email"'!};${x;\!^$!{s!!ssl_email = '"$ssl_email"'!;H};x}' $drawpile_configuration_values_file
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	sudo mkdir -p -v "/etc/nginx/ssl/drawpile"
	ssl_private_cert_key=/etc/nginx/ssl/drawpile/key.pem
	ssl_certificate=/etc/nginx/ssl/drawpile/cert.pem
	
	sudo sed -i '\!^ssl_certificate =!{h;s!=.*!= '"$ssl_certificate"'!};${x;\!^$!{s!!ssl_certificate = '"$ssl_certificate"'!;H};x}' $drawpile_configuration_values_file
	sudo sed -i '\!^ssl_private_cert_key =!{h;s!=.*!= '"$ssl_private_cert_key"'!};${x;\!^$!{s!!ssl_private_cert_key = '"$ssl_private_cert_key"'!;H};x}' $drawpile_configuration_values_file
	
	# Original Command
	# sudo openssl req -x509 -newkey rsa:2048 -nodes -keyout $ssl_private_cert_key -out $ssl_certificate -days 365 -subj "/C=$ssl_country/ST=$ssl_state/L=$ssl_locality/O=$ssl_organization/OU=$ssl_unitname/CN=$hostname/emailAddress=$ssl_email"
	
	# Updated for 2023 and hopefully works better
	sudo openssl req -x509 -newkey rsa:2048 -nodes -sha256 -days 365 -keyout $ssl_private_cert_key -out $ssl_certificate -subj "/C=$ssl_country/ST=$ssl_state/L=$ssl_locality/O=$ssl_organization/OU=$ssl_unitname/CN=$hostname/emailAddress=$ssl_email" -addext "subjectAltName=DNS:$hostname"
	# sudo openssl req -x509 -newkey rsa:2048 -nodes -sha256 -days 365 -keyout $ssl_private_cert_key -out $ssl_certificate -subj "/C=$ssl_country/ST=$ssl_state/L=$ssl_locality/O=$ssl_organization/OU=$ssl_unitname/CN=$hostname/emailAddress=$ssl_email" -addext "subjectAltName=DNS:$hostname,DNS:*.example.com,IP:10.0.0.1"
	
	# echo '--------------------------------------------------------------------------------'
	# sudo openssl req -x509 -newkey rsa:2048 -nodes -keyout $ssl_private_cert_key -out $ssl_certificate -days 365 -subj "/C=$ssl_country/ST=$ssl_state/L=$ssl_locality/O=$ssl_organization/OU=$ssl_unitname/CN=$hostname/emailAddress=$ssl_email"
	# openssl req -new -sha256 -key domain.key -subj "/C=$ssl_country/ST=$ssl_state/L=$ssl_locality/O=$ssl_organization/OU=$ssl_unitname/CN=$hostname/emailAddress=$ssl_email" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf "[SAN]\nsubjectAltName=DNS:$hostname")) -out domain.csr
	# openssl req -new -sha256 -key domain.key -subj "/C=US/ST=CA/O=Acme, Inc./CN=example.com" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf "[SAN]\nsubjectAltName=DNS:example.com,DNS:www.example.com")) -out domain.csr
	# echo '--------------------------------------------------------------------------------'
	# sudo openssl req -x509 -newkey rsa:2048 -nodes -keyout /home/drawpileuser/key.pem -out /home/drawpileuser/cert.pem -days 365 -subj "/C=$ssl_country/ST=$ssl_state/L=$ssl_locality/O=$ssl_organization/OU=$ssl_unitname/CN=$hostname/emailAddress=$ssl_email"
	sudo chmod 777 /home/drawpileuser/ -R
	if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
		sudo $user_add_program www-data drawpileread
	fi
	sudo chown drawpileuser:drawpileread $ssl_certificate
	sudo chown drawpileuser:drawpileread $ssl_private_cert_key
	sudo chmod 750 $ssl_certificate
	sudo chmod 750 $ssl_private_cert_key
	cat <<EOF | sudo tee /home/drawpileuser/ssl.sh >/dev/null
#!/bin/bash
app_installation_status_file=/home/drawpileuser/App-Installation-Status.txt
drawpile_configuration_values_file=/home/drawpileuser/Drawpile_Configuration_Values.txt

sudo chmod 770 /home/drawpileuser/ -R

ssl_country=\$( grep -m 1 "ssl_country = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf \$i " "; print \$NF}' )
ssl_state=\$( grep -m 1 "ssl_state = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf \$i " "; print \$NF}' )
ssl_locality=\$( grep -m 1 "ssl_locality = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf \$i " "; print \$NF}' )
ssl_organization=\$( grep -m 1 "ssl_organization = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf \$i " "; print \$NF}' )
ssl_unitname=\$( grep -m 1 "ssl_unitname = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf \$i " "; print \$NF}' )
hostname=\$( grep -m 1 "hostname = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf \$i " "; print \$NF}' )
ssl_email=\$( grep -m 1 "ssl_email = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf \$i " "; print \$NF}' )

<<comment_EOF
ssl_organization=	\$( grep -m 1 "ssl_organization = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf \$i " "; print \$NF}' )
ssl_unitname=		\$( grep -m 1 "ssl_organization = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf \$i " "; print \$NF}' )
hostname=			\$( grep -m 1 "ssl_organization = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf \$i " "; print \$NF}' )
comment_EOF

sudo openssl req -x509 -newkey rsa:2048 -nodes -sha256 -days 365 -keyout $ssl_private_cert_key -out $ssl_certificate -subj "/C=$ssl_country/ST=$ssl_state/L=$ssl_locality/O=$ssl_organization/OU=$ssl_unitname/CN=$hostname/emailAddress=$ssl_email" -addext "subjectAltName=DNS:$hostname"
# sudo openssl req -x509 -newkey rsa:2048 -nodes -keyout $ssl_private_cert_key -out $ssl_certificate -days 365 -subj "/C=\$ssl_country/ST=\$ssl_state/L=\$ssl_locality/O=\$ssl_organization/OU=\$ssl_unitname/CN=\$hostname/emailAddress=\$ssl_email"
sudo chown drawpileuser:drawpileread $ssl_certificate
sudo chown drawpileuser:drawpileread $ssl_private_cert_key
sudo nginx -s reload
echo
sudo chmod 770 /home/drawpileuser/ -R
sudo chmod 777 /home/drawpileuser/ssl.sh
if [[ -e "/home/drawpileuser/cert.pem" ]]; then sudo chmod 700 /home/drawpileuser/cert.pem; fi
if [[ -e "/home/drawpileuser/key.pem" ]]; then sudo chmod 700 /home/drawpileuser/key.pem; fi
sudo chown drawpileuser:drawpileread /home/drawpileuser/ -R
echo
# if [ "\`systemctl is-enabled drawpile-srv.socket\`" = "enabled" ]; then
# 	echo "drawpile-srv.socket previously enabled, restarting server."
# 	sudo systemctl stop --now drawpile-srv.service
# 	sudo systemctl restart drawpile-srv.socket
# elif [ "\`systemctl is-enabled drawpile-srv.service\`" = "enabled" ]; then
# 	echo "drawpile-srv.service previously enabled, restarting server."
# 	sudo systemctl restart drawpile-srv.service
# else
# 	echo This message should not be visible.
# fi
EOF
	sudo chmod 777 /home/drawpileuser/ssl.sh
	
	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	# Default info in crontab, use command "crontab -e" to open for manual editing.
	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	# Edit this file to introduce tasks to be run by cron.
	# 
	# Each task to run has to be defined through a single line
	# indicating with different fields when the task will be run
	# and what command to run for the task
	# 
	# To define the time you can provide concrete values for
	# minute (m), hour (h), day of month (dom), month (mon),
	# and day of week (dow) or use '*' in these fields (for 'any').# 
	# Notice that tasks will be started based on the cron's system
	# daemon's notion of time and timezones.
	# 
	# Output of the crontab jobs (including errors) is sent through
	# email to the user the crontab file belongs to (unless redirected).
	# 
	# For example, you can run a backup of all your user accounts
	# at 5 a.m every week with:
	# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
	# 
	# For more information see the manual pages of crontab(5) and cron(8)
	# 
	# m h  dom mon dow   command
	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	# Read more on Crontab below
	#	https://www.raspberrypi.org/documentation/linux/usage/cron.md
	#	https://askubuntu.com/questions/408611/how-to-remove-or-delete-single-cron-job-using-linux-command
	# The line below adds a job to crontab. Read more here --> https://stackoverflow.com/questions/8579330/appending-to-crontab-with-a-shell-script-on-ubuntu
	# Use "crontab -r" to reset crontab's configuration. Manual editing "crontab -e" --> https://askubuntu.com/questions/793578/resetting-crontab-file-to-default
	if sudo crontab -u root -l | grep '#Drawpile ssl.sh' > /dev/null; then
		echo
		echo Crontab set up for drawpile ssl self signed certificates. Removing old info before adding new content.
		sudo crontab -u root -l | grep -v '#Drawpile ssl.sh' | sudo crontab -u root -
		echo
	else
		:
		# echo No crontab, sadge. Adding in crontab jerb.
	fi
	current_minute=$( date +%-M )
	current_hour=$( date +%-H )
	current_day=$( date +%-d )
	current_month=$( date +%-m )
	if [[ "$current_month" == "2" && "$current_day" == "29" ]]; then
		current_day=28
		echo
		echo "Doing this on leap year day, huh? Well, to make sure this works,"
		echo "setting the day back 1 day to make sure the SSL cert updates"
		echo "next year via crontab!"
		echo
	fi
	# Need root for le crontab, this installed into current user. 
	# (crontab -l 2>>/dev/null; echo "$current_minute $current_hour $current_day $current_month * /home/drawpileuser/ssl.sh #Drawpile ssl.sh") | crontab 
	(sudo crontab -l -u root 2>>/dev/null; echo "$current_minute $current_hour $current_day $current_month * /home/drawpileuser/ssl.sh #Drawpile ssl.sh") | sudo crontab -u root -
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		sudo systemctl enable crond.service
		sudo systemctl start --now crond.service
		sudo systemctl status crond.service --no-pager -l
	fi
	sudo sed -i '\!^ssl_current_minute =!{h;s!=.*!= '"$current_minute"'!};${x;\!^$!{s!!ssl_current_minute = '"$current_minute"'!;H};x}' $drawpile_configuration_values_file
	sudo sed -i '\!^ssl_current_hour =!{h;s!=.*!= '"$current_hour"'!};${x;\!^$!{s!!ssl_current_hour = '"$current_hour"'!;H};x}' $drawpile_configuration_values_file
	sudo sed -i '\!^ssl_current_day =!{h;s!=.*!= '"$current_day"'!};${x;\!^$!{s!!ssl_current_day = '"$current_day"'!;H};x}' $drawpile_configuration_values_file
	sudo sed -i '\!^ssl_current_month =!{h;s!=.*!= '"$current_month"'!};${x;\!^$!{s!!ssl_current_month = '"$current_month"'!;H};x}' $drawpile_configuration_values_file
}

function permissions_lets_encrypt_ssl () {
	# echo
	# echo "${bold}Warning.${normal} In order for drawpile-srv to use the SSL files generated"
	# echo "by Let's encrypt, drawpileuser must be granted ownership of the"
	# echo "directories leading up to the following:"
	# # echo      /etc/letsencrypt/archive/$hostname
	# echo      /etc/letsencrypt/live/$hostname
	# echo
	# echo "The root account will still be listed for the files contained within"
	# echo "once you press any key to continue with the script. This message"
	# echo "is for your information to make you aware of the change."
	# echo
	# pause
	# echo
	# sudo chown drawpileuser:drawpileread "/etc/letsencrypt/"
	# # sudo chown drawpileuser:drawpileread "/etc/letsencrypt/archive"
	# # sudo chown drawpileuser:drawpileread "/etc/letsencrypt/archive/$hostname" -R
	# sudo chown drawpileuser:drawpileread "/etc/letsencrypt/live"
	# sudo chown drawpileuser:drawpileread "/etc/letsencrypt/live/$hostname" -R
	
	echo
	echo "${bold}Warning.${normal} In order for drawpile-srv to use the SSL files generated"
	echo "by Let's encrypt, drawpileuser must be granted the ability to"
	echo "read directories leading up to the following:"
	# echo      /etc/letsencrypt/archive/$hostname
	echo      /etc/letsencrypt/live/$hostname
	echo
	echo "The root group will still be listed for the files contained within"
	echo "once you press any key to continue with the script. This message"
	echo "is for your information to make you aware of the change."
	echo
	pause
	
	# sudo addgroup drawpileread
	# sudo adduser drawpileuser drawpileread
	
	# sudo chown :drawpileread "/etc/letsencrypt/"
	
	sudo chown :drawpileread "/etc/letsencrypt/archive"
	sudo chown :drawpileread "/etc/letsencrypt/archive/$hostname" -R
	sudo chmod 770 "/etc/letsencrypt/archive"
	sudo chmod 770 "/etc/letsencrypt/archive/$hostname" -R
	sudo chown :drawpileread "/etc/letsencrypt/live"
	sudo chown :drawpileread "/etc/letsencrypt/live/$hostname" -R
	sudo chmod 770 "/etc/letsencrypt/live"
	
	# sudo chmod 770 "/etc/letsencrypt/live/$hostname" -R
		
	# if sudo test -e  "/etc/letsencrypt/archive/$hostname/privkey.pem"; then
	# 	sudo chmod 650 "/etc/letsencrypt/archive/$hostname/privkey.pem"
	# elif sudo test -e "/etc/letsencrypt/archive/$hostname/privkey1.pem"; then
	# 	sudo chmod 650 "/etc/letsencrypt/archive/$hostname/privkey1.pem"
	# else
	# 	echo Chmod for archive folder in Lets Encrypt message
	# 	echo that should not be visible to the user.
	# 	pause
	# fi
	
	# if sudo test -e  "/etc/letsencrypt/live/$hostname/privkey.pem"; then
	# 	echo "Setting variable for SSL Certificate Private key location."
	# 	ssl_private_cert_key=/etc/letsencrypt/live/$hostname/privkey.pem
	# else
	# 	echo Could not find private certificate key. Was there an error?
	# 	echo
	# 	sleep 30
	# 	exit
	# fi
}

function generate_lets_encrypt_ssl () {
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}***** Lets Encrypt Signed Certs . . .*****${normal}"
	echo
	echo "You will have to enter a valid email address for urgent renewal and security notices."
	echo "You may also need this in the event you need to revoke the SSL certificate to create"
	echo "another. You should also read the terms of Service for Lets Encrypt, which can be"
	echo "found here:"
	echo "    https://letsencrypt.org/documents/LE-SA-v1.3-September-21-2022.pdf"
	echo
	echo
	pause
	echo 
	certbot_version=$( certbot --version | awk '{ print $2 }' )
	# sudo certbot certificates
	if [[ ( "$certbot_version" = "2.0.0" || "$certbot_version" > "2.0.0" ) && ( $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ) || ( "$certbot_version" < "2.0.0" && $drawpile_srv_version_stripped < "2.2.0" ) || (( "$certbot_version" < "2.0.0" ) && ( $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" )) ]]; then
		#					First condition		Second condition	Third Condition
		# certbot			2.0.0 and Newer		1.9.9 and Older		1.9.9 and Older
		# drawpile-srv		2.2.0 and Newer		2.1.x and Older		2.2.0 and Newer
		# For first grouped condition, Should be ECDSA / Elliptical by default with Certbot 2.0 or greater, which should not be an issue for Drawpile-srv ver 2.2.0 or greater.
		# For second grouped condition, if Certbot is 1.9.9 and older and the Drawpile-srv is 2.1.x and older, it should default to RSA, which will work fine with the server.
		# For third condition, will use RSA type. Script will account for this and act accordingly.
		sudo certbot certonly --nginx -d $hostname
	elif [[ "$certbot_version" = "2.0.0" || "$certbot_version" > "2.0.0" ]] && [[ $drawpile_srv_version_stripped < "2.2.0" ]]; then
		# certbot			2.0.0 and Newer
		# drawpile-srv		2.1.x and Older
		# Should be RSA type, but is ECDSA / Elliptical by default with Certbot 2.0 or greater, won't work with Drawpile-srv ver 2.1.x or older. Need special argument to generate RSA.
		sudo certbot certonly --nginx -d $hostname --key-type rsa
	else
		echo "This message should not be visible for Let's Encrypt Cert type to generate."
	fi
	# sudo certbot certonly --nginx -d example.hostwebsite.com

	if sudo test -e  "/etc/letsencrypt/live/$hostname/fullchain.pem"; then
		echo "Setting variable for SSL Certificate location."
		ssl_fullchain_certificate=/etc/letsencrypt/live/$hostname/fullchain.pem
	else
		echo Could not find certificate. Was there an error?
		echo
		sleep 30
		exit
	fi
	echo
	
	permissions_lets_encrypt_ssl
}

function revoke_lets_encrypt_ssl () {
	echo
	echo Read more on Lets Encrypt Revocation process here:
	echo      https://letsencrypt.org/docs/revoking/
	echo
	echo "${bold}${cyan}Specify reason code for certificate revocation${normal}"
	echo
	echo "  ${bold}${cyan}"'1  - keyCompromise (RFC 5280 CRLReason #1)'"${normal}"
	echo '         Removing key because you have reason to'
	echo '         believe the private key has been compromised.'
	echo '         Such as unauthorized person had access to'
	echo '         private key of your certificate'
	echo "  ${bold}${cyan}"'2  - superseded (RFC 5280 CRLReason #4)'"${normal}"
	echo '         When requesting new certificate to replace'
	echo '         the existing certificate.'
	echo "  ${bold}${cyan}"'3  - cessationofOperation (RFC 5280 CRLReason #5)'"${normal}"
	echo '         No longer own all of the domain names in the'
	echo '         certificate or no longer will be using the'
	echo "         certificate because the $hostname"
	echo '         will no longer be used.'
	echo "  ${bold}${cyan}"'4  - unspecified (RFC 5280 CRLReason #0)'"${normal}"
	echo '         When the reason codes above to not apply to'
	echo '         the revocation request, you must not provide'
	echo '         a reason code other than unspecified.'
	echo
	while :; do
		read -r -p "${bold}${cyan}Enter a number and hit enter to continue:${normal} " cert_revocation_reason_entry
		[[ $cert_revocation_reason_entry =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $cert_revocation_reason_entry >= 1 && $cert_revocation_reason_entry <= 4)); then
			break
		else
			echo
			echo "Invalid number selection, try again."
			echo
			echo '--------------------------------------------------------------------------------'
			echo
		fi
	done
	
	if [ "$cert_revocation_reason_entry" == "1" ]; then
		cert_revocation_reason=keyCompromise
	elif [ "$cert_revocation_reason_entry" == "2" ]; then
		cert_revocation_reason=superseded
	elif [ "$cert_revocation_reason_entry" == "3" ]; then
		cert_revocation_reason=cessationofOperation
	elif [ "$cert_revocation_reason_entry" == "4" ]; then
		cert_revocation_reason=unspecified
	else
		echo Invalid option selected. Assuming cert is being replaced.
		echo 'Will use option 2 - superseded (RFC 5280 CRLReason #4)'
		cert_revocation_reason=superseded
	fi
	
	sudo certbot revoke --cert-path $ssl_cert_pem --reason $cert_revocation_reason
}

echo
echo "${bold}${cyan}***** Setting up SSL Certificate Creation . . . *****${normal}"
echo
variable_to_read_1="ssl_encryption_config"
variable_to_read_2=""
variable_to_read_3=""

value_description_1="This is for the encryption method."
value_description_2=" "
value_description_3="1 - Self Signed Certificates"
value_description_4="2 - Let's Encrypt Certificates"
value_description_5="3 - No SSL Security"

read_stored_config_value_query_function
if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	ssl_encryption_config=$read_stored_config_value_query_1
	reused_ssl_encryption_config=yes
	if [ "$ssl_encryption_config" == "1" ]; then
		ssl_certificate=/etc/nginx/ssl/drawpile/cert.pem
		ssl_private_cert_key=/etc/nginx/ssl/drawpile/key.pem
	elif [ "$ssl_encryption_config" == "2" ]; then
		ssl_cert_pem=/etc/letsencrypt/live/$hostname/cert.pem
		ssl_chain_pem=/etc/letsencrypt/live/$hostname/chain.pem
		ssl_fullchain_certificate=/etc/letsencrypt/live/$hostname/fullchain.pem
		ssl_private_cert_key=/etc/letsencrypt/live/$hostname/privkey.pem
		# Difference between fullchain.pem and cert.pem --> https://community.letsencrypt.org/t/difference-between-fullchain-pem-and-cert-pem/184189
		#      fullchain.pem is the combination of cert.pem (your "end-entity certificate") with chain.pem (your "(recommended) intermediate certificate chain"), in a single file.
		#      These alternatives exist because different software prefers having these either together or separated, so having the alternatives makes it easier to configure different TLS server software.
		#      In nginx you should currently be able to use fullchain.pem, and it should understand the nature and role of the various certificates in that file automatically.
		ssl_certificate=$ssl_fullchain_certificate	
	else
		echo "${invis}No SSL being used.${normal}"
	fi
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	reused_ssl_encryption_config=no
	echo "${bold}${underline}Self Signed Certificate${normal}"
	echo "${bold}${green}Pros:${normal}"
	echo "  * No registration"
	echo "  * Renew cert via automated script every year."
	echo "${bold}${red}Cons:${normal}"
	echo "  * If script does not update SSL cert, users cannot connect."
	echo '  * Requires users to replace cert in app or cannot connect.'
	echo '  * Also less trusted on web browsers due to it being self signed.'
	echo '  * Drawpile web users will need to manually install certificate in order to'
	echo '         use the web version of Drawpile on the server. There is no other way'
	echo '         to get around this issue if you use self signed certificates (and'
	echo '         a free hostname, generally speaking).'
	echo 
	echo "${bold}${underline}Let's Encrypt ${normal}"
	echo "${bold}${green}Pros:${normal}"
	echo "  * Free to use, simple setup, only slightly more complex."
	echo '  * Creates 3rd party signed certificate from Certificate Authority'
	echo '  * Works well with paid domains, from Squarespace or other services.'
	echo "${bold}${red}Cons:${normal}"
	echo '  * May not be available when using free hostnames as there are too many'
	echo '         hostnames using it for SSL encryption. To increase chances of'
	echo '         useability, one should use a hostname from FreeDNS with as few'
	echo '         as possible users of a particular domain name (5 or less).'
	echo
	echo "${bold}${red}IMPORTANT NOTE:${normal} Selecting option 3 will prevent you from using"
	echo "the list server function or web admin function. Selecting this option also changes"
	echo "the options available to systemd configuration setup."
	echo
	echo "Do you want to use self signed certificate or Lets Encrypt? Please note, if you want"
	echo "to switch from Lets Encrypt to self signed certs, choose option 2. Invalid option"
	echo "will default to option 2."
	echo
	echo 'Enter a number and hit enter to continue.'
	echo
	echo 'Press 1 for Self Signed Certificates'
	echo "Press 2 for Lets Encrypt ${bold}(Default)${normal}"
	echo 'Press 3 for no SSL security.'
	echo
	while :; do
		read -r -p "${bold}${cyan}Enter a number and hit enter to continue:${normal} " ssl_encryption_config
		[[ $ssl_encryption_config =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $ssl_encryption_config >= 1 && $ssl_encryption_config <= 3)); then
			break
		else
			echo
			echo "Invalid number selection, try again."
			echo
			echo '--------------------------------------------------------------------------------'
			echo
		fi
	done
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	if [ "$ssl_encryption_config" == "1" ]; then
		generate_self_signed_ssl
	elif [ "$ssl_encryption_config" == "2" ]; then
		# version_certbot=$( apt-cache policy certbot | grep "Installed:" | cut -c 14-21 )
		# minimum_versioncertbot=1.12.0-2
		package_name=certbot
		version_test_by_distro_function
		# if [[ "$version_certbot" = "(none)" ]]; then
		if [[ "$test_installation_status" = "Not Installed" ]] || [[ "$test_installation_status" = "Installed and not up to date" ]]; then
			echo "${bold}${cyan}***** Installing package certbot. . . *****${normal}"
			# https://phoenixnap.com/kb/letsencrypt-nginx
			# sudo certbot --nginx -d example.com -d www.example.com
			# sudo certbot --nginx --test-cert
			echo
			#sudo apt install certbot
			app_does_not_exist=0
			app_installed=0
			app_not_installed=0
			progs=(certbot);
			package_install_status_check_function
			sudo $package_install_program certbot
			echo
		else
			echo "${bold}${green}Package certbot already installed.${normal}"
		fi
		package_name=python3-certbot-nginx
		version_test_by_distro_function
		# if [[ "$version_certbot" = "(none)" ]]; then
		if [[ "$test_installation_status" = "Not Installed" ]] || [[ "$test_installation_status" = "Installed and not up to date" ]]; then
			echo "${bold}${cyan}***** Installing package python3-certbot-nginx. . . *****${normal}"
			echo
			app_does_not_exist=0
			app_installed=0
			app_not_installed=0
			progs=(python3-certbot-nginx);
			package_install_status_check_function
			sudo $package_install_program python3-certbot-nginx
			echo
		else
			echo "${bold}${green}Package python3-certbot-nginx already installed.${normal}"
		fi
		echo
		ssl_cert_pem=/etc/letsencrypt/live/$hostname/cert.pem
		ssl_chain_pem=/etc/letsencrypt/live/$hostname/chain.pem
		ssl_fullchain_certificate=/etc/letsencrypt/live/$hostname/fullchain.pem
		ssl_private_cert_key=/etc/letsencrypt/live/$hostname/privkey.pem
		# Difference between fullchain.pem and cert.pem --> https://community.letsencrypt.org/t/difference-between-fullchain-pem-and-cert-pem/184189
		#      fullchain.pem is the combination of cert.pem (your "end-entity certificate") with chain.pem (your "(recommended) intermediate certificate chain"), in a single file.
		#      These alternatives exist because different software prefers having these either together or separated, so having the alternatives makes it easier to configure different TLS server software.
		#      In nginx you should currently be able to use fullchain.pem, and it should understand the nature and role of the various certificates in that file automatically.
		ssl_certificate=$ssl_fullchain_certificate

		sudo sed -i '\!^ssl_cert_pem =!{h;s!=.*!= '"$ssl_cert_pem"'!};${x;\!^$!{s!!ssl_cert_pem = '"$ssl_cert_pem"'!;H};x}' $drawpile_configuration_values_file
		sudo sed -i '\!^ssl_chain_pem =!{h;s!=.*!= '"$ssl_chain_pem"'!};${x;\!^$!{s!!ssl_chain_pem = '"$ssl_chain_pem"'!;H};x}' $drawpile_configuration_values_file
		sudo sed -i '\!^ssl_fullchain_certificate =!{h;s!=.*!= '"$ssl_fullchain_certificate"'!};${x;\!^$!{s!!ssl_fullchain_certificate = '"$ssl_fullchain_certificate"'!;H};x}' $drawpile_configuration_values_file
		sudo sed -i '\!^ssl_private_cert_key =!{h;s!=.*!= '"$ssl_private_cert_key"'!};${x;\!^$!{s!!ssl_private_cert_key = '"$ssl_private_cert_key"'!;H};x}' $drawpile_configuration_values_file
		echo
		# sudo systemctl stop --now nginx.service
		# wait $!
		echo
		# Used sudo on if statement in order to be able to access the directory. Non Root users cannot access this location.
		if sudo test -L "$ssl_fullchain_certificate"; then
			if sudo test -L "$ssl_private_cert_key"; then
				echo "${bold}${cyan}***** Symbolic links to certs already generated for Lets Encrypt. *****${normal}"
				echo
				echo 'Press 1 to use these existing keys'
				echo 'Press 2 to revoke keys and generate new Lets Encrypt certs with certbot'
				echo
				echo 'Press 9 to revoke keys and generate self signed certs'
				echo
				while :; do
					read -r -p "${bold}${cyan}Enter a number and hit enter to continue: ${normal} " lets_encrypt_config
					[[ $lets_encrypt_config =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
					if (( $lets_encrypt_config >= 1 && $lets_encrypt_config <= 2 || $lets_encrypt_config == 9 )); then
						break
					else
						echo
						echo "Invalid number selection, try again."
						echo
						echo '--------------------------------------------------------------------------------'
						echo
					fi
				done
				echo
				if [ "$lets_encrypt_config" == "1" ]; then
					echo Continuing script . . .
					permissions_lets_encrypt_ssl
				elif [ "$lets_encrypt_config" == "2" ]; then
					# sudo certbot revoke --cert-path $ssl_fullchain_certificate
					revoke_lets_encrypt_ssl
					generate_lets_encrypt_ssl
				elif [ "$lets_encrypt_config" == "9" ]; then
					revoke_lets_encrypt_ssl
					generate_self_signed_ssl
				else
					echo Invalid option selected, will use existing keys. Continuing script . . .
				fi
			else
				echo Only one of two files found? This message should not be visible . . .
			fi
		elif sudo test -e "$ssl_fullchain_certificate"; then
			if sudo test -e "$ssl_private_cert_key"; then
				echo "${bold}${cyan}***** Found certs already generated for Lets Encrypt. *****${normal}"
				echo
				echo 'Press 1 to use these existing keys'
				echo 'Press 2 to revoke keys and generate new Lets Encrypt certs with certbot'
				echo
				echo 'Press 9 to revoke keys and generate self signed certs'
				echo
				while :; do
					read -r -p "${bold}${cyan}Enter a number and hit enter to continue: ${normal} " lets_encrypt_config
					[[ $lets_encrypt_config =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
					if (( $lets_encrypt_config >= 1 && $lets_encrypt_config <= 2 || $lets_encrypt_config == 9 )); then
						break
					else
						echo
						echo "Invalid number selection, try again."
						echo
						echo '--------------------------------------------------------------------------------'
						echo
					fi
				done

				echo
				if [ "$lets_encrypt_config" == "1" ]; then
					echo Continuing script . . .
					permissions_lets_encrypt_ssl
				elif [ "$lets_encrypt_config" == "2" ]; then
					revoke_lets_encrypt_ssl
					generate_lets_encrypt_ssl 
				elif [ "$lets_encrypt_config" == "9" ]; then 
					revoke_lets_encrypt_ssl
					generate_self_signed_ssl
				else
					echo Invalid option selected, will use existing keys. Continuing script . . .
				fi
			else
				echo Found file $ssl_fullchain_certificate
				echo but did not find $ssl_private_cert_key
				echo
				echo This Lets Encrypt message should not be visible.
				echo
				sleep 30
				exit
			fi
		else
			echo "${bold}${cyan}***** No certs yet generated for Lets Encrypt . . . *****${normal}"
			echo
			echo 'Press 1 to generate Lets Encrypt keys'
			echo 'Press 2 to redownload cert that was not previously revoked, revoke all'
			echo '        certs, and set up new Lets Encrypt Certs with certbot.'
			echo
			while :; do
				read -r -p "${bold}${cyan}Enter a number and hit enter to continue: ${normal} " lets_encrypt_config
				[[ $lets_encrypt_config =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
				if (( $lets_encrypt_config >= 1 && $lets_encrypt_config <= 2)); then
					break
				else
					echo
					echo "Invalid number selection, try again."
					echo
					echo '--------------------------------------------------------------------------------'
					echo
				fi
			done
			echo
			if [ "$lets_encrypt_config" == "1" ]; then
				generate_lets_encrypt_ssl
			elif [ "$lets_encrypt_config" == "2" ]; then 
				sudo certbot certonly --nginx -d $hostname
				revoke_lets_encrypt_ssl
				generate_lets_encrypt_ssl
			else
				echo Invalid option selected. Assuming option 1 intended.
				echo
				generate_lets_encrypt_ssl
			fi
		fi
		# Difference between fullchain.pem and cert.pem --> https://community.letsencrypt.org/t/difference-between-fullchain-pem-and-cert-pem/184189
		#      fullchain.pem is the combination of cert.pem (your "end-entity certificate") with chain.pem (your "(recommended) intermediate certificate chain"), in a single file.
		#      These alternatives exist because different software prefers having these either together or separated, so having the alternatives makes it easier to configure different TLS server software.
		#      In nginx you should currently be able to use fullchain.pem, and it should understand the nature and role of the various certificates in that file automatically.
		ssl_certificate=$ssl_fullchain_certificate
		# sudo systemctl start --now nginx.service
		# wait $!
	elif [ "$ssl_encryption_config" == "3" ]; then
		:
		# Do nothing as no error was detected.
		# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
	else
		echo Invalid option selected. Assuming option 2 intended.
		ssl_encryption_config=2
		
		ssl_cert_pem=/etc/letsencrypt/live/$hostname/cert.pem
		ssl_chain_pem=/etc/letsencrypt/live/$hostname/chain.pem
		ssl_fullchain_certificate=/etc/letsencrypt/live/$hostname/fullchain.pem
		ssl_private_cert_key=/etc/letsencrypt/live/$hostname/privkey.pem
		# Difference between fullchain.pem and cert.pem --> https://community.letsencrypt.org/t/difference-between-fullchain-pem-and-cert-pem/184189
		#      fullchain.pem is the combination of cert.pem (your "end-entity certificate") with chain.pem (your "(recommended) intermediate certificate chain"), in a single file.
		#      These alternatives exist because different software prefers having these either together or separated, so having the alternatives makes it easier to configure different TLS server software.
		#      In nginx you should currently be able to use fullchain.pem, and it should understand the nature and role of the various certificates in that file automatically.
		ssl_certificate=$ssl_fullchain_certificate

		sudo sed -i '\!^ssl_cert_pem =!{h;s!=.*!= '"$ssl_cert_pem"'!};${x;\!^$!{s!!ssl_cert_pem = '"$ssl_cert_pem"'!;H};x}' $drawpile_configuration_values_file
		sudo sed -i '\!^ssl_chain_pem =!{h;s!=.*!= '"$ssl_chain_pem"'!};${x;\!^$!{s!!ssl_chain_pem = '"$ssl_chain_pem"'!;H};x}' $drawpile_configuration_values_file
		sudo sed -i '\!^ssl_fullchain_certificate =!{h;s!=.*!= '"$ssl_fullchain_certificate"'!};${x;\!^$!{s!!ssl_fullchain_certificate = '"$ssl_fullchain_certificate"'!;H};x}' $drawpile_configuration_values_file
		sudo sed -i '\!^ssl_private_cert_key =!{h;s!=.*!= '"$ssl_private_cert_key"'!};${x;\!^$!{s!!ssl_private_cert_key = '"$ssl_private_cert_key"'!;H};x}' $drawpile_configuration_values_file
		echo
		# sudo systemctl stop --now nginx.service
		# wait $!
		generate_lets_encrypt_ssl
		# sudo systemctl start --now nginx.service
		# wait $!
	fi
	sudo sed -i '\!^ssl_encryption_config =!{h;s!=.*!= '"$ssl_encryption_config"'!};${x;\!^$!{s!!ssl_encryption_config = '"$ssl_encryption_config"'!;H};x}' $drawpile_configuration_values_file
else
	echo "This message should not be visible."
fi
echo
echo "${bold}${cyan}***** Determine SSL algorithm for server startup . . .*****${normal}"
echo
# --------------------------------------------------------------------------------
#  --ssl-cert <certificate>                 SSL certificate file
#  --ssl-key <key>                          SSL key file
#  --ssl-key-algorithm <algorithm>          SSL key algorithm: guess (the
#                                           default), rsa, ec, dsa or dh.
# --------------------------------------------------------------------------------
if [ "$ssl_encryption_config" == "1" ]; then
	# 1 - Self Signed
	echo "Self Signed: RSA type certificate."
	if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]]; then
		# The space at the end of the variable is intentional.
		ssl_cert_and_key_startup_config="--ssl-key-algorithm rsa --ssl-cert $ssl_certificate --ssl-key $ssl_private_cert_key "
	elif [[ $drawpile_srv_version_stripped < "2.2.0" ]]; then
	# The space at the end of the variable is intentional.
		ssl_cert_and_key_startup_config="--ssl-cert $ssl_certificate --ssl-key $ssl_private_cert_key "
	else
		echo "${bold}${red}This option for Drawpile 2.1.x and SSL key algorithm detection should not be visible.${normal}"
	fi	
elif [ "$ssl_encryption_config" == "2" ]; then
	# 2 - Let's Encrypt
	if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]]; then
		lets_encrypt_cert_type=$( sudo certbot certificates | grep -i "Key Type:" | awk '{ print $3 }' )
		if [[ "$lets_encrypt_cert_type" == "RSA" ]]; then
			echo "Lets Encrypt: RSA type certificate."
			# The space at the end of the variable is intentional.
			ssl_cert_and_key_startup_config="--ssl-key-algorithm rsa --ssl-cert $ssl_certificate --ssl-key $ssl_private_cert_key "
		elif [[ "$lets_encrypt_cert_type" == "ECDSA" ]]; then
			echo "Lets Encrypt: ECDSA type elliptic certificate."
			# The space at the end of the variable is intentional.
			ssl_cert_and_key_startup_config="--ssl-key-algorithm ec --ssl-cert $ssl_certificate --ssl-key $ssl_private_cert_key "
		else
			echo "${bold}${red}Certificate type unknown, will hope for the best.${normal}"
			# Not specifying 'ssl-key-algorithm' lets the server try to decide and select the appropriate cert type.
			# The space at the end of the variable is intentional.
			ssl_cert_and_key_startup_config="--ssl-cert $ssl_certificate --ssl-key $ssl_private_cert_key "
		fi
	elif [[ $drawpile_srv_version_stripped < "2.2.0" ]]; then
		# The space at the end of the variable is intentional.
		echo "Drawpile older than 2.2.0, not specifying ssl key algorithm startup parameter."
		ssl_cert_and_key_startup_config="--ssl-cert $ssl_certificate --ssl-key $ssl_private_cert_key "
	else
		echo "${bold}${red}This option for Drawpile 2.1.x and SSL key algorithm detection should not be visible.${normal}"
	fi
elif [ "$ssl_encryption_config" == "3" ]; then
	# 3 - No SSL. Do nothing as no error was detected.
	echo "No SSL certificate."
	# The lack of space character is intentional.
	ssl_cert_and_key_startup_config=""
else
	echo "${bold}${red}This option for SSL key algorithm detection should not be visible.${normal}"
fi

echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
if [ -e "/etc/systemd/system/drawpile_abuse_report.service" ]; then
	echo "Detected old service name, drawpile_abuse_report.service."
	echo "Reconfiguring service to utilize - instead of _."
	if [ "`systemctl is-enabled drawpile_abuse_report.service`" = "enabled" ]; then
		drawpile_abuse_report_test_rename_status=enabled
		sudo systemctl disable drawpile_abuse_report.service
	else
		drawpile_abuse_report_test_rename_status=disabled
	fi
	sudo systemctl stop --now drawpile_abuse_report.service
	
	sudo mv /etc/systemd/system/drawpile_abuse_report.service /etc/systemd/system/drawpile-abuse-report.service
	
	if [[ "$drawpile_abuse_report_test_rename_status" == "enabled" ]]; then
		sudo systemctl enable drawpile-abuse-report.service
		sudo systemctl start --now drawpile-abuse-report.service
		sleep 3
	fi
	# Fixes up RPi-Monitor if configured
	if [ -e "/etc/rpimonitor/template/services.conf" ]; then
		sudo sed -i -e 's/drawpile_abuse_report.service/drawpile-abuse-report.service/g' /etc/rpimonitor/template/services.conf
		wait $!
		sudo systemctl daemon-reload
		sudo service rpimonitor restart
	fi
fi
echo
echo "${bold}${cyan}*****Setting Up Drawpile Abuse Report Tool . . .*****${normal}"
echo
variable_to_read_1="drawpile_abuse_report_installation_status"
variable_to_read_2="abuse_report_auth_token"
variable_to_read_3="discord_webhook_URL"

value_description_1="Abuse-Report: Used for reporting session content"
value_description_2="or inappropriate session names by users, where a"
value_description_3="message is sent to Discord channel of your choosing."
value_description_4=""
value_description_5="Auth token is 2nd value, webhook is 3rd."

maybe_use_config_value=n
read_stored_config_value_query_function
if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	drawpile_abuse_report_installation_status=$read_stored_config_value_query_1
	abuse_report_port=8200
	abuse_report_auth_token=$read_stored_config_value_query_2
	discord_webhook_URL=$read_stored_config_value_query_3
	reused_drawpile_abuse_report_installation_status=yes
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	reused_drawpile_abuse_report_installation_status=no
	echo "This is so when a user goes into Drawpile's 'Session' menu,"
	echo " 'Moderation', 'Report...', that a message is sent to a Discord"
	echo " server and channel of your choosing, in order to notify about"
	echo " rules being broken on the server."
	echo
	echo "${bold}${red}Warning: Choosing to skip installation of this tool will prevent${normal}"
	echo " ${bold}${red}you from using Drawpile-Monitor.${normal} Which is a python script for"
	echo " SFW only servers, monitoring for NSFW content via session names"
	echo " usernames, and room aliases. Inappropriate sessions are"
	echo " automatically renamed. Inappropriate usernames or a room alias"
	echo " results in disconnect. A notification will be sent via Discord"
	echo " webhook to report the incident."
	echo
	while :; do
		read -r -p "${bold}${cyan}Would you like to enable the Abuse Report Tool:${normal} " drawpile_abuse_report_installation_status
		if [ "$drawpile_abuse_report_installation_status" == "y" ] || [ "$drawpile_abuse_report_installation_status" == "Y" ] || [ "$drawpile_abuse_report_installation_status" == "yes" ] || [ "$drawpile_abuse_report_installation_status" == "YES" ] || [ "$drawpile_abuse_report_installation_status" == "Yes" ] || [ "$drawpile_abuse_report_installation_status" == "n" ] || [ "$drawpile_abuse_report_installation_status" == "N" ] || [ "$drawpile_abuse_report_installation_status" == "no" ] || [ "$drawpile_abuse_report_installation_status" == "NO" ] || [ "$drawpile_abuse_report_installation_status" == "No" ]; then
			break
		else
			echo
			echo "${bold}${red}Invalid input selection, try again.${normal}"
			echo
			echo ----------------------------------------------------------------------------------
			echo
		fi
	done
	if [ "$drawpile_abuse_report_installation_status" == "y" ] || [ "$drawpile_abuse_report_installation_status" == "Y" ] || [ "$drawpile_abuse_report_installation_status" == "yes" ] || [ "$drawpile_abuse_report_installation_status" == "YES" ] || [ "$drawpile_abuse_report_installation_status" == "Yes" ]; then
		# dp_install_loc=/home/pi/Public
		# hostname=drawpile-test.duckdns.org
		# sudo systemctl stop --now drawpile-abuse-report.service
		# sudo systemctl disable drawpile-abuse-report.service
		# discord_webhook_URL=https://discord.com/api/webhooks/1133190759890305145/5gEGFz4teebUjKU965CCUWutCw3l3hAI6D5kz8ejaxYZOpiGIU2bfntiwSZNKRq_6vNe
		echo
		echo ----------------------------------------------------------------------------------
		echo
		echo "${bold}${cyan}*****Setting Up Drawpile Abuse Report Tool . . .*****${normal}"
		abuse_report_port=8200
		# --------------------------------------------------------------------------------
		variable_to_read_1="abuse_report_auth_token"
		variable_to_read_2=""
		variable_to_read_3=""

		value_description_1="You should not change this token unless someone else"
		value_description_2="managed to get a hold of the auth token."

		read_stored_config_value_query_function
		if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
			echo "Storing value and moving on."
			abuse_report_auth_token=$read_stored_config_value_query_1
			echo
		elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
			random_string=$(openssl rand -base64 32)
			# echo "lol random $random_string"
			abuse_report_auth_token=$random_string
			sudo sed -i '\!^abuse_report_auth_token =!{h;s!=.*!= '"$abuse_report_auth_token"'!};${x;\!^$!{s!!abuse_report_auth_token = '"$abuse_report_auth_token"'!;H};x}' $drawpile_configuration_values_file
			echo "This is your abuse report auth_token: $abuse_report_auth_token"
			echo
			echo '--------------------------------------------------------------------------------'
		else
			echo "This message should not be visible."
		fi

		variable_to_read_1="discord_webhook_URL"
		variable_to_read_2=""
		variable_to_read_3=""

		value_description_1="You should not change this token unless someone else"
		value_description_2="managed to get a hold of the discord webhook URL."

		read_stored_config_value_query_function
		if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
			echo "Storing value and moving on."
			discord_webhook_URL=$read_stored_config_value_query_1
		elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
			echo "${bold}${cyan}*****Create Discord Webhook for reports . . .*****${normal}"
			echo
			echo "Instructions below: "
			echo "Click on your Discord Server, open Server Settings,"
			echo "Integrations, Create Webhooks, Set the name and Channel,"
			echo "and copy webhook URL to paste here."
			echo
			# Regedit Matching in a Bash if Statement - https://linuxhint.com/regex-matching-in-bash-if-statement/
			while :; do
				read -r -p "Enter the Discord webhook URL: " discord_webhook_URL
				echo
				if [[ "$discord_webhook_URL" =~ ^https://discord.com/api/webhooks/.* ]]; then
					break
				else
					echo
					echo "${bold}${red}Invalid webhook input, try again.${normal}"
					echo
					echo ----------------------------------------------------------------------------------
					echo
				fi
			done
			sudo sed -i '\!^discord_webhook_URL =!{h;s!=.*!= '"$discord_webhook_URL"'!};${x;\!^$!{s!!discord_webhook_URL = '"$discord_webhook_URL"'!;H};x}' $drawpile_configuration_values_file
		else
			echo "This message should not be visible."
		fi
		echo
		echo ----------------------------------------------------------------------------------
		echo
		cd "/home/drawpileuser"
		if [[ -d  "/home/drawpileuser/abusereport" ]]; then
			# ---------------------------------------------------------------------------------
			# Testing new concept - commented out temporarily
			# echo Download detected of abusereport files, removing content before downloading.
			# rm -f -R "/home/drawpileuser/abusereport"
			# ---------------------------------------------------------------------------------
			cd abusereport
			
			git config --global --add safe.directory /home/drawpileuser/abusereport
			# Updates local repo
			git fetch
			
			# Checks local commit info
			git_local_commit=$( git rev-parse HEAD )
			# Checks remote commit info
			git_remote_commit=$( git rev-parse '@{u}' )
			
			if [[ "$git_local_commit" == "$git_remote_commit" ]] ; then
				git_repo_status=currently_up_to_date
			else
				# Resets any changes made to the local code so it matches the remote code. 
				git reset --hard origin/master
				git_repo_status=out_of_date
			fi
		else
			git_repo_status=out_of_date
			echo Downloading Drawpile Abuse Report from github.
			echo
			git clone https://github.com/drawpile/abusereport
			cd "/home/drawpileuser/abusereport"
			# Doesn't work
			# drawpile_abuse_report_version_with_git=$( git describe )
			# sudo sed -i '\!^drawpile_abuse_report_version_with_git =!{h;s!=.*!= '"$drawpile_abuse_report_version_with_git"'!};${x;\!^$!{s!!drawpile_abuse_report_version_with_git = '"$drawpile_abuse_report_version_with_git"'!;H};x}' $drawpile_configuration_values_file
			# git describe - fatal: No names found, cannot describe anything.
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		read_stored_completed_status_value_query=$( grep -m 1 "$drawpile_abuse_report_installation_status = " "$drawpile_completed_successfully_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
		
		if [[ "$git_repo_status" == "out_of_date" || ( "$read_stored_completed_status_value_query" == "no" || "$read_stored_completed_status_value_query" == "" ) ]] ; then
			if [[ -e "/etc/systemd/system/drawpile-abuse-report.service" ]]; then
				echo "${bold}${cyan}***** If drawpile-abuse-report.service Running, Stopping Process . . . *****${normal}"
				echo
			fi
			# The number ordering chosen is based on the order in which they appear in RPi-Monitor. Not the order in which they are used in the script.
			service_name_to_check_04=drawpile-abuse-report.service
			if [ -e "/etc/systemd/system/drawpile-abuse-report.service" ]; then
				drawpile_abuse_report_loaded=$( systemctl status $service_name_to_check_04 | grep "Loaded: " | sed -nEr "s/.*$service_name_to_check_04; (.*); vendor.*/\1/p" )
				# ------------------------------------------------------------------------------------------------------------------------------------------------------------
				# Check to ensure output is not blank and find it in an alternate way
				# echo Value: $drawpile_abuse_report_loaded
				# echo
				if [ -z "$drawpile_abuse_report_loaded" ]; then
					# echo Oops. Blank!
					drawpile_abuse_report_loaded=$( systemctl status $service_name_to_check_04 | grep "Loaded: " | sed -nEr "s/.*$service_name_to_check_04; (.*); preset:.*/\1/p" )
					# echo
				fi
				# echo Value: $drawpile_abuse_report_loaded
				# echo
				if [ -z "$drawpile_abuse_report_loaded" ]; then
					drawpile_abuse_report_loaded=error
				fi
				# ------------------------------------------------------------------------------------------------------------------------------------------------------------
				drawpile_abuse_report_status=$( systemctl status $service_name_to_check_04 | grep "Active: " | sed -nEr 's/.*(\(.*\)).*/\1/p' )
				if [ -z "$drawpile_abuse_report_status" ]; then
					drawpile_abuse_report_status=error
				fi
				echo "Service name : $service_name_to_check_04"
				echo "Start on boot: $drawpile_abuse_report_loaded"
				echo "Loaded Status: $drawpile_abuse_report_status"
				sudo systemctl stop --now $service_name_to_check_04
			else
				drawpile_abuse_report_loaded="not_loaded"
				drawpile_abuse_report_status="not_loaded"
				echo "The $service_name_to_check_04 is not yet loaded. No action required."
			fi
			
			
			python_version=$( python --version | awk '{ print $2 }' | perl -0777 -ne '/([0-9]+\.[0-9]+)/; print $1' )
			# python_3_11=$( ls -l /usr/bin/python* | grep "3.11" | awk '{ print $9 }' | grep "3.11" )
			# Sample Output: /usr/bin/python3.11
			# python_3_12=$( ls -l /usr/bin/python* | grep "3.12" | awk '{ print $9 }' | grep "3.12" )
			# Sample Output: /usr/bin/python3.12
			if [[ "$python_version" == "3.12" || "$python_version" == "3.13" ]]; then
				if [ -e "/usr/bin/python3.11" ]; then
					echo
					echo "Python install is $python_version ..."
					echo "Found Python 3.11, proceeding with this version for setup."
					python_command="python3.11"
					echo
				else
					echo
					echo "Python install is $python_version ..."
					echo "Attempting install of Python 3.11 ..."
					sudo $package_install_program python3.11
					echo
					if [ -e "/usr/bin/python3.11" ]; then
						echo "Found Python 3.11, proceeding with this version for setup."
						python_command="python3.11"
						echo
					else
						echo "Unable to use Python 3.11..."
						echo "Proceeding with installed version for setup."
						python_command="python"
						echo
					fi
				fi
			else
				python_command="python"
			fi
			
			owner_id_test=$(find "/home/drawpileuser/abusereport" -prune -printf %U)
			
			# For more info on the -O condition
			#     https://www.pluralsight.com/resources/blog/cloud/conditions-in-bash-scripting-if-statements
			
			if [[ -O "/home/drawpileuser/abusereport" ]] || [[ "$current_username_id" != "$owner_id_test" ]]; then
				# echo "owner"
				sudo chown $current_username:drawpileread "/home/drawpileuser/abusereport" -R
			else
				# echo "no owner"
				# No action required.
				:
			fi
			
			echo
			echo '--------------------------------------------------------------------------------'
			echo "Running command: $python_command -m venv env"
			echo '--------------------------------------------------------------------------------'
			if ! $python_command -m venv env; then
				sudo sed -i '\!^drawpile_abuse_report_installation_status =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!drawpile_abuse_report_installation_status = '"no"'!;H};x}' $drawpile_completed_successfully_values_file
				command_die "${bold}${red}Command \"$python_command -m venv env\" failed.${normal}"
			else
				sudo sed -i '\!^drawpile_abuse_report_installation_status =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!drawpile_abuse_report_installation_status = '"yes"'!;H};x}' $drawpile_completed_successfully_values_file
			fi
			echo
			echo '--------------------------------------------------------------------------------'
			echo "Running command: . env/bin/activate"
			echo '--------------------------------------------------------------------------------'
			. env/bin/activate
			echo
			echo '--------------------------------------------------------------------------------'
			echo "Running command: pip install -r requirements.txt"
			echo '--------------------------------------------------------------------------------'
			pip install -r requirements.txt
			
			# Used to exit virtual environment that is started with this command: . env/bin/activate
			deactivate
		else
			echo "${bold}${green}Abuse report is up to date, skipping.${normal}"
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${cyan}***** Setting Abuse Report for Automatic Startup *****${normal}"

		# Not needed, should be copied/left in a directory writeable to the user running it, drawpileuser
		# sudo cp -R "$dp_install_loc/Programs/abusereport" "/usr/local/bin/abusereport"

		cat <<EOF | sudo tee /usr/local/bin/drawpile_abuse_report >/dev/null
#!/bin/sh
export PORT='$abuse_report_port'
export AUTH_TOKEN='$abuse_report_auth_token'
export SERVER_HOST='$hostname'
export DISCORD_WEBHOOK='$discord_webhook_URL'
cd /home/drawpileuser/abusereport
. env/bin/activate
exec gunicorn report_relay.main:App --bind "localhost:\$PORT" --worker-class aiohttp.GunicornWebWorker
EOF
		sudo chown drawpileuser:drawpileread "/usr/local/bin/./drawpile_abuse_report"
		sudo chmod 755 "/usr/local/bin/./drawpile_abuse_report"
		cat <<EOF | sudo tee /etc/systemd/system/drawpile-abuse-report.service >/dev/null
[Unit]
Description=Drawpile abuse report tool

[Service]
ExecStart=/usr/local/bin/drawpile_abuse_report
User=drawpileuser
# ExecStart=/home/abusereport/start.sh
# Group=abusereport

[Install]
WantedBy=multi-user.target
EOF
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		sudo chmod 664 /etc/systemd/system/drawpile-abuse-report.service
		sudo systemctl daemon-reload
		sudo systemctl restart systemd-modules-load
		wait $!
		sudo systemctl enable drawpile-abuse-report.service
		sudo systemctl start --now drawpile-abuse-report.service
		wait $!
		sudo systemctl status drawpile-abuse-report.service --no-pager -l
		wait $!

		# (Re)start drawpile-srv with --report-url http://localhost:8200/ (or whatever port you used) 
		#
		#
		# Enable abuse reports in the drawpile-srv web UI and punch in what you wrote for AUTH_TOKEN.
		# Enters the AUTH_TOKEN into the Drawpile Database server so the user doesn't have to enter it themselves.
		# echo "Inserting value into server database file so report mechanism works."
		# echo "insert into settings values ('reporttoken', '$abuse_report_auth_token'), ('abusereport', 'true');" | sudo sqlite3 /home/drawpileuser/server.db
	elif [ "$drawpile_abuse_report_installation_status" == "n" ] || [ "$drawpile_abuse_report_installation_status" == "N" ] || [ "$drawpile_abuse_report_installation_status" == "no" ] || [ "$drawpile_abuse_report_installation_status" == "NO" ] || [ "$drawpile_abuse_report_installation_status" == "No" ]; then
		echo "Skipping installation of Abuse Report Tool."
	else
		echo "This message for Abuse Report Tool should not be visible."
	fi
	sudo sed -i '\!^drawpile_abuse_report_installation_status =!{h;s!=.*!= '"$drawpile_abuse_report_installation_status"'!};${x;\!^$!{s!!drawpile_abuse_report_installation_status = '"$drawpile_abuse_report_installation_status"'!;H};x}' $drawpile_configuration_values_file
else
	echo "This message should not be visible."
fi

if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]]; then
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}***** Enable Encrypted Ban Export for Users . . .*****${normal}"
	echo
	variable_to_read_1="drawpile_srv_crypt_key"
	variable_to_read_2="drawpile_srv_crypt_key_status"
	variable_to_read_3=""

	value_description_1="Drawpile Encrypted Ban Export Private Key."
	value_description_2="Used to encrypt ban lists so users can export"
	value_description_3="the data and reuse when hosting a session."
	value_description_4=""
	value_description_5="First value is crypt key, second is if it is enabled/disabled."

	read_stored_config_value_query_function
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing value and moving on."
		drawpile_srv_crypt_key=$read_stored_config_value_query_1
		drawpile_srv_crypt_key_status=$read_stored_config_value_query_2
		reused_drawpile_srv_crypt_key_status=yes
		
		# This is checking for a null value because oops I might have goofed that up, and this should correct the Drawpile_Configuration_Values.txt
		drawpile_srv_crypt_key_length=${#drawpile_srv_crypt_key}		
		if [[ -z "$drawpile_srv_crypt_key" || "$drawpile_srv_crypt_key_length" != "44" ]] && [[ -z "$drawpile_srv_crypt_key_status" || "$drawpile_srv_crypt_key_status" = "=" ]]; then
			# If drawpile_srv_crypt_key is null or not equal to 44 characters, then this option would be declined.
			drawpile_srv_crypt_key_status=no
			echo "Correcting blank value stored in Drawpile_Configuration_Values.txt"
			echo "Variable drawpile_srv_crypt_key_status will be set to: no"
			sudo sed -i '\!^drawpile_srv_crypt_key_status =!{h;s!=.*!= '"$drawpile_srv_crypt_key_status"'!};${x;\!^$!{s!!drawpile_srv_crypt_key_status = '"$drawpile_srv_crypt_key_status"'!;H};x}' $drawpile_configuration_values_file
		elif [[ ! -z "$drawpile_srv_crypt_key" && "$drawpile_srv_crypt_key_length" == "44" ]] && [[ -z "$drawpile_srv_crypt_key_status" || "$drawpile_srv_crypt_key_status" = "=" ]]; then
			# If drawpile_srv_crypt_key is not null and equal to 44 characters, then this option would be accepted.
			drawpile_srv_crypt_key_status=yes
			echo "Correcting blank value stored in Drawpile_Configuration_Values.txt"
			echo "Variable drawpile_srv_crypt_key_status will be set to: yes"
			sudo sed -i '\!^drawpile_srv_crypt_key_status =!{h;s!=.*!= '"$drawpile_srv_crypt_key_status"'!};${x;\!^$!{s!!drawpile_srv_crypt_key_status = '"$drawpile_srv_crypt_key_status"'!;H};x}' $drawpile_configuration_values_file
		else
			# Do nothing as no error was detected.
			# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
			:
		fi
		
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		reused_drawpile_srv_crypt_key_status=no
		echo "Drawpile 2.2.0 and greater now support user exported, server encrypted"
		echo " ban lists. This only concerns sessions that may wish to keep specific"
		echo " users from their sessions that are not banned server wide."
		echo
		echo "Note: Unless multiple servers share the same encryption key, this"
		echo "     means that only the server the session was hosted on can"
		echo "     utilize the exported data file. Moderators can export an"
		echo "     unencrypted copy of this list to manually upload to another"
		echo "     server on a user's request if desired."
		echo
		while :; do
			read -r -p "${bold}${cyan}Would you like to enable this feature?${normal} " drawpile_srv_crypt_key_status
			if [ "$drawpile_srv_crypt_key_status" == "y" ] || [ "$drawpile_srv_crypt_key_status" == "Y" ] || [ "$drawpile_srv_crypt_key_status" == "yes" ] || [ "$drawpile_srv_crypt_key_status" == "YES" ] || [ "$drawpile_srv_crypt_key_status" == "Yes" ] || [ "$drawpile_srv_crypt_key_status" == "n" ] || [ "$drawpile_srv_crypt_key_status" == "N" ] || [ "$drawpile_srv_crypt_key_status" == "no" ] || [ "$drawpile_srv_crypt_key_status" == "NO" ] || [ "$drawpile_srv_crypt_key_status" == "No" ]; then
				sudo sed -i '\!^drawpile_srv_crypt_key_status =!{h;s!=.*!= '"$drawpile_srv_crypt_key_status"'!};${x;\!^$!{s!!drawpile_srv_crypt_key_status = '"$drawpile_srv_crypt_key_status"'!;H};x}' $drawpile_configuration_values_file
				echo
				echo ----------------------------------------------------------------------------------
				echo
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done
		if [ "$drawpile_srv_crypt_key_status" == "y" ] || [ "$drawpile_srv_crypt_key_status" == "Y" ] || [ "$drawpile_srv_crypt_key_status" == "yes" ] || [ "$drawpile_srv_crypt_key_status" == "YES" ] || [ "$drawpile_srv_crypt_key_status" == "Yes" ]; then
			echo "You can choose to import an encrypt key. Selecting no will generate a"
			echo " new key to be used by the server."
			echo
			while :; do
				read -r -p "${bold}${cyan}Would you like to import a crypt key?${normal}  " drawpile_srv_import_crypt_key_status
				if [ "$drawpile_srv_import_crypt_key_status" == "y" ] || [ "$drawpile_srv_import_crypt_key_status" == "Y" ] || [ "$drawpile_srv_import_crypt_key_status" == "yes" ] || [ "$drawpile_srv_import_crypt_key_status" == "YES" ] || [ "$drawpile_srv_import_crypt_key_status" == "Yes" ] || [ "$drawpile_srv_import_crypt_key_status" == "n" ] || [ "$drawpile_srv_import_crypt_key_status" == "N" ] || [ "$drawpile_srv_import_crypt_key_status" == "no" ] || [ "$drawpile_srv_import_crypt_key_status" == "NO" ] || [ "$drawpile_srv_import_crypt_key_status" == "No" ]; then
					echo
					echo ----------------------------------------------------------------------------------
					echo
					break
				else
					echo
					echo "${bold}${red}Invalid input selection, try again.${normal}"
					echo
					echo ----------------------------------------------------------------------------------
					echo
				fi
			done
			if [ "$drawpile_srv_import_crypt_key_status" == "y" ] || [ "$drawpile_srv_import_crypt_key_status" == "Y" ] || [ "$drawpile_srv_import_crypt_key_status" == "yes" ] || [ "$drawpile_srv_import_crypt_key_status" == "YES" ] || [ "$drawpile_srv_import_crypt_key_status" == "Yes" ]; then
				while :; do
					read -r -p "${bold}${cyan}Enter your crypt key now (44 characters long):${normal} " drawpile_srv_crypt_key
					drawpile_srv_crypt_key_length=${#drawpile_srv_crypt_key}
					if [ "$drawpile_srv_crypt_key_length" == "44" ] ; then
						break
					else
						echo
						echo "${bold}${red}Invalid input, try again.${normal}"
						echo
						echo ----------------------------------------------------------------------------------
						echo
					fi
				done
			elif [ "$drawpile_srv_import_crypt_key_status" == "n" ] || [ "$drawpile_srv_import_crypt_key_status" == "N" ] || [ "$drawpile_srv_import_crypt_key_status" == "no" ] || [ "$drawpile_srv_import_crypt_key_status" == "NO" ] || [ "$drawpile_srv_import_crypt_key_status" == "No" ]; then
				echo
				echo ----------------------------------------------------------------------------------
				echo
				echo "${bold}${cyan}Not importing drawpile-srv crypt key, will generate new key.${normal}"
				echo
				if [[ "$USER" = "root" ]] || [[ "$USER" = "Root" ]] || [[ "$USER" = "ROOT" ]] || [[ $EUID == 0 ]]; then
					# echo "Provide the password for: drawpileuser"
					drawpile_srv_crypt_key=$( su -c 'drawpile-srv --generate-crypt-key' drawpileuser)
				else
					drawpile_srv_crypt_key=$( drawpile-srv --generate-crypt-key )
				fi
				echo "Drawpile-srv Crypt-Key Generated: $drawpile_srv_crypt_key"
			else
				echo "This message should not be visible, either key gets imported or created."
			fi
			
		elif [ "$drawpile_srv_crypt_key_status" == "n" ] || [ "$drawpile_srv_crypt_key_status" == "N" ] || [ "$drawpile_srv_crypt_key_status" == "no" ] || [ "$drawpile_srv_crypt_key_status" == "NO" ] || [ "$drawpile_srv_crypt_key_status" == "No" ]; then
			echo "Skipping setup of encrypted key."
		else
			echo "This message should not be visible, feature for server encryption is either enabled or disabled."
		fi
		sudo sed -i '\!^drawpile_srv_crypt_key =!{h;s!=.*!= '"$drawpile_srv_crypt_key"'!};${x;\!^$!{s!!drawpile_srv_crypt_key = '"$drawpile_srv_crypt_key"'!;H};x}' $drawpile_configuration_values_file
	else
		echo "This message should not be visible."
	fi
elif [[ $drawpile_srv_version_stripped < "2.2.0" ]]; then
	reused_drawpile_srv_crypt_key_status="not available"
	echo "Drawpile server is version 2.1.20 or older."
	echo "Incompatible with setting for server encrypted ban list."
	echo "Skipping configuration."
else
	echo "This message should not be visible, drawpile-srv can either do ban list encryption or it cannot."
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}***** Making backup of drawpile-srv systemd files *****${normal}"
echo "${bold}${cyan}*****            before modification.             *****${normal}"
echo
if [[ ! -e "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.service" ]]; then
	echo "Did not find drawpile-srv.service file sample. Downloading and setting up."
	sudo mkdir -p -v "$dp_install_loc/Programs/Drawpile/server"
	sudo $wget_or_wget2_quiet_progress "https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/scripts-for-other-scripts-only/drawpile-srv.service" -O "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.service"
	echo
fi

if [[ -e "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.socket" ]]; then
	if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]]; then
		if grep 'ListenStream=27751' "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.socket" > /dev/null; then
			sudo sed -i -e "s/^# ListenStream=27751/ListenStream=27751/g" "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.socket"
		else
			sudo sed -i -e "s/^ListenStream=27780/ListenStream=27780\n\# Adding a third port activates the web client for 2.2.0 and above.\nListenStream=27751/g" "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.socket"
		fi
	else
		# sudo sed -i -e "s/<title>Drawpile Public Community<\/title>/<title>$hostname Server<\/title>/g" /var/www/html/drawpile/index.html
		sudo sed -i -e "s/^ListenStream=27751/# ListenStream=27751/g" "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.socket"
	fi
elif [[ ! -e "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.socket" ]]; then
	echo "Did not find drawpile-srv.socket file sample. Downloading and setting up."
	sudo mkdir -p -v "$dp_install_loc/Programs/Drawpile/server"
	sudo $wget_or_wget2_quiet_progress "https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/scripts-for-other-scripts-only/drawpile-srv.socket" -O "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.socket"
	echo
	if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]]; then
		# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
		# No changes need to be made to drawpile-srv.socket
		:
	else
		# sudo sed -i -e "s/<title>Drawpile Public Community<\/title>/<title>$hostname Server<\/title>/g" /var/www/html/drawpile/index.html
		sudo sed -i -e "s/^ListenStream=27751/# ListenStream=27751/g" "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.socket"
	fi
else
	echo "This message should not be visible. The file 'drawpile-srv.socket' either exists or it does not."
fi

sudo cp "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.service" "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.service.backup"

echo 'Modifying drawpile-srv.service . . .'

sudo chmod 777 "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.service"
#
cd "$dp_install_loc"
sudo chmod 777 "$dp_install_loc" -R
cd "$dp_install_loc/Programs"
sudo chown drawpileuser:drawpileread "$dp_install_loc/Programs/" -R
sudo mkdir -p -v Drawpile-Srv-Files
cd Drawpile-Srv-Files
sudo chmod 777 "$dp_install_loc/Programs/Drawpile-Srv-Files/" -R
sudo chown drawpileuser:drawpileread "$dp_install_loc/Programs/Drawpile-Srv-Files/" -R
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
# This is for session recordings, however it is not necessary when using file backed sessions. 
# --record "$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec"
#
# Code to place after the database file in order to use httpd to authenticate instead. Username and password is plain text, no hash.
#  --web-admin-access all --web-admin-auth user:pass
#
# Default location of the GUI Database if no location is specified.
# /home/pi/.local/share/drawpile/drawpile-srv/guiserver.db
#
# Location provided by Calle for drawpileuser database. Can be used when drawpile-srv supports socket activation for web admin.
# /home/drawpileuser/server.db
#
#---------------------------------------------------------------------------------------------------------------------------------
function sessions_folder_function () {
	sudo mkdir -p -v sessions
	sudo chmod 775 "$dp_install_loc/Programs/Drawpile-Srv-Files/sessions" -R
	sudo chown drawpileuser:drawpileread "$dp_install_loc/Programs/Drawpile-Srv-Files/sessions" -R
}

function sessions_record_folder_function () {
	sudo mkdir -p -v session-record
	sudo chmod 775 "$dp_install_loc/Programs/Drawpile-Srv-Files/session-record" -R
	sudo chown drawpileuser:drawpileread "$dp_install_loc/Programs/Drawpile-Srv-Files/session-record" -R
}

function template_folder_function () {
	sudo mkdir -p -v templates
	sudo chmod 775 "$dp_install_loc/Programs/Drawpile-Srv-Files/templates" -R
	sudo chown drawpileuser:drawpileread "$dp_install_loc/Programs/Drawpile-Srv-Files/templates" -R
}
#---------------------------------------------------------------------------------------------------------------------------------
#
function systemd_options_definitions_function () {

	if [ "$drawpile_abuse_report_installation_status" == "y" ] || [ "$drawpile_abuse_report_installation_status" == "Y" ] || [ "$drawpile_abuse_report_installation_status" == "yes" ] || [ "$drawpile_abuse_report_installation_status" == "YES" ] || [ "$drawpile_abuse_report_installation_status" == "Yes" ]; then
		drawpile_abuse_report_systemd="--report-url http://localhost:$abuse_report_port/"
	elif [ "$drawpile_abuse_report_installation_status" == "n" ] || [ "$drawpile_abuse_report_installation_status" == "N" ] || [ "$drawpile_abuse_report_installation_status" == "no" ] || [ "$drawpile_abuse_report_installation_status" == "NO" ] || [ "$drawpile_abuse_report_installation_status" == "No" ]; then
		drawpile_abuse_report_systemd=""
	else
		echo "This should not be visible."
	fi
	
	# The systemd startup value is actually inserted where the server encryption of user exportable bans is set.
	# It is only mentioned here because there is no reason to mention it elsewhere, since the web version of drawpile
	# will ve available on the main website.
	if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]] && [[ "$ssl_encryption_config" != "3" ]]; then
		drawpile_2_point_2_description="${bold}web drawpile${normal} - enable server for web version of Drawpile client."
		drawpile_2_point_2_option_text_01=" web drawpile,"
		drawpile_2_point_2_option_text_02=", web drawpile,"
		drawpile_2_point_2_option_text_03=" & web drawpile"
	fi
<<comment_EOF_delete
	if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]] && [[ "$ssl_encryption_config" != "3" ]]; then
		drawpile_2_point_2_description="${bold}web drawpile${normal} - enable server for web version of Drawpile client."
		drawpile_2_point_2_option_text_01=" web drawpile,"
		drawpile_2_point_2_option_text_02=", web drawpile,"
		drawpile_2_point_2_option_text_03=" & web drawpile"
	elif [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]] && [[ "$ssl_encryption_config" == "3" ]]; then
		drawpile_2_point_2_description="${bold}${red}web drawpile - web version of Drawpile client does not work without SSL.${normal}"
		drawpile_2_point_2_option_text_01=" no web drawpile (no SSL available),"
		drawpile_2_point_2_option_text_02=", no web drawpile (no SSL available),"
		drawpile_2_point_2_option_text_03=" & no web drawpile (no SSL available)"
	else
		drawpile_2_point_2_description=""
		drawpile_2_point_2_option_text_01=""
		drawpile_2_point_2_option_text_02=""
		drawpile_2_point_2_option_text_03=""
	fi
comment_EOF_delete
	
	if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]] && [[ "$ssl_encryption_config" != "3" ]]; then
		# 2.2.0 or greater, SSL options are shown
		drawpile_2_point_2_option_no_ssl_text_01="web-admin-port, web drawpile,"
		drawpile_2_point_2_option_no_ssl_text_02="web-admin-port, web drawpile,"
		drawpile_2_point_2_option_no_ssl_text_03="web-admin-port & web drawpile"
	else
		# elif [[ $drawpile_srv_version_stripped < "2.2.0" ]] && [[ "$ssl_encryption_config" != "3" ]]; then
		# 2.1.20 or lesser, SSL options are shown
		#
		# SSL options are not shown
		drawpile_2_point_2_option_no_ssl_text_01="web-admin-port,"
		drawpile_2_point_2_option_no_ssl_text_02="web-admin-port"
		drawpile_2_point_2_option_no_ssl_text_03="web-admin-port"
	fi
	
	

	echo "Determine how you want drawpile-srv to run now. ${underline}Option 2${normal} is recommended"
	echo 'if you have a hostname. If you do not have a hostname, option 15 instead.'
	echo 'All settings will automatically work, though some additional setup for'
	echo 'session templates is required. Read more on the hyperlink below.'
	echo
	echo "${bold}${cyan}Short summary of options:${normal}"
	echo "    Read more --> ${underline}https://drawpile.net/help/server/${normal}"
	echo
	echo "${bold}file backed sessions${normal} - write sessions to file, helps sessions to survive"
	echo '    power outages and server crashes. Can serve as session recordings if server'
	echo '    database set to Archive terminated sessions in wet admin, however filenames are'
	echo '    saved like 926a80d5-3168-401d-b406-f05d3fc05c32.dprec with a'
	echo '    corresponding text file, the session title is inside the text file.'
	echo "${bold}session recording${normal} - records all sessions, but is less useful than file backed"
	echo '    sessions (provided that the option "Archived terminated sessions" is enabled '
	echo '    in web admin). This option is not recommended for use.'
	echo "    or by combining the file backed sessions option and checking ${underline}Archive${normal}"
	echo "    ${underline}terminated sessions${normal}."
	echo "${bold}ssl${normal} - Encrypt data sent so conversations and drawings are kept private."
	echo '    If you do not have this option on, sensitive information should not'
	echo '    be shared in sessions.'
	echo "${bold}templates${normal} - provide default sessions that always exist on the server."
	echo '    This feature is not yet implemented in the graphical user interface but they can be'
	echo '    turned on using one of the options provided below.'
	echo "${bold}web-admin-port${normal} - Enables remote administration of server settings"
	if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]]; then
		echo $drawpile_2_point_2_description
		echo "${bold}web remote admin${normal} - add users, ban users, set auto session reset, etc."
	else
		echo "${bold}web remote admin${normal} - add users, ban users, set auto session reset, etc."
	fi
	echo
}

function systemd_options_with_ssl_enabled_function () {
	# Numbers 1, 2, 3, 4, 6, 8, 11, and else option use SSL.
	echo "SSL is optional for the server, so if you"
	echo "choose no SSL here, you will still be able to"
	echo "use the List Server and Web Admin."
	echo
	echo "${bold}${cyan}These options all use SSL with drawpile-srv.${normal}"
	echo "  1  - all options."
	echo "  ${bold}${cyan}2  - all options except session recording - ${underline}recommended${normal}"
	echo "  3  - web-admin-port,$drawpile_2_point_2_option_text_01 session recording, templates, & ssl"
	echo "  4  - web-admin-port,$drawpile_2_point_2_option_text_01 file backed sessions, & ssl"
	echo "  6  - web-admin-port,$drawpile_2_point_2_option_text_01 session recording, & ssl"
	echo "  8  - web-admin-port,$drawpile_2_point_2_option_text_01 templates, & ssl"
	echo "  11 - web-admin-port$drawpile_2_point_2_option_text_02 & ssl"
	echo
	echo "${bold}${cyan}These options do not use SSL with drawpile-srv. SSL is${normal}"
	if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]]; then
		echo "     ${bold}${cyan}used for the list server, web admin, and web drawpile client only.${normal}"
	else
		echo "     ${bold}${cyan}used for the list server and web admin only.${normal}"
	fi
	echo "  5  - $drawpile_2_point_2_option_no_ssl_text_01 file backed sessions, & templates"
	echo "  7  - $drawpile_2_point_2_option_no_ssl_text_01 session recording, & templates"
	echo "  9  - $drawpile_2_point_2_option_no_ssl_text_02 & file backed sessions"
	echo "  10 - $drawpile_2_point_2_option_no_ssl_text_02 & session recording"
	echo "  12 - $drawpile_2_point_2_option_no_ssl_text_02 & templates"
	echo "  13 - $drawpile_2_point_2_option_no_ssl_text_03"
	echo
	while :; do
		read -r -p "${cyan}${bold}Enter a number and hit enter to continue: ${normal}" systemd_selection
		[[ $systemd_selection =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $systemd_selection >= 1 && $systemd_selection <= 13 )); then
			break
		else
			echo
			echo "Invalid number selection, try again."
			echo
			echo '--------------------------------------------------------------------------------'
			echo
		fi
	done
	echo
}

function systemd_options_with_ssl_enabled_options_function () {
	# Numbers 1, 2, 3, 4, 6, 8, 11, and else option use SSL.
	if [ "$systemd_selection" == "1" ]; then
		systemd_selection_text="1 - all options." && echo "Selected - $systemd_selection_text"
		sessions_folder_function
		sessions_record_folder_function
		template_folder_function
		sudo sed -i '\!^systemd_selection =!{h;s!=.*!= '"$systemd_selection"'!};${x;\!^$!{s!!systemd_selection = '"$systemd_selection"'!;H};x}' $drawpile_configuration_values_file
		systemd_configuration="--record \"$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" $ssl_cert_and_key_startup_config--local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "2" ]; then
		systemd_selection_text="2 - all options except session recording" && echo "Selected - $systemd_selection_text"
		echo '         - recommended'
		sessions_folder_function
		template_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" $ssl_cert_and_key_startup_config--local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "3" ]; then
		systemd_selection_text="3 - web admin,$drawpile_2_point_2_option_text_01 session recording, ssl, & templates." && echo "Selected - $systemd_selection_text"
		sessions_record_folder_function
		template_folder_function
		systemd_configuration="--record \"$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" $ssl_cert_and_key_startup_config--local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "4" ]; then
		systemd_selection_text="4 - web admin,$drawpile_2_point_2_option_text_01 file backed sessions, & ssl" && echo "Selected - $systemd_selection_text"
		sessions_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" $ssl_cert_and_key_startup_config--local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "5" ]; then
		systemd_selection_text="5  - web admin,$drawpile_2_point_2_option_no_ssl_text_01 file backed sessions, & templates" && echo "Selected - $systemd_selection_text"
		sessions_folder_function
		template_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "6" ]; then
		systemd_selection_text="6  - web admin,$drawpile_2_point_2_option_text_01 session recording, & ssl" && echo "Selected - $systemd_selection_text"
		sessions_record_folder_function
		systemd_configuration="--record \"$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" $ssl_cert_and_key_startup_config--local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "7" ]; then
		systemd_selection_text="7  - web admin,$drawpile_2_point_2_option_no_ssl_text_01 session recording, & templates" && echo "Selected - $systemd_selection_text"
		sessions_record_folder_function
		template_folder_function
		systemd_configuration="--record \"$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "8" ]; then
		systemd_selection_text="8  - web admin,$drawpile_2_point_2_option_text_01 ssl, & templates" && echo "Selected - $systemd_selection_text"
		template_folder_function
		systemd_configuration="--templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" $ssl_cert_and_key_startup_config--local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "9" ]; then
		systemd_selection_text="9  - web admin$drawpile_2_point_2_option_no_ssl_text_02 & file backed sessions" && echo "Selected - $systemd_selection_text"
		sessions_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "10" ]; then
		systemd_selection_text="10 - web admin$drawpile_2_point_2_option_no_ssl_text_02 & session recording" && echo "Selected - $systemd_selection_text"
		sessions_record_folder_function
		systemd_configuration="--record \"$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "11" ]; then
		systemd_selection_text="11 - web admin$drawpile_2_point_2_option_text_02 & ssl" && echo "Selected - $systemd_selection_text"
		systemd_configuration="$ssl_cert_and_key_startup_config--local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "12" ]; then
		systemd_selection_text="12 - web admin$drawpile_2_point_2_option_no_ssl_text_02 & templates" && echo "Selected - $systemd_selection_text"
		template_folder_function
		systemd_configuration="--templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "13" ]; then
		systemd_selection_text="13 - w web admin$drawpile_2_point_2_option_no_ssl_text_03" && echo "Selected - $systemd_selection_text"
		systemd_configuration="--local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	else
		echo 'Invalid option selected. Assuming recommended configuration.'
		systemd_selection_text="2  - all options except session recording" && echo "Selected - $systemd_selection_text - ${underline}recommended${normal}"
		systemd_selection=2
		echo
		sessions_folder_function
		template_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" $ssl_cert_and_key_startup_config--local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	fi
}

# --------------------------------------------------------------------------------

function systemd_options_without_ssl_with_hostname_function () {
	# Numbers 5, 7, 9, 10, 12, and 13 option do not use SSL but have a hostname
	echo "${bold}${cyan}These options assume you have a host name.${normal}"
	if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]]; then
		echo "     No SSL is used, so no List Server, Web Admin, or Web Drawpile client."
	else
		# No SSL used --> [[ "$ssl_encryption_config" == "3" ]]
		echo "     No SSL is used, so no List Server or Web Admin."
	fi
	echo "  ${bold}${cyan}5  - $drawpile_2_point_2_option_no_ssl_text_01 file backed sessions, & templates - ${underline}recommended${normal}"
	echo "  7  - $drawpile_2_point_2_option_no_ssl_text_01 session recording, & templates"
	echo "  9  - $drawpile_2_point_2_option_no_ssl_text_02 & file backed sessions"
	echo "  10 - $drawpile_2_point_2_option_no_ssl_text_02 & session recording"
	echo "  12 - $drawpile_2_point_2_option_no_ssl_text_02 & templates"
	echo "  13 - $drawpile_2_point_2_option_no_ssl_text_03"
	echo
	while :; do
		read -r -p "${cyan}${bold}Enter a number and hit enter to continue: ${normal}" systemd_selection
		[[ $systemd_selection =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $systemd_selection == 5 || $systemd_selection == 7 || $systemd_selection == 9 || $systemd_selection == 10 || $systemd_selection == 12 || $systemd_selection == 13 )); then
			break
		else
			echo
			echo "Invalid number selection, try again."
			echo
			echo '--------------------------------------------------------------------------------'
			echo
		fi
	done
	echo
}

function systemd_options_without_ssl_with_hostname_options_function () {
	# Numbers 5, 7, 9, 10, 12, and 13 option do not use SSL but have a hostname

	if [ "$systemd_selection" == "5" ]; then
		systemd_selection_text="5  - web admin,$drawpile_2_point_2_option_no_ssl_text_01 file backed sessions, & templates" && echo "Selected - $systemd_selection_text"
		sessions_folder_function
		template_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "7" ]; then
		systemd_selection_text="7  - web admin,$drawpile_2_point_2_option_no_ssl_text_01 session recording, & templates" && echo "Selected - $systemd_selection_text"
		sessions_record_folder_function
		template_folder_function
		systemd_configuration="--record \"$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "9" ]; then
		systemd_selection_text="9  - web admin$drawpile_2_point_2_option_no_ssl_text_02 & file backed sessions" && echo "Selected - $systemd_selection_text"
		sessions_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "10" ]; then
		systemd_selection_text="10 - web admin$drawpile_2_point_2_option_no_ssl_text_02 & session recording" && echo "Selected - $systemd_selection_text"
		sessions_record_folder_function
		systemd_configuration="--record \"$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "12" ]; then
		systemd_selection_text="12 - web admin$drawpile_2_point_2_option_no_ssl_text_02 & templates" && echo "Selected - $systemd_selection_text"
		template_folder_function
		systemd_configuration="--templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "13" ]; then
		systemd_selection_text="13 - w web admin$drawpile_2_point_2_option_no_ssl_text_03" && echo "Selected - $systemd_selection_text"
		systemd_configuration="--local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	else
		echo 'Invalid option selected. Assuming recommended configuration.'
		systemd_selection_text="5 - web admin,$drawpile_2_point_2_option_no_ssl_text_01 file backed sessions, & templates" && echo "Selected - $systemd_selection_text - ${underline}recommended${normal}"
		systemd_selection=5
		echo
		sessions_folder_function
		template_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/"
	fi
}

# --------------------------------------------------------------------------------

function systemd_options_without_ssl_without_hostname_function () {
	# Numbers 5, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, and 20 option do not use SSL
	echo "${bold}${cyan}These options assume you do not have a host name.${normal}"
	if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]]; then
		echo "     No SSL is used, so no List Server, Web Admin, or Web Drawpile client."
	else
		# No SSL used --> [[ "$ssl_encryption_config" == "3" ]]
		echo "     No SSL is used, so no List Server or Web Admin."
	fi
	echo "  14  - all options."
	echo "  ${bold}${cyan}15  - all options except session recording - ${underline}recommended${normal}"
	echo "  16  - $drawpile_2_point_2_option_no_ssl_text_01 session recording, & templates"
	echo "  17  - $drawpile_2_point_2_option_no_ssl_text_02 & file backed sessions"
	echo "  18  - $drawpile_2_point_2_option_no_ssl_text_02 & session recording"
	echo "  19  - $drawpile_2_point_2_option_no_ssl_text_02 & templates"
	echo "  20  - $drawpile_2_point_2_option_no_ssl_text_03"
	echo
	while :; do
		read -r -p "${cyan}${bold}Enter a number and hit enter to continue: ${normal}" systemd_selection
		[[ $systemd_selection =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $systemd_selection >= 14 && $systemd_selection <= 20 )); then
			break
		else
			echo
			echo "Invalid number selection, try again."
			echo
			echo '--------------------------------------------------------------------------------'
			echo
		fi
	done
	echo
}

function systemd_options_without_ssl_without_hostname_options_function () {
	# Numbers 5, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, and 20 option do not use SSL
	if [ "$systemd_selection" == "14" ]; then
		systemd_selection_text="14 - all options" && echo "Selected - $systemd_selection_text"
		sessions_folder_function
		sessions_record_folder_function
		template_folder_function
		systemd_configuration="--record \"$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "15" ]; then
		systemd_selection_text="15 - all options except session recording" && echo "Selected - $systemd_selection_text"
		echo '         - recommended'
		sessions_folder_function
		template_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --extauth https://drawpile.net/api/ext-auth/" 
	elif [ "$systemd_selection" == "16" ]; then
		systemd_selection_text="16 - web admin,$drawpile_2_point_2_option_no_ssl_text_01 session recording, & templates" && echo "Selected - $systemd_selection_text"
		sessions_record_folder_function
		template_folder_function
		systemd_configuration="--record \"$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "17" ]; then
		systemd_selection_text="17 - web admin$drawpile_2_point_2_option_no_ssl_text_02 & file backed sessions" && echo "Selected - $systemd_selection_text"
		sessions_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "18" ]; then
		systemd_selection_text="18  - web admin$drawpile_2_point_2_option_no_ssl_text_02 session recording" && echo "Selected - $systemd_selection_text"
		sessions_record_folder_function
		systemd_configuration="--record \"$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "19" ]; then
		systemd_selection_text="19  - web admin$drawpile_2_point_2_option_no_ssl_text_02 & templates" && echo "Selected - $systemd_selection_text"
		template_folder_function
		sudo mkdir -p -v templates
		systemd_configuration="--templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --extauth https://drawpile.net/api/ext-auth/"
	elif [ "$systemd_selection" == "20" ]; then
		systemd_selection_text="20 - web admin$drawpile_2_point_2_option_no_ssl_text_03" && echo "Selected - $systemd_selection_text"
		systemd_configuration="--extauth https://drawpile.net/api/ext-auth/"
	else
		echo 'Invalid option selected. Assuming recommended configuration.'
		systemd_selection_text="15 - all options except session recording" && echo "Selected - $systemd_selection_text ${underline}recommended${normal}"
		systemd_selection=15
		echo
		sessions_folder_function
		template_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --extauth https://drawpile.net/api/ext-auth/" 
	fi
}
# --------------------------------------------------------------------------------

echo "${bold}${cyan}***** Drawpile Server Start Up Options . . .*****${normal}"
echo

if [[ ( "$reused_hostname_selection" == "no" || "$reused_ssl_encryption_config" == "no" || "$reused_drawpile_abuse_report_installation_status" == "no" || "$reused_drawpile_srv_crypt_key_status" == "no" ) && "$drawpile_script_completed_test" == "drawpile_script_completed = yes" ]]; then
	systemd_selection=$( grep -m 1 "systemd_selection = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
	systemd_selection_text=$( grep -m 1 "systemd_selection_text = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
	echo
	echo "${bold}${red}Changes detected that require re-running drawpile-srv startup options.${normal}"
	echo
	echo "${bold}${red}Value previously selected:${normal}          $systemd_selection"
	echo
	echo "${bold}${red}Text value of previously selected:${normal}  $systemd_selection_text"
	echo
	maybe_use_config_value=n
	sleep 5
else
	# if [[ ( "$reused_hostname_selection" == "no" || "$reused_ssl_encryption_config" == "no" || "$reused_drawpile_abuse_report_installation_status" == "no" || "$reused_drawpile_srv_crypt_key_status" == "no" ) && "$drawpile_script_completed_test" == "drawpile_script_completed = no" ]]; then
	# Script hasn't completed a successful run, need to generate config regardless.
	# Regeneration is not mandatory if data was reused.
	variable_to_read_1="systemd_selection"
	variable_to_read_2="systemd_selection_text"
	variable_to_read_3="systemd_configuration"

	value_description_1="This value corresponds to server related startup settings: "
	value_description_2=""
	value_description_3=""
	value_description_4=""
	value_description_5=""

	read_stored_config_value_query_function
fi
	
if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	systemd_selection=$read_stored_config_value_query_1
	systemd_selection_text=$read_stored_config_value_query_2
	systemd_configuration=$read_stored_config_value_query_3
	reused_systemd_selection=yes
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	reused_systemd_selection=no
	systemd_options_definitions_function
	if [ "$ssl_encryption_config" == "1" ] || [ "$ssl_encryption_config" == "2" ]; then
		# echo 'Press 1 for Self Signed Certificates'. Numbers 1, 2, 3, 4, 6, 8, 11, and else option use SSL. 
		# echo 'Press 2 for Lets Encrypt'. Numbers 1, 2, 3, 4, 6, 8, 11, and else option use SSL. 
		systemd_options_with_ssl_enabled_function
		systemd_options_with_ssl_enabled_options_function
	elif [ "$ssl_encryption_config" == "3" ]; then
		# echo 'Press 3 for no SSL security.' Numbers 5, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20
		if [ "$hostname" == "no_value_selected" ]; then
			systemd_options_without_ssl_without_hostname_function
			systemd_options_without_ssl_without_hostname_options_function
		else
			systemd_options_without_ssl_with_hostname_function
			systemd_options_without_ssl_with_hostname_options_function
		fi
	else
		# echo Invalid option selected. Assuming option 2 intended.
		# echo 'Press 2 for Lets Encrypt'
		systemd_options_with_ssl_enabled_function
		systemd_options_with_ssl_enabled_options_function
	fi
	# --------------------------------------------------------------------------------
	# --------------------------------------------------------------------------------
	if [ "$drawpile_abuse_report_installation_status" == "y" ] || [ "$drawpile_abuse_report_installation_status" == "Y" ] || [ "$drawpile_abuse_report_installation_status" == "yes" ] || [ "$drawpile_abuse_report_installation_status" == "YES" ] || [ "$drawpile_abuse_report_installation_status" == "Yes" ]; then
		drawpile_abuse_report_systemd="--report-url http://localhost:$abuse_report_port/"
		systemd_configuration="$systemd_configuration $drawpile_abuse_report_systemd"
	else
		# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
		:
	fi
	# --------------------------------------------------------------------------------
	if [ "$drawpile_srv_crypt_key_status" == "y" ] || [ "$drawpile_srv_crypt_key_status" == "Y" ] || [ "$drawpile_srv_crypt_key_status" == "yes" ] || [ "$drawpile_srv_crypt_key_status" == "YES" ] || [ "$drawpile_srv_crypt_key_status" == "Yes" ]; then
		systemd_configuration="$systemd_configuration --crypt-key \"$drawpile_srv_crypt_key\""
	else
		# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
		:
	fi
	# --------------------------------------------------------------------------------
	if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]] && [[ "$ssl_encryption_config" != "3" ]]; then
		drawpile_web_support_systemd="--websocket-port 27751 --websocket-listen 127.0.0.1"
		systemd_configuration="$systemd_configuration $drawpile_web_support_systemd"
	else
		# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
		:
	fi
	# --------------------------------------------------------------------------------
	# --------------------------------------------------------------------------------
	sudo sed -i '\!^systemd_selection =!{h;s!=.*!= '"$systemd_selection"'!};${x;\!^$!{s!!systemd_selection = '"$systemd_selection"'!;H};x}' $drawpile_configuration_values_file
	sudo sed -i '\!^systemd_selection_text =!{h;s!=.*!= '"$systemd_selection_text"'!};${x;\!^$!{s!!systemd_selection_text = '"$systemd_selection_text"'!;H};x}' $drawpile_configuration_values_file
	sudo sed -i '\!^systemd_configuration =!{h;s!=.*!= '"$systemd_configuration"'!};${x;\!^$!{s!!systemd_configuration = '"$systemd_configuration"'!;H};x}' $drawpile_configuration_values_file
else
	echo "This message should not be visible."
fi
echo
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]]; then
	# --------------------------------------------------------------------------------
	#1 - Socket Activation
	# --------------------------------------------------------------------------------
	cat <<EOF | sudo tee "$dp_install_loc/Programs/Drawpile/server/drawpile-srv01.service" >/dev/null
[Unit]
Description=Drawpile dedicated server
Documentation=man:drawpile-srv(1)
After=network.target
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
[Service]
# If you are using a self-built or distribution provided version with
#      systemd integration, use this to enable socket activation:
Type=notify
NotifyAccess=main
# --------------------------------------------------------------------------------
# Note: set this to the correct path and add -d or -c to load the right configuration file
ExecStart=$location_created_executable_dpsrv -d /home/drawpileuser/server.db --web-admin-port 27780 $systemd_configuration
# --------------------------------------------------------------------------------
# Integration of Systemd watchdog, which allows restarting the service when it gets stuck. 
#      https://github.com/drawpile/Drawpile/commit/e46dc9aea1ddf90d812bf8a60a229746a4b19fb4
Restart=always
WatchdogSec=60s
# --------------------------------------------------------------------------------
# Note: in order to use session recording and SSL safely,
#       a dedicated user account should be created for drawpile-srv.
User=drawpileuser
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
[Install]
Also=drawpile-srv.socket
WantedBy=multi-user.target
EOF
	# --------------------------------------------------------------------------------
	#2 - Server starts on Raspberry Pi power up
	# --------------------------------------------------------------------------------
	cat <<EOF | sudo tee "$dp_install_loc/Programs/Drawpile/server/drawpile-srv02.service" >/dev/null
[Unit]
Description=Drawpile dedicated server
Documentation=man:drawpile-srv(1)
After=network.target
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
[Service]
# If you are using a self-built or distribution provided version with
#      systemd integration, use this to enable socket activation:
Type=notify
NotifyAccess=main
# --------------------------------------------------------------------------------
# Note: set this to the correct path and add -d or -c to load the right configuration file
ExecStart=$location_created_executable_dpsrv -d /home/drawpileuser/server.db --web-admin-port 27780 $systemd_configuration
# --------------------------------------------------------------------------------
# Integration of Systemd watchdog, which allows restarting the service when it gets stuck. 
#      https://github.com/drawpile/Drawpile/commit/e46dc9aea1ddf90d812bf8a60a229746a4b19fb4
Restart=always
WatchdogSec=60s
# --------------------------------------------------------------------------------
# Note: in order to use session recording and SSL safely,
#       a dedicated user account should be created for drawpile-srv.
User=drawpileuser
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
[Install]
Also=drawpile-srv.socket
WantedBy=multi-user.target
EOF
	# --------------------------------------------------------------------------------
	# --------------------------------------------------------------------------------
else
	# --------------------------------------------------------------------------------
	#1 - Socket Activation
	# --------------------------------------------------------------------------------
	cat <<EOF | sudo tee "$dp_install_loc/Programs/Drawpile/server/drawpile-srv01.service" >/dev/null
[Unit]
Description=Drawpile dedicated server
After=network.target
Documentation=man:drawpile-srv
# --------------------------------------------------------------------------------
[Service]
# Note: set this to the correct path and add -d or -c to load the right configuration file
ExecStart=$location_created_executable_dpsrv -d /home/drawpileuser/server.db --web-admin-port 27780 $systemd_configuration
# --------------------------------------------------------------------------------
# The AppImage is not built with systemd integration at the moment,
#      so type=simple should be used with it:
# Type=simple
# Restart=always
# --------------------------------------------------------------------------------
# If you are using a self-built or distribution provided version with
#      systemd integration, use this to enable socket activation:
Type=notify
NotifyAccess=main
# --------------------------------------------------------------------------------
# Note: in order to use session recording and SSL safely,
#      a dedicated user account should be created for drawpile-srv.
User=drawpileuser
# --------------------------------------------------------------------------------
[Install]
WantedBy=multi-user.target
EOF
	# --------------------------------------------------------------------------------
	#2 - Server starts on Raspberry Pi power up
	# --------------------------------------------------------------------------------
	cat <<EOF | sudo tee "$dp_install_loc/Programs/Drawpile/server/drawpile-srv02.service" >/dev/null
[Unit]
Description=Drawpile dedicated server
After=network.target
Documentation=man:drawpile-srv
# --------------------------------------------------------------------------------
[Service]
# Note: set this to the correct path and add -d or -c to load the right configuration file
ExecStart=$location_created_executable_dpsrv -d /home/drawpileuser/server.db --web-admin-port 27780 $systemd_configuration
# --------------------------------------------------------------------------------
# The AppImage is not built with systemd integration at the moment,
#      so type=simple should be used with it:
Type=simple
Restart=always
# --------------------------------------------------------------------------------
# If you are using a self-built or distribution provided version with
#      systemd integration, use this to enable socket activation:
# Type=notify
# NotifyAccess=main
# --------------------------------------------------------------------------------
# Note: in order to use session recording and SSL safely,
#       a dedicated user account should be created for drawpile-srv.
User=drawpileuser
# --------------------------------------------------------------------------------
[Install]
WantedBy=multi-user.target
EOF
	# --------------------------------------------------------------------------------
	# --------------------------------------------------------------------------------
fi
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

systemd_watchdog_integration_query=$( grep -m 1 "systemd_watchdog_integration = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
wait $!
if [ -z "$systemd_watchdog_integration_query" ] || [ "$systemd_watchdog_integration_query" = "=" ]; then
	systemd_watchdog_integration="error"
else
	systemd_watchdog_integration=$systemd_watchdog_integration_query
fi


if [[ "$reused_hostname_selection" == "yes" && "$reused_ssl_encryption_config" == "yes" && "$reused_drawpile_abuse_report_installation_status" == "yes" && ( "$reused_drawpile_srv_crypt_key_status" == "yes" || "$reused_drawpile_srv_crypt_key_status" == "not available" ) && "$reused_systemd_selection" == "yes" && ( ( ( $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ) && "$systemd_watchdog_integration" == "yes" ) || ( ( $drawpile_srv_version_stripped != "2.2.0" || $drawpile_srv_version_stripped < "2.2.0" ) && "$systemd_watchdog_integration" == "no" ) ) ]]; then
	if [[ ( "$drawpile_srv_socket_loaded" == "enabled" && ( "$drawpile_srv_socket_status" == "(running)" || "$drawpile_srv_socket_status" == "(listening)" ) && "$drawpile_srv_service_loaded" == "disabled") || ( "$drawpile_srv_socket_loaded" == "disabled" && "$drawpile_srv_service_loaded" == "enabled" && "$drawpile_srv_service_status" == "(running)" ) || "$drawpile_srv_service_status" == "(running)" ]]; then
		stop_drawpile_srv_if_running_function
		echo '--------------------------------------------------------------------------------'
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${cyan}*****Making installation of compiled program,*****${normal}"
		echo "${bold}${cyan}*****      libraries, and documentation      *****${normal}"
		echo "${bold}${cyan}*****          to proper locations.          *****${normal}"
		echo
		#Location of created executable --> /usr/local/bin/
		cd "$dp_install_loc/Programs/Drawpile/build"
		. ~/.cargo/env
		sudo cmake --install .
		wait $!
		# sudo make install
		echo
		echo '--------------------------------------------------------------------------------'
		echo '--------------------------------------------------------------------------------'
		echo
		start_drawpile_srv_if_updated_function
	else
		echo "${bold}${green}Skipping copying files drawpile-srv.service and drawpile-srv.socket, no changes made.${normal}"
		echo
		echo "${bold}${green}Skipping reloading systemctl and systemd.${normal}"
		echo
		echo '--------------------------------------------------------------------------------'
		echo '--------------------------------------------------------------------------------'
		echo
	fi
else
	if [[ ( "$drawpile_srv_socket_loaded" == "enabled" && ( "$drawpile_srv_socket_status" == "(running)" || "$drawpile_srv_socket_status" == "(listening)" ) && "$drawpile_srv_service_loaded" == "disabled") || ( "$drawpile_srv_socket_loaded" == "disabled" && "$drawpile_srv_service_loaded" == "enabled" && "$drawpile_srv_service_status" == "(running)" ) || "$drawpile_srv_service_status" == "(running)" ]]; then
		stop_drawpile_srv_if_running_function
		echo '--------------------------------------------------------------------------------'
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${cyan}*****Making installation of compiled program,*****${normal}"
		echo "${bold}${cyan}*****      libraries, and documentation      *****${normal}"
		echo "${bold}${cyan}*****          to proper locations.          *****${normal}"
		echo
		#Location of created executable --> /usr/local/bin/
		cd "$dp_install_loc/Programs/Drawpile/build"
		. ~/.cargo/env
		sudo cmake --install .
		wait $!
		# sudo make install
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${yellow}Copying files drawpile-srv.service and drawpile-srv.socket:${normal}"
	echo "${bold}${yellow} * Initial server configuration.${normal}"
	echo "${bold}${yellow} * Initial setup completed, but there's changes to the systemd files.${normal}"
	echo "${bold}${yellow} * Requested changes to server configuration have been made.${normal}"
	echo
	echo "${bold}${yellow}Reloading systemctl and systemd.${normal}"
	echo
	# elif [[ "$reused_drawpile_abuse_report_installation_status" == "no" || "$reused_drawpile_srv_crypt_key_status" == "no" || "$reused_systemd_selection" == "no" ]]; then
	sudo chmod 664 "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.service"
	sudo chmod 664 "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.service.backup"
	sudo chmod 664 "$dp_install_loc/Programs/Drawpile/server/drawpile-srv01.service"
	sudo chmod 664 "$dp_install_loc/Programs/Drawpile/server/drawpile-srv02.service"

	echo "${bold}${yellow}Copying files drawpile-srv.service and drawpile-srv.socket to make systemd work.${normal}"
	sudo cp "$dp_install_loc/Programs/Drawpile/server/drawpile-srv01.service" /etc/systemd/system/
	sudo cp "$dp_install_loc/Programs/Drawpile/server/drawpile-srv02.service" /etc/systemd/system/
	sudo cp "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.socket" /etc/systemd/system/
	echo
	echo "${bold}${yellow}Reloading systemctl and systemd.${normal}"
	echo
	sudo systemctl daemon-reload
	sudo systemctl restart systemd-modules-load
	wait $!
	# This specific step ensures a database file is generated and permissions assigned to it
	# so drawpileuser can access it.
	sudo cp /etc/systemd/system/drawpile-srv02.service /etc/systemd/system/drawpile-srv.service
	wait $!
	# sudo systemctl daemon-reload && sudo systemctl restart systemd-modules-load
	sudo systemctl daemon-reload
	sudo systemctl restart systemd-modules-load
	wait $!
	if [ "`systemctl is-enabled drawpile-srv.service`" = "disabled" ]; then
		# sudo systemctl start --now drawpile-srv.service && sleep 1
		sudo systemctl start --now drawpile-srv.service
		wait $!
		sleep 5
		sudo chmod 770 /home/drawpileuser/server.db
		sudo chown drawpileuser:drawpileread /home/drawpileuser/server.db
		sudo systemctl stop --now drawpile-srv.service
		wait $!
		echo
		echo '--------------------------------------------------------------------------------'
		echo '--------------------------------------------------------------------------------'
	elif [[ ( "$drawpile_srv_socket_loaded" == "enabled" && ( "$drawpile_srv_socket_status" == "(running)" || "$drawpile_srv_socket_status" == "(listening)" ) && "$drawpile_srv_service_loaded" == "disabled") || "$drawpile_srv_socket_loaded" == "disabled" && "$drawpile_srv_service_loaded" == "enabled" && "$drawpile_srv_service_status" == "(running)" ]]; then
		echo '--------------------------------------------------------------------------------'
		echo
		start_drawpile_srv_if_updated_function
	else
		echo
		echo '--------------------------------------------------------------------------------'
		echo '--------------------------------------------------------------------------------'
		:
		# Do nothing as no error was detected.
		# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.	
	fi
	
	if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]]; then
		# if [[ ( $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ) && "$systemd_watchdog_integration" == "yes" ]]; then
		sudo sed -i '\!^systemd_watchdog_integration =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!systemd_watchdog_integration = '"yes"'!;H};x}' $drawpile_configuration_values_file
	else
		# if [[ ( $drawpile_srv_version_stripped != "2.2.0" || $drawpile_srv_version_stripped < "2.2.0" ) && "$systemd_watchdog_integration" == "no" ]]; then
		sudo sed -i '\!^systemd_watchdog_integration =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!systemd_watchdog_integration = '"no"'!;H};x}' $drawpile_configuration_values_file
		
	fi
fi
echo
# This function is no longer used but was a lot of work, so keeping for notes
function allowed_and_disallowed_characters_function () {
	echo
	echo "${bold}${green}You can use the following special characters: ${normal}"
	echo "${bold}${green} ~ \` ! @ # $ % ^ & * ( ) - _ = + { } [ ] | \ ; : ' \" , . < > ? ${normal}"
	echo
	echo "${bold}${red}You CANNOT use the ! character. ${normal}"
	# Old Notes
	# Technically the symbols: ! @ : '
	# work, however they are disallowed because of List Server and possibly confusing the script
	# Expression vs 2.1
	# [[ $nginx_username_2 =~ ^[a-zA-Z0-9*_=~\&\(\)\+\;\,\.\$-]*$ ]]
	# Original Expression
	# [[ $nginx_username_1 =~ ^[a-zA-Z0-9@*_=:\'\&\(\)\+\;\,\.\$-]*$ ]]
	echo
}
# ----------------------------------------------------------------------------------
# This function is no longer used but was a lot of work, so keeping for notes
function nginx_username_function () {
	read -r -p "01 - Enter username ONLY (without restricted characters): " nginx_username_1
	while :; do
		if [[ $nginx_username_1 =~ ^[a-zA-Z0-9*_=~\&\(\)\+\;\,\.\$-]*$ ]]; then
			break
		else
			allowed_and_disallowed_characters_function
			read -r -p "01 - Enter username ONLY (without restricted characters): " nginx_username_1
		fi
	done

	read -r -p "02 - Enter username again (without restricted characters): " nginx_username_2
	while :; do
		if [[ $nginx_username_2 =~ ^[a-zA-Z0-9*_=~\&\(\)\+\;\,\.\$-]*$ ]]; then
			break
		else
			allowed_and_disallowed_characters_function
			read -r -p "02 - Enter username again (without restricted characters): " nginx_username_2
		fi
	done
}
# ----------------------------------------------------------------------------------
# This function is no longer used but was a lot of work, so keeping for notes
function nginx_password_function () {
	read -r -p "01 - Enter password ONLY (without restricted characters): " nginx_htpasswd_1
	while :; do
		if [[ $nginx_htpasswd_1 =~ ^[a-zA-Z0-9*_=~\&\(\)\+\;\,\.\$-]*$ ]]; then
			break
		else
			allowed_and_disallowed_characters_function
			read -r -p "01 - Enter password ONLY (without restricted characters): " nginx_htpasswd_1
		fi
	done

	read -r -p "02 - Enter password (without restricted characters) again: " nginx_htpasswd_2
	while :; do
		if [[ $nginx_htpasswd_2 =~ ^[a-zA-Z0-9*_=~\&\(\)\+\;\,\.\$-]*$ ]]; then
			break
		else
			allowed_and_disallowed_characters_function
			read -r -p "02 - Enter password (without restricted characters) again: " nginx_htpasswd_2
		fi
	done
}
# ----------------------------------------------------------------------------------
echo "${bold}${cyan}*****     Setting up NGINX for remote authentication     *****${normal}"
echo "${bold}${cyan}*****             for Server Administration.             *****${normal}"
echo
function nginx_username_and_password_function () {
	nginx_username_and_password_reuse_test_condition="false"
	echo 'Please type in a username you wish to use for making changes to your drawpile'
	echo 'server. If you make a mistake or need to update the server login, open a new'
	echo 'terminal window and type in the following:'
	echo
	echo 'sudo htpasswd -bc /etc/nginx/passwords USERNAME PASSWORD'
	echo
	echo "${bold}${red}***************************** IMPORTANT NOTE: *****************************${normal}"
	echo "     Certain portions of the script require storing your username and password"
	echo "     in plain text format on the server."
	echo
	echo "     The purpose is so the list server gains access to the admin interface"
	echo "     to automatically list sessions that are hosted on the server and have"
	echo "     a default username and login for the new web admin interface page."
	echo
	echo "     Drawpile-Monitor uses this to gain access to the admin API to auto"
	echo "     moderate sessions, usernames, and session aliases. This will only"
	echo "     be stored for this one should you choose to utilize this feature."
	echo "${bold}${red}***************************** IMPORTANT NOTE: *****************************${normal}"
	# login_credentials_length_minimum="14"
	echo
	echo "${bold}${green}This will be your username and login for web administration of the server.${normal}"
	echo
	echo "${bold}${red}Please note, both username and password minimum length: $login_credentials_length_minimum characters ${normal}"
	echo
	while :; do
		read -r -p "Enter username                    : " nginx_username_1
		read -r -p "Enter username again              : " nginx_username_2
		nginx_username_length_1=${#nginx_username_1}
		nginx_username_length_2=${#nginx_username_2}
		echo
		if [[ "$nginx_username_1" != "$nginx_username_2" ]]; then
			echo "${bold}${red}Usernames entered do not match!${normal}"
			echo
		elif (( "$nginx_username_length_1" < "$login_credentials_length_minimum" || "$nginx_username_length_2" < "$login_credentials_length_minimum" )); then
			echo "${bold}${red}Less than minimum length required ($login_credentials_length_minimum).${normal}"
			echo "${bold}${red}Please try again.${normal}"
			echo
		else
			break
		fi
	done
	echo "${bold}${green}Server Administration username is :${normal} $nginx_username_1"
	echo
	while :; do
		read -r -p "Enter password                    : " nginx_htpasswd_1
		read -r -p "Enter password again              : " nginx_htpasswd_2
		nginx_password_length_1=${#nginx_htpasswd_1}
		nginx_password_length_2=${#nginx_htpasswd_2}
		echo
		if [[ "$nginx_htpasswd_1" != "$nginx_htpasswd_2" ]]; then
			echo "${bold}${red}Passwords entered do not match!${normal}"
			echo
		elif (( "$nginx_password_length_1" < "$login_credentials_length_minimum" || "$nginx_password_length_2" < "$login_credentials_length_minimum" )); then
			echo "${bold}${red}Less than minimum length required ($login_credentials_length_minimum).${normal}"
			echo "${bold}${red}Please try again.${normal}"
			echo
		elif [[ ( "$nginx_username_1" == "$nginx_htpasswd_2" ) && "$nginx_reusing_login_and_password_status" == "disabled" ]]; then
			echo "${bold}${red}For security reasons, the username and password${normal}"
			echo "${bold}${red}cannot be the same. Please try again.${normal}"
			echo
		else
			break
		fi
	done
	echo "${bold}${green}Server Administration password is :${normal} $nginx_htpasswd_1"
	echo
	if ! sudo htpasswd -bc /etc/nginx/passwords "$nginx_username_1" "$nginx_htpasswd_1"; then
		command_die "${bold}${red}Command to generate username and password failed.${normal}"
	fi
}

if [[ -e "/etc/nginx/passwords" ]]; then
	echo "${bold}${green}Located password file: /etc/nginx/passwords${normal}"
	echo
	echo "${bold}${cyan}Contains the following usernames and encoded passwords${normal}"
	echo "${bold}${cyan}     in format USERNAME:PASSWORD (encoded, not human readable)${normal}"
	cat /etc/nginx/passwords
	echo
	echo 
	echo "${bold}${cyan}How would you like to proceed?${normal}"
	echo " ${cyan}1 - Reuse existing username(s) and password(s)${normal}"
	echo "       ${bold}${red}Note:${normal} Will display first three characters of password"
	echo "       to verify successful retrieval of password."
	echo " ${cyan}2 - Clear all data and create new username and password${normal}"
	echo
	while :; do
		read -r -p "${bold}${cyan}Please type 1 or 2:${normal} " nginx_username_and_password_reuse
		echo
		if (( "$nginx_username_and_password_reuse" >= "1" && "$nginx_username_and_password_reuse" <= "2" )) ; then
			break
		else
			echo
			echo "${bold}${red}Invalid input selection, try again.${normal}"
			echo
			echo ----------------------------------------------------------------------------------
			echo
		fi
	done
	if [ "$nginx_username_and_password_reuse" == "1" ]; then
		# 1 - Reuse existing username(s) and password(s)
		nginx_username_encoded_1=$( grep -m 1 "nginx_username_encoded_1 = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
		nginx_htpasswd_encoded_1=$( grep -m 1 "nginx_htpasswd_encoded_1 = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
		
		if [ -z "$nginx_username_encoded_1" ] || [ -z "$nginx_htpasswd_encoded_1" ]; then
			echo "${bold}${red}Wasn't able to read username and/or password from:${normal} $drawpile_configuration_values_file"
			echo "${bold}${red}Regenerating username and password.${normal}"
			echo
			nginx_username_and_password_function
		else
			#Value not null, proceeding.
			nginx_username_1="$(echo "$nginx_username_encoded_1" | python -c 'import sys; from urllib.parse import unquote; print(unquote(sys.stdin.readline().strip()))')"
			
			nginx_htpasswd_1="$(echo "$nginx_htpasswd_encoded_1" | python -c 'import sys; from urllib.parse import unquote; print(unquote(sys.stdin.readline().strip()))')"
			nginx_htpasswd_short_1=${nginx_htpasswd_1:0:3}
			
			echo "${bold}${green}Username retrieved for script     :${normal} $nginx_username_1"
			echo "${bold}${green}Password retrieved for script     :${normal} $nginx_htpasswd_short_1"
			nginx_username_and_password_reuse_test_condition="true"
		fi
	elif [ "$nginx_username_and_password_reuse" == "2" ]; then
		# 2 - Clear all data and create new username and password
		nginx_username_and_password_function
	else
		echo "This message should not be visible."
	fi
else
	nginx_username_and_password_function
fi
echo
echo '--------------------------------------------------------------------------------'
echo
function nginx_username_and_password_admin_ui_function () {
	nginx_username_and_password_admin_ui_reuse_test_condition="false"
	echo "${bold}${green}This will be your username and password for logging into the new ${normal}"
	echo "${bold}${green}web admin interface. After that, you can use the username and ${normal}"
	echo "${bold}${green}password you just created above to log into the interface to ${normal}"
	echo "${bold}${green}create roles and users to act as moderators, admins, etc. ${normal}"
	echo 
	if [[ "$nginx_reusing_login_and_password_status" == "disabled" ]]; then
		echo "${bold}${red}Because of this, you can't reuse either the username or password${normal}"
		echo "${bold}${red}created earlier. This is necessary to help enforce security and${normal}"
		echo "${bold}${red}prevent unauthorized access.${normal}"
		echo
	fi
	echo "${bold}${red}If you select later to enable Fail2Ban, failing multiple times ${normal}"
	echo "${bold}${red}within a short period, you will be locked out until the${normal}"
	echo "${bold}${red}configured duration expires.${normal}"
	echo
	# login_credentials_length_minimum="14"
	while :; do
		read -r -p "Enter username                    : " nginx_username_admin_ui_1
		read -r -p "Enter username again              : " nginx_username_admin_ui_2
		nginx_username_admin_ui_length_1=${#nginx_username_admin_ui_1}
		nginx_username_admin_ui_length_2=${#nginx_username_admin_ui_2}
		echo
		if [[ "$nginx_username_admin_ui_1" != "$nginx_username_admin_ui_2" ]]; then
			echo "${bold}${red}Usernames entered do not match!${normal}"
			echo
		elif (( "$nginx_username_admin_ui_length_1" < "$login_credentials_length_minimum" || "$nginx_username_admin_ui_length_2" < "$login_credentials_length_minimum" )); then
			echo "${bold}${red}Less than minimum length required ($login_credentials_length_minimum).${normal}"
			echo "${bold}${red}Please try again.${normal}"
			echo
		elif [[ ( "$nginx_username_admin_ui_1" == "$nginx_username_1" || "$nginx_username_admin_ui_1" == "$nginx_htpasswd_2" ) && "$nginx_reusing_login_and_password_status" == "disabled" ]]; then
			echo "${bold}${red}For security reasons, the username cannot be${normal}"
			echo "${bold}${red}reused. Please try again.${normal}"
			echo
		else
			break
		fi
	done
	echo "${bold}${green}New Web Admin username is         :${normal} $nginx_username_admin_ui_1"
	echo
	while :; do
		read -r -p "Enter password                    : " nginx_htpasswd_admin_ui_1
		read -r -p "Enter password again              : " nginx_htpasswd_admin_ui_2
		nginx_htpasswd_admin_ui_length_1=${#nginx_htpasswd_admin_ui_1}
		nginx_htpasswd_admin_ui_length_2=${#nginx_htpasswd_admin_ui_2}
		echo
		if [[ "$nginx_htpasswd_admin_ui_1" != "$nginx_htpasswd_admin_ui_2" ]]; then
			echo "${bold}${red}Passwords entered do not match!${normal}"
			echo
		elif (( "$nginx_htpasswd_admin_ui_length_1" < "$login_credentials_length_minimum" || "$nginx_htpasswd_admin_ui_length_2" < "$login_credentials_length_minimum" )); then
			echo "${bold}${red}Less than minimum length required ($login_credentials_length_minimum).${normal}"
			echo "${bold}${red}Please try again.${normal}"
			echo
		elif [[ ( "$nginx_username_admin_ui_1" == "$nginx_htpasswd_admin_ui_2" ) && "$nginx_reusing_login_and_password_status" == "disabled" ]]; then
			echo "${bold}${red}For security reasons, the username and password${normal}"
			echo "${bold}${red}cannot be the same. Please try again.${normal}"
			echo
		elif [[ ( "$nginx_htpasswd_admin_ui_1" == "$nginx_username_1" || "$nginx_htpasswd_admin_ui_1" == "$nginx_htpasswd_2") && "$nginx_reusing_login_and_password_status" == "disabled" ]]; then
			echo "${bold}${red}For security reasons, the password cannot be${normal}"
			echo "${bold}${red}reused. Please try again.${normal}"
			echo
		else
			break
		fi
	done
	echo "${bold}${green}New Web Admin password is         :${normal} $nginx_htpasswd_admin_ui_1"
	echo
	if ! sudo htpasswd -bc /etc/nginx/passwords-admin-ui "$nginx_username_admin_ui_1" "$nginx_htpasswd_admin_ui_1"; then
		command_die "${bold}${red}Command to generate username and password failed.${normal}"
	fi
}

if [[ "$ssl_encryption_config" != "3" ]]; then
	if [[ -e "/etc/nginx/passwords-admin-ui" ]]; then
		echo "${bold}${green}Located password file: /etc/nginx/passwords-admin-ui${normal}"
		echo
		echo "${bold}${cyan}Contains the following usernames and encoded passwords${normal}"
		echo "${bold}${cyan}     in format USERNAME:PASSWORD (encoded, not human readable)${normal}"
		cat /etc/nginx/passwords-admin-ui
		echo
		echo 
		echo "${bold}${cyan}How would you like to proceed?${normal}"
		echo " ${cyan}1 - Reuse existing username(s) and password(s)${normal}"
		echo "       ${bold}${red}Note:${normal} Will display first three characters of password"
		echo "       to verify successful retrieval of password."
		echo " ${cyan}2 - Clear all data and create new username and password${normal}"
		echo
		while :; do
			read -r -p "${bold}${cyan}Please type 1 or 2:${normal} " nginx_username_and_password_admin_ui_reuse
			echo
			if (( "$nginx_username_and_password_admin_ui_reuse" >= "1" && "$nginx_username_and_password_admin_ui_reuse" <= "2" )) ; then
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done
		if [ "$nginx_username_and_password_admin_ui_reuse" == "1" ]; then
			# 1 - Reuse existing username(s) and password(s)
			nginx_username_admin_ui_encoded_1=$( grep -m 1 "nginx_username_admin_ui_encoded_1 = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
			nginx_htpasswd_admin_ui_encoded_1=$( grep -m 1 "nginx_htpasswd_admin_ui_encoded_1 = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
			
			if [ -z "$nginx_username_admin_ui_encoded_1" ] || [ -z "$nginx_htpasswd_admin_ui_encoded_1" ]; then
				echo "${bold}${red}Wasn't able to read username and/or password from:${normal} $drawpile_configuration_values_file"
				echo "${bold}${red}Regenerating username and password.${normal}"
				echo
				nginx_username_and_password_admin_ui_function
			else
				#Value not null, proceeding.
				nginx_username_admin_ui_1="$(echo "$nginx_username_admin_ui_encoded_1" | python -c 'import sys; from urllib.parse import unquote; print(unquote(sys.stdin.readline().strip()))')"
				
				nginx_htpasswd_admin_ui_1="$(echo "$nginx_htpasswd_admin_ui_encoded_1" | python -c 'import sys; from urllib.parse import unquote; print(unquote(sys.stdin.readline().strip()))')"
				nginx_htpasswd_admin_ui_short_1=${nginx_htpasswd_admin_ui_1:0:3}
				
				echo "${bold}${green}Username retrieved for script     :${normal} $nginx_username_admin_ui_1"
				echo "${bold}${green}Password retrieved for script     :${normal} $nginx_htpasswd_admin_ui_short_1"
				nginx_username_and_password_admin_ui_reuse_test_condition="true"
			fi
		elif [ "$nginx_username_and_password_admin_ui_reuse" == "2" ]; then
			# 2 - Clear all data and create new username and password
			nginx_username_and_password_admin_ui_function
		else
			echo "This message should not be visible."
		fi
	else
		nginx_username_and_password_admin_ui_function
	fi
else
	echo "${bold}${red}Skipping username and password for new web admin.${normal}"
	echo "${bold}${red}No SSL configured, so no web admin of any kind.${normal}"
fi
echo
echo '--------------------------------------------------------------------------------'
echo
echo 'Modifying file nginx.conf for remote administration of the Drawpile Server.'
echo

# Used for List Server to read hosted sessions and list them automatically, even with special characters being used.
nginx_username_encoded_1="$(echo "$nginx_username_1" | python -c 'import sys; from urllib.parse import quote; print(quote(sys.stdin.readline().strip(), safe=""))')"
nginx_username_admin_ui_encoded_1="$(echo "$nginx_username_admin_ui_1" | python -c 'import sys; from urllib.parse import quote; print(quote(sys.stdin.readline().strip(), safe=""))')"
# echo "Value Encoded $nginx_username_encoded_1"

# Used for List Server to read hosted sessions and list them automatically, even with special characters being used.
nginx_htpasswd_encoded_1="$(echo "$nginx_htpasswd_1" | python -c 'import sys; from urllib.parse import quote; print(quote(sys.stdin.readline().strip(), safe=""))')"
nginx_htpasswd_admin_ui_encoded_1="$(echo "$nginx_htpasswd_admin_ui_1" | python -c 'import sys; from urllib.parse import quote; print(quote(sys.stdin.readline().strip(), safe=""))')"
# echo "Value Encoded $nginx_htpasswd_encoded_1"

# To be used later with server management scripts, to decode URL encoded usernames/passwords
# raw_password="$(echo "$encoded_password" | python -c 'import sys; from urllib.parse import unquote; print(unquote(sys.stdin.readline().strip()))')"

# Refer to help with this command.
# https://superuser.com/questions/1254358/replace-single-line-with-multline-content-within-the-file-nginx-conf/1254366?noredirect=1#comment1842983_1254366
#

<<comment_server_management_script_later
nginx_username_1=ADMIN
nginx_username_2=ADMIN2
nginx_htpasswd_1=Password0123456789012

echo "${cyan}${bold}Contents of /etc/nginx/passwords${normal}"
cat /etc/nginx/passwords 
echo
echo
if cat /etc/nginx/passwords | grep -iox "$nginx_username_1:.*" > /dev/null 2>&1; then

	echo Found Username $nginx_username_1
	echo
	echo "${cyan}${bold}Contents of /etc/nginx/passwords with user filtered${normal}"
	passwords_filtered=$( cat /etc/nginx/passwords | grep -iox "$nginx_username_1:.*" )
	echo $passwords_filtered
	echo
	echo "${cyan}${bold}Contents of /etc/nginx/passwords with user filtered, inverted${normal}"
	grep -v "$passwords_filtered" /etc/nginx/passwords
	echo
	pause
	echo
	echo Removing $nginx_username_1
	grep -v "$passwords_filtered" /etc/nginx/passwords | sudo tee /etc/nginx/passwords > /dev/null 2>&1
	echo
	sudo htpasswd -b /etc/nginx/passwords $nginx_username_2 $nginx_htpasswd_1
	echo
	cat /etc/nginx/passwords 
fi
comment_server_management_script_later

if [ ! -e "/etc/nginx/nginx-original.conf.bak" ]; then
	sudo cp "/etc/nginx/nginx.conf" "/etc/nginx/nginx-original.conf.bak"
fi
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	sudo $wget_or_wget2_quiet_progress https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/config/Fedora/nginx/nginx.conf -O "/etc/nginx/nginx.conf"
fi

sudo sed -i -e 's/# server_names_hash_bucket_size 64/server_names_hash_bucket_size 64/g' /etc/nginx/nginx.conf

sudo sed -i.bak 's/^	include \/etc\/nginx\/sites-enabled\/\*\;$/&\n	\n	server {\n		listen 8081\;\n		\n		location \/ {\n			proxy_pass http:\/\/127.0.0.1:27780\/api\/\;\n			proxy_redirect default\;\n			auth_basic "admin"\;\n			auth_basic_user_file \/etc\/nginx\/passwords\;\n		}\n	}\n/' /etc/nginx/nginx.conf


if [[ "$nginx_username_and_password_reuse_test_condition" == "false" ]]; then
	sudo sed -i '\!^nginx_username_encoded_1 =!{h;s!=.*!= '"$nginx_username_encoded_1"'!};${x;\!^$!{s!!nginx_username_encoded_1 = '"$nginx_username_encoded_1"'!;H};x}' $drawpile_configuration_values_file
	sudo sed -i '\!^nginx_htpasswd_encoded_1 =!{h;s!=.*!= '"$nginx_htpasswd_encoded_1"'!};${x;\!^$!{s!!nginx_htpasswd_encoded_1 = '"$nginx_htpasswd_encoded_1"'!;H};x}' $drawpile_configuration_values_file
fi
if [[ "$nginx_username_and_password_admin_ui_reuse_test_condition" == "false" ]]; then
	sudo sed -i '\!^nginx_username_admin_ui_encoded_1 =!{h;s!=.*!= '"$nginx_username_admin_ui_encoded_1"'!};${x;\!^$!{s!!nginx_username_admin_ui_encoded_1 = '"$nginx_username_admin_ui_encoded_1"'!;H};x}' $drawpile_configuration_values_file
	sudo sed -i '\!^nginx_htpasswd_admin_ui_encoded_1 =!{h;s!=.*!= '"$nginx_htpasswd_admin_ui_encoded_1"'!};${x;\!^$!{s!!nginx_htpasswd_admin_ui_encoded_1 = '"$nginx_htpasswd_admin_ui_encoded_1"'!;H};x}' $drawpile_configuration_values_file
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}*****Drawpile Monitor NSFW Content Report Tool . . .*****${normal}"
echo

if [ "$drawpile_abuse_report_installation_status" == "y" ] || [ "$drawpile_abuse_report_installation_status" == "Y" ] || [ "$drawpile_abuse_report_installation_status" == "yes" ] || [ "$drawpile_abuse_report_installation_status" == "YES" ] || [ "$drawpile_abuse_report_installation_status" == "Yes" ]; then
	variable_to_read_1="drawpile_monitor_installation_status"
	variable_to_read_2=""
	variable_to_read_3=""
	value_description_1="Drawpile-Monitor: Used for monitoring servers for NSFW"
	value_description_2="session names, usernames, and aliases. Violations result"
	value_description_3="in rename, kick, and/or termination. Reports are sent to"
	value_description_4="Discord channel via webhook. Can configure custom word "
	value_description_5="list monitoring for NSFM sessions."

	maybe_use_config_value=n
	read_stored_config_value_query_function
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing value and moving on."
		drawpile_monitor_installation_status=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		echo "This is a python script for monitoring for NSFW content via"
		echo "session names, usernames, and room aliases."
		echo
		echo "Inappropriate sessions are automatically renamed. Inappropriate"
		echo "usernames or room alias results in disconnect. A notification"
		echo "will be sent via Discord webhook to report the incident."
		echo "It can be configured to handle NSFM sessions differently also."
		echo
		echo "${bold}For more information, check it out on GitHub:${normal}"
		echo "     https://github.com/drawpile/drawpile-monitor"
		echo
		echo "${bold}For additional info on banned words, check out the following:${normal}"
		echo "     https://github.com/dimitrismistriotis/alt-profanity-check"
		echo "     https://github.com/snguyenthanh/better_profanity"
		echo "       https://github.com/snguyenthanh/better_profanity/blob/master/better_profanity/profanity_wordlist.txt"
		echo
		echo "${bold}Custom words or phrases can be added by editing the following file${normal}"
		echo "${bold}and then restart the systemd service used to run the script.${normal}"
		echo "     nano /home/drawpileuser/drawpile-monitor-custom-banned-words-list.txt"
		echo "     nano /home/drawpileuser/drawpile-monitor-custom-nsfm-banned-words-list.txt"
		echo "     nano /home/drawpileuser/drawpile-monitor-allowed-words-list.txt"
		echo "     nano /home/drawpileuser/drawpile-monitor-silent-notify-words-list.txt"
		echo
		echo "     sudo systemctl restart drawpile-monitor.service"
		echo
		echo "${bold}Related important files:${normal}"
		echo "     /home/drawpileuser/drawpile-monitor.db"
		echo "     /home/drawpileuser/drawpile-monitor/config.ini"
		echo
		while :; do
			read -r -p "${bold}${cyan}Would you like to enable the drawpile-monitor service:${normal} " drawpile_monitor_installation_status
			if [ "$drawpile_monitor_installation_status" == "y" ] || [ "$drawpile_monitor_installation_status" == "Y" ] || [ "$drawpile_monitor_installation_status" == "yes" ] || [ "$drawpile_monitor_installation_status" == "YES" ] || [ "$drawpile_monitor_installation_status" == "Yes" ] || [ "$drawpile_monitor_installation_status" == "n" ] || [ "$drawpile_monitor_installation_status" == "N" ] || [ "$drawpile_monitor_installation_status" == "no" ] || [ "$drawpile_monitor_installation_status" == "NO" ] || [ "$drawpile_monitor_installation_status" == "No" ]; then
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done	
		if [[ ( "$drawpile_monitor_installation_status" == "y" || "$drawpile_monitor_installation_status" == "Y" || "$drawpile_monitor_installation_status" == "yes" || "$drawpile_monitor_installation_status" == "YES" || "$drawpile_monitor_installation_status" == "Yes" ) ]]; then
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			cd "/home/drawpileuser"
			if [[ -d  "/home/drawpileuser/drawpile-monitor" ]]; then
				# ---------------------------------------------------------------------------------
				# Testing new concept - commented out temporarily
				# echo Download detected of drawpile-monitor files, removing content before downloading.
				# rm -f -R "/home/drawpileuser/drawpile-monitor"
				# ---------------------------------------------------------------------------------
				cd drawpile-monitor
				
				git config --global --add safe.directory /home/drawpileuser/drawpile-monitor
				# Updates local repo
				git fetch
				
				# Checks local commit info
				git_local_commit=$( git rev-parse HEAD )
				# Checks remote commit info
				git_remote_commit=$( git rev-parse '@{u}' )
				
				if [[ "$git_local_commit" == "$git_remote_commit" ]] ; then
					git_repo_status=currently_up_to_date
				else
					# Resets any changes made to the local code so it matches the remote code. 
					git reset --hard origin/main
					git_repo_status=out_of_date
				fi
			else
				git_repo_status=out_of_date
				echo Downloading Drawpile-Monitor from github.
				echo
				git clone https://github.com/drawpile/drawpile-monitor
				echo
				cd "/home/drawpileuser/drawpile-monitor"
			fi
			
			read_stored_completed_status_value_query=$( grep -m 1 "drawpile_monitor_installation_status = " "$drawpile_completed_successfully_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
			if [[ "$git_repo_status" == "out_of_date" || ( "$read_stored_completed_status_value_query" == "no" || "$read_stored_completed_status_value_query" == "" ) ]] ; then
				if [[ ( "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" || "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ) || "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ]]; then
					echo '--------------------------------------------------------------------------------'
					echo "Need to install gfortran and libopenblas-dev for Raspbian"
					echo '--------------------------------------------------------------------------------'
					echo
					sudo $package_install_program gfortran libopenblas-dev
					echo
				fi
				if [[ -e "/etc/systemd/system/drawpile-monitor.service" ]]; then
					echo "${bold}${cyan}***** If Drawpile_Monitor Running, Stopping Process . . . *****${normal}"
					echo
				fi
				# The number ordering chosen is based on the order in which they appear in RPi-Monitor. Not the order in which they are used in the script.
				service_name_to_check_05=drawpile-monitor.service
				if [ -e "/etc/systemd/system/drawpile-monitor.service" ]; then
					drawpile_monitor_loaded=$( systemctl status $service_name_to_check_05 | grep "Loaded: " | sed -nEr "s/.*$service_name_to_check_05; (.*); vendor.*/\1/p" )
					# ------------------------------------------------------------------------------------------------------------------------------------------------------------
					# Check to ensure output is not blank and find it in an alternate way
					# echo Value: $drawpile_monitor_loaded
					# echo
					if [ -z "$drawpile_monitor_loaded" ]; then
						# echo Oops. Blank!
						drawpile_monitor_loaded=$( systemctl status $service_name_to_check_05 | grep "Loaded: " | sed -nEr "s/.*$service_name_to_check_05; (.*); preset:.*/\1/p" )
						# echo
					fi
					# echo Value: $drawpile_monitor_loaded
					# echo
					if [ -z "$drawpile_monitor_loaded" ]; then
						drawpile_monitor_loaded=error
					fi
					# ------------------------------------------------------------------------------------------------------------------------------------------------------------
					drawpile_monitor_status=$( systemctl status $service_name_to_check_05 | grep "Active: " | sed -nEr 's/.*(\(.*\)).*/\1/p' )
					if [ -z "$drawpile_monitor_status" ]; then
						drawpile_monitor_status=error
					fi
					echo "Service name : $service_name_to_check_05"
					echo "Start on boot: $drawpile_monitor_loaded"
					echo "Loaded Status: $drawpile_monitor_status"
					sudo systemctl stop --now $service_name_to_check_05
					echo
				else
					drawpile_monitor_loaded="not_loaded"
					drawpile_monitor_status="not_loaded"
					echo "The $service_name_to_check_05 is not yet loaded. No action required."
					echo
				fi
				
				python_version=$( python --version | awk '{ print $2 }' | perl -0777 -ne '/([0-9]+\.[0-9]+)/; print $1' )
				# python_3_11=$( ls -l /usr/bin/python* | grep "3.11" | awk '{ print $9 }' | grep "3.11" )
				# Sample Output: /usr/bin/python3.11
				# python_3_12=$( ls -l /usr/bin/python* | grep "3.12" | awk '{ print $9 }' | grep "3.12" )
				# Sample Output: /usr/bin/python3.12
				if [[ "$python_version" == "3.12" || "$python_version" == "3.13" ]]; then
					if [ -e "/usr/bin/python3.11" ]; then
						echo
						echo "Python install is $python_version ..."
						echo "Found Python 3.11, proceeding with this version for setup."
						python_command="python3.11"
						echo
					else
						echo
						echo "Python install is $python_version ..."
						echo "Attempting install of Python 3.11 ..."
						sudo $package_install_program python3.11
						echo
						if [ -e "/usr/bin/python3.11" ]; then
							echo "Found Python 3.11, proceeding with this version for setup."
							python_command="python3.11"
							echo
						else
							echo "Unable to use Python 3.11..."
							echo "Proceeding with installed version for setup."
							python_command="python"
							echo
						fi
					fi
				else
					python_command="python"
				fi

				
				owner_id_test=$(find "/home/drawpileuser/drawpile-monitor" -prune -printf %U)
				
				if [[ -O "/home/drawpileuser/drawpile-monitor" ]] || [[ "$current_username_id" != "$owner_id_test" ]]; then
					# echo "owner"
					sudo chown $current_username:drawpileread "/home/drawpileuser/drawpile-monitor" -R
				else
					# echo "no owner"
					# No action required.
					:
				fi

				echo '--------------------------------------------------------------------------------'
				echo "Running command: $python_command -m venv env"
				echo '--------------------------------------------------------------------------------'
				if ! $python_command -m venv env; then
					sudo sed -i '\!^drawpile_monitor_installation_status =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!drawpile_monitor_installation_status = '"no"'!;H};x}' $drawpile_completed_successfully_values_file
					command_die "${bold}${red}Command \"$python_command -m venv env\" failed.${normal}"
				else
					sudo sed -i '\!^drawpile_monitor_installation_status =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!drawpile_monitor_installation_status = '"yes"'!;H};x}' $drawpile_completed_successfully_values_file
				fi
				echo
				echo '--------------------------------------------------------------------------------'
				echo "Running command: . env/bin/activate"
				echo '--------------------------------------------------------------------------------'
				. env/bin/activate
				echo
				echo '--------------------------------------------------------------------------------'
				echo "Running command: pip install wheel"
				echo '--------------------------------------------------------------------------------'
				pip install wheel
				echo
				echo '--------------------------------------------------------------------------------'
				echo "Running command: pip install -r requirements.txt"
				echo '--------------------------------------------------------------------------------'
				pip install -r requirements.txt
				echo
				# Used to exit virtual environment that is started with this command: . env/bin/activate
				deactivate
			else
				echo "${bold}${green}Drawpile-Monitor is up to date, skipping.${normal}"
			fi
			echo
			echo '--------------------------------------------------------------------------------'
			echo '--------------------------------------------------------------------------------'
			echo
			echo "${bold}${cyan}***** Preparing Drawpile-Monitor for Automatic Startup *****${normal}"
			echo
			# Not needed, should be copied/left in a directory writeable to the user running it, drawpileuser
			# sudo cp -R "$dp_install_loc/Programs/drawpile-monitor" "/usr/local/bin/drawpile-monitor"

			function discord_developer_mode_instructions_function () {
				echo "You will need to temporarily enable developer mode in Discord. Go to the gear"
				echo "     near your username, Advanced, Developer Mode. Then you will need to find"
				echo "     the appropriate user or group (in the server role list) to right click"
				echo "     in order to 'Copy User ID' or 'Copy Role ID'."
			}
			# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			
			variable_to_read_1="drawpile_monitor_silent_user_and_role_mentions_query"
			variable_to_read_2="discord_silent_user_mentions"
			variable_to_read_3="discord_silent_role_mentions"
			
			value_description_1="Drawpile-Monitor: Used for notifying users or specific "
			value_description_2="roles in Discord of rule breaking, by User ID in Discord's"
			value_description_3="Developer mode (Settings gear, Advanced, Developer Mode)."
			value_description_4="     Users listed in value 2."
			value_description_5="     Roles listed in value 3."

			read_stored_config_value_query_function
			if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
				echo "Storing value and moving on."
				drawpile_monitor_silent_user_and_role_mentions_query=$read_stored_config_value_query_1
			elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
				echo "Silent reports - notify moderators via discord in the event of immediate moderation"
				echo "     is required. Such examples might include references to illegal content."
				echo
				echo "For silent reports, would you like your bot to @ a particular user or group in Discord?"
				echo
				while :; do
					read -r -p "${bold}${cyan}Enter (Y)es or (N)o, and hit enter to continue:${normal} " drawpile_monitor_silent_user_and_role_mentions_query
					echo
					if [ "$drawpile_monitor_silent_user_and_role_mentions_query" == "y" ] || [ "$drawpile_monitor_silent_user_and_role_mentions_query" == "Y" ] || [ "$drawpile_monitor_silent_user_and_role_mentions_query" == "yes" ] || [ "$drawpile_monitor_silent_user_and_role_mentions_query" == "YES" ] || [ "$drawpile_monitor_silent_user_and_role_mentions_query" == "Yes" ] || [ "$drawpile_monitor_silent_user_and_role_mentions_query" == "n" ] || [ "$drawpile_monitor_silent_user_and_role_mentions_query" == "N" ] || [ "$drawpile_monitor_silent_user_and_role_mentions_query" == "no" ] || [ "$drawpile_monitor_silent_user_and_role_mentions_query" == "NO" ] || [ "$drawpile_monitor_silent_user_and_role_mentions_query" == "No" ]; then
						break
					else
						echo
						echo "${bold}${red}Invalid input selection, try again.${normal}"
						echo
						echo ----------------------------------------------------------------------------------
						echo
					fi
				done
				sudo sed -i '\!^drawpile_monitor_silent_user_and_role_mentions_query =!{h;s!=.*!= '"$drawpile_monitor_silent_user_and_role_mentions_query"'!};${x;\!^$!{s!!drawpile_monitor_silent_user_and_role_mentions_query = '"$drawpile_monitor_silent_user_and_role_mentions_query"'!;H};x}' $drawpile_configuration_values_file
				
				if [ "$drawpile_monitor_silent_user_and_role_mentions_query" == "y" ] || [ "$drawpile_monitor_silent_user_and_role_mentions_query" == "Y" ] || [ "$drawpile_monitor_silent_user_and_role_mentions_query" == "yes" ] || [ "$drawpile_monitor_silent_user_and_role_mentions_query" == "YES" ] || [ "$drawpile_monitor_silent_user_and_role_mentions_query" == "Yes" ]; then
					echo
					while :; do
						read -r -p "${bold}${cyan}Would you like to set it for specific users to be mentioned? (Y)es or (N)o?:${normal} " drawpile_monitor_silent_user_mentions_query
						echo
						if [ "$drawpile_monitor_silent_user_mentions_query" == "y" ] || [ "$drawpile_monitor_silent_user_mentions_query" == "Y" ] || [ "$drawpile_monitor_silent_user_mentions_query" == "yes" ] || [ "$drawpile_monitor_silent_user_mentions_query" == "YES" ] || [ "$drawpile_monitor_silent_user_mentions_query" == "Yes" ] || [ "$drawpile_monitor_silent_user_mentions_query" == "n" ] || [ "$drawpile_monitor_silent_user_mentions_query" == "N" ] || [ "$drawpile_monitor_silent_user_mentions_query" == "no" ] || [ "$drawpile_monitor_silent_user_mentions_query" == "NO" ] || [ "$drawpile_monitor_silent_user_mentions_query" == "No" ]; then
							break
						else
							echo
							echo "${bold}${red}Invalid input selection, try again.${normal}"
							echo
							echo ----------------------------------------------------------------------------------
							echo
						fi
					done

					if [ "$drawpile_monitor_silent_user_mentions_query" == "y" ] || [ "$drawpile_monitor_silent_user_mentions_query" == "Y" ] || [ "$drawpile_monitor_silent_user_mentions_query" == "yes" ] || [ "$drawpile_monitor_silent_user_mentions_query" == "YES" ] || [ "$drawpile_monitor_silent_user_mentions_query" == "Yes" ]; then
						discord_developer_mode_instructions_function
						echo
						while :; do
							read -r -p "${bold}${cyan}Enter the User ID(s), separated by commas. Do not use spaces:${normal} " discord_silent_user_mentions
							echo
							if echo "$discord_silent_user_mentions" | perl -0777 -ne 'exit(/\A\s*[0-9]{17,}+(?:,[0-9]{17,}+)*\s*\z/ ? 0 : 1)'; then
								# echo 'Valid string'
								break
							else
								echo
								echo "${bold}${red}Invalid input selection, try again.${normal}"
								echo
								echo ----------------------------------------------------------------------------------
								echo
							fi
						done
						sudo sed -i '\!^discord_silent_user_mentions =!{h;s!=.*!= '"$discord_silent_user_mentions"'!};${x;\!^$!{s!!discord_silent_user_mentions = '"$discord_silent_user_mentions"'!;H};x}' $drawpile_configuration_values_file
						
					elif [ "$drawpile_monitor_silent_user_mentions_query" == "n" ] || [ "$drawpile_monitor_silent_user_mentions_query" == "N" ] || [ "$drawpile_monitor_silent_user_mentions_query" == "no" ] || [ "$drawpile_monitor_silent_user_mentions_query" == "NO" ] || [ "$drawpile_monitor_silent_user_mentions_query" == "No" ]; then
						discord_silent_user_mentions=""
					else
						echo
						echo "${bold}${red}Invalid input selection, try again.${normal}"
						echo
						echo ----------------------------------------------------------------------------------
						echo
					fi
					echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					while :; do
						echo
						read -r -p "${bold}${cyan}Would you like to set it for specific roles to be mentioned? (Y)es or (N)o?:${normal} " drawpile_monitor_silent_role_mentions_query
						echo
						if [ "$drawpile_monitor_silent_role_mentions_query" == "y" ] || [ "$drawpile_monitor_silent_role_mentions_query" == "Y" ] || [ "$drawpile_monitor_silent_role_mentions_query" == "yes" ] || [ "$drawpile_monitor_silent_role_mentions_query" == "YES" ] || [ "$drawpile_monitor_silent_role_mentions_query" == "Yes" ] || [ "$drawpile_monitor_silent_role_mentions_query" == "n" ] || [ "$drawpile_monitor_silent_role_mentions_query" == "N" ] || [ "$drawpile_monitor_silent_role_mentions_query" == "no" ] || [ "$drawpile_monitor_silent_role_mentions_query" == "NO" ] || [ "$drawpile_monitor_silent_role_mentions_query" == "No" ]; then
							break
						else
							echo
							echo "${bold}${red}Invalid input selection, try again.${normal}"
							echo
							echo ----------------------------------------------------------------------------------
							echo
						fi
					done

					if [ "$drawpile_monitor_silent_role_mentions_query" == "y" ] || [ "$drawpile_monitor_silent_role_mentions_query" == "Y" ] || [ "$drawpile_monitor_silent_role_mentions_query" == "yes" ] || [ "$drawpile_monitor_silent_role_mentions_query" == "YES" ] || [ "$drawpile_monitor_silent_role_mentions_query" == "Yes" ]; then
						discord_developer_mode_instructions_function
						echo
						while :; do
							read -r -p "${bold}${cyan}Enter the Role ID(s), separated by commas. Do not use spaces:${normal} " discord_silent_role_mentions
							echo
							if echo "$discord_silent_role_mentions" | perl -0777 -ne 'exit(/\A\s*[0-9]{17,}+(?:,[0-9]{17,}+)*\s*\z/ ? 0 : 1)'; then
								# echo 'Valid string'
								break
							else
								echo
								echo "${bold}${red}Invalid input selection, try again.${normal}"
								echo
								echo ----------------------------------------------------------------------------------
								echo
							fi
						done
						sudo sed -i '\!^discord_silent_role_mentions =!{h;s!=.*!= '"$discord_silent_role_mentions"'!};${x;\!^$!{s!!discord_silent_role_mentions = '"$discord_silent_role_mentions"'!;H};x}' $drawpile_configuration_values_file
					elif [ "$drawpile_monitor_silent_role_mentions_query" == "n" ] || [ "$drawpile_monitor_silent_role_mentions_query" == "N" ] || [ "$drawpile_monitor_silent_role_mentions_query" == "no" ] || [ "$drawpile_monitor_silent_role_mentions_query" == "NO" ] || [ "$drawpile_monitor_silent_role_mentions_query" == "No" ]; then
						discord_silent_role_mentions=""
					else
						echo
						echo "${bold}${red}Invalid input selection, try again.${normal}"
						echo
						echo ----------------------------------------------------------------------------------
						echo
					fi
				elif [ "$drawpile_monitor_silent_user_and_role_mentions_query" == "n" ] || [ "$drawpile_monitor_silent_user_and_role_mentions_query" == "N" ] || [ "$drawpile_monitor_silent_user_and_role_mentions_query" == "no" ] || [ "$drawpile_monitor_silent_user_and_role_mentions_query" == "NO" ] || [ "$drawpile_monitor_silent_user_and_role_mentions_query" == "No" ]; then
					echo
					echo "Not utilizing user or group specific pings."
					discord_silent_user_mentions=""
					discord_silent_role_mentions=""
				else
					echo "This message should not be visible for silent user and/or role mentions on Discord."
				fi			
			else
				echo "This message should not be visible."
			fi
			echo ----------------------------------------------------------------------------------
			echo ----------------------------------------------------------------------------------
			echo
			echo "${bold}${cyan}This setting controls how Drawpile-Monitor handles checking sessions with the${normal}"
			echo "${bold}${cyan}NSFM flag set. The configurable options are as follows:${normal}"
			echo " - ${underline}full   :${normal} values used to check SFW sessions are also used for NSFM sessions."
			echo " - ${underline}relaxed:${normal} disable regular profanity checks, only check for stuff given in"
			echo "        nsfm_wordlist_path, which is as follows:"
			echo "        /home/drawpileuser/drawpile-monitor-custom-nsfm-banned-words-list.txt"
			echo
			echo "${underline}You can choose either the number or the word typed out for this query.${normal}"
			echo " 1 - full"
			echo " 2 - relaxed"
			while :; do
				echo
				read -r -p "${bold}${cyan}Would you like to do a full check or relaxed check?:${normal} " drawpile_monitor_handle_nsfm_query
				if [ "$drawpile_monitor_handle_nsfm_query" == "1" ] || [ "$drawpile_monitor_handle_nsfm_query" == "FULL" ] || [ "$drawpile_monitor_handle_nsfm_query" == "Full" ] || [ "$drawpile_monitor_handle_nsfm_query" == "full" ] || [ "$drawpile_monitor_handle_nsfm_query" == "2" ] || [ "$drawpile_monitor_handle_nsfm_query" == "RELAXED" ] || [ "$drawpile_monitor_handle_nsfm_query" == "Relaxed" ] || [ "$drawpile_monitor_handle_nsfm_query" == "relaxed" ]; then
					break
				else
					echo
					echo "${bold}${red}Invalid input selection, try again.${normal}"
					echo
					echo ----------------------------------------------------------------------------------
					echo
				fi
			done

			if [ "$drawpile_monitor_handle_nsfm_query" == "1" ] || [ "$drawpile_monitor_handle_nsfm_query" == "FULL" ] || [ "$drawpile_monitor_handle_nsfm_query" == "Full" ] || [ "$drawpile_monitor_handle_nsfm_query" == "full" ]; then
				drawpile_monitor_handle_nsfm=full
			elif [ "$drawpile_monitor_handle_nsfm_query" == "2" ] || [ "$drawpile_monitor_handle_nsfm_query" == "RELAXED" ] || [ "$drawpile_monitor_handle_nsfm_query" == "Relaxed" ] || [ "$drawpile_monitor_handle_nsfm_query" == "relaxed" ]; then
				drawpile_monitor_handle_nsfm=relaxed
			else
				echo "This message for how Drawpile-Monitor handles NSFM checking should not be visible."
			fi
			echo
			echo ----------------------------------------------------------------------------------
			echo ----------------------------------------------------------------------------------
			echo
			echo "${bold}${cyan}This setting controls how Drawpile-Monitor handles checking usernames in${normal}"
			echo "${bold}${cyan}private sessions with the NSFM flag set.${normal}"
			echo
			echo "${bold}${cyan}The configurable options are as follows:${normal}"
			echo " - ${underline}true  :${normal} NSFM usernames are allowed in private SFW sessions."
			echo " - ${underline}false :${normal} NSFM usernames are not allowed in private SFW sessions."
			echo
			echo "${underline}You can choose either the number or the word typed out for this query.${normal}"
			echo " 1 - true"
			echo " 2 - false"
			while :; do
				echo
				read -r -p "${bold}${cyan}Would you like to allow NSFM usernames in SFW private sessions?:${normal} " drawpile_monitor_nsfm_users_in_passworded_sessions_query
				if [ "$drawpile_monitor_nsfm_users_in_passworded_sessions_query" == "1" ] || [ "$drawpile_monitor_nsfm_users_in_passworded_sessions_query" == "TRUE" ] || [ "$drawpile_monitor_nsfm_users_in_passworded_sessions_query" == "True" ] || [ "$drawpile_monitor_nsfm_users_in_passworded_sessions_query" == "true" ] || [ "$drawpile_monitor_nsfm_users_in_passworded_sessions_query" == "2" ] || [ "$drawpile_monitor_nsfm_users_in_passworded_sessions_query" == "FALSE" ] || [ "$drawpile_monitor_nsfm_users_in_passworded_sessions_query" == "False" ] || [ "$drawpile_monitor_nsfm_users_in_passworded_sessions_query" == "false" ]; then
					break
				else
					echo
					echo "${bold}${red}Invalid input selection, try again.${normal}"
					echo
					echo ----------------------------------------------------------------------------------
					echo
				fi
			done

			if [ "$drawpile_monitor_nsfm_users_in_passworded_sessions_query" == "1" ] || [ "$drawpile_monitor_nsfm_users_in_passworded_sessions_query" == "TRUE" ] || [ "$drawpile_monitor_nsfm_users_in_passworded_sessions_query" == "True" ] || [ "$drawpile_monitor_nsfm_users_in_passworded_sessions_query" == "true" ]; then
				drawpile_monitor_nsfm_users_in_passworded_sessions=true
			elif [ "$drawpile_monitor_nsfm_users_in_passworded_sessions_query" == "2" ] || [ "$drawpile_monitor_nsfm_users_in_passworded_sessions_query" == "FALSE" ] || [ "$drawpile_monitor_nsfm_users_in_passworded_sessions_query" == "False" ] || [ "$drawpile_monitor_nsfm_users_in_passworded_sessions_query" == "false" ]; then
				drawpile_monitor_nsfm_users_in_passworded_sessions=false
			else
				echo "This message for how Drawpile-Monitor handles NSFM usernames in private SFW sessions should not be visible."
			fi
			echo
			echo ----------------------------------------------------------------------------------
			echo ----------------------------------------------------------------------------------
			echo
			echo "${bold}${cyan}This setting controls if Drawpile-Monitor checks for old versions of Drawpile${normal}"
			echo "${bold}${cyan}to update. Currently this only checks for Drawpile 2.1 and 2.2 betas.${normal}"
			echo "${bold}${cyan}The purpose is to tell users to update before they can no longer access the${normal}"
			echo "${bold}${cyan}server, since you may choose to restrict which versions can be used for${normal}"
			echo "${bold}${cyan}moderation related purposes.${normal}"
			echo
			echo "${underline}You can choose either the number or the word typed out for this query.${normal}"
			echo " 1 - true"
			echo " 2 - false"
			while :; do
				echo
				read -r -p "${bold}${cyan}Would you like to check for outdated clients?:${normal} " drawpile_monitor_warn_outdated_sessions_query
				echo
				if [ "$drawpile_monitor_warn_outdated_sessions_query" == "1" ] || [ "$drawpile_monitor_warn_outdated_sessions_query" == "TRUE" ] || [ "$drawpile_monitor_warn_outdated_sessions_query" == "True" ] || [ "$drawpile_monitor_warn_outdated_sessions_query" == "true" ] || [ "$drawpile_monitor_warn_outdated_sessions_query" == "2" ] || [ "$drawpile_monitor_warn_outdated_sessions_query" == "FALSE" ] || [ "$drawpile_monitor_warn_outdated_sessions_query" == "False" ] || [ "$drawpile_monitor_warn_outdated_sessions_query" == "false" ]; then
					break
				else
					echo
					echo "${bold}${red}Invalid input selection, try again.${normal}"
					echo
					echo ----------------------------------------------------------------------------------
					echo
				fi
			done

			if [ "$drawpile_monitor_warn_outdated_sessions_query" == "1" ] || [ "$drawpile_monitor_warn_outdated_sessions_query" == "TRUE" ] || [ "$drawpile_monitor_warn_outdated_sessions_query" == "True" ] || [ "$drawpile_monitor_warn_outdated_sessions_query" == "true" ]; then
				drawpile_monitor_warn_outdated_sessions=true
			elif [ "$drawpile_monitor_warn_outdated_sessions_query" == "2" ] || [ "$drawpile_monitor_warn_outdated_sessions_query" == "FALSE" ] || [ "$drawpile_monitor_warn_outdated_sessions_query" == "False" ] || [ "$drawpile_monitor_warn_outdated_sessions_query" == "false" ]; then
				drawpile_monitor_warn_outdated_sessions=false
			else
				echo "This message for how Drawpile-Monitor handles NSFM checking should not be visible."
			fi
			echo
			echo ----------------------------------------------------------------------------------
			echo
			function drawpile_monitor_warning_messages_default_function () {
				# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				drawpile_monitor_msg_session_name_first_warning="[Name Check Bot] This session's title was detected to be unacceptable and has been changed. If the session is supposed to be adults-only, go into Session > Settings and mark it as 'Not suitable for minors (NSFM)'. Rules and more info: https://drawpile.net/namecheckbot/"
				drawpile_monitor_msg_session_name_second_warning="[Name Check Bot] This session's title was detected to be unacceptable and has been changed again, next time it will be terminated. Rules and more info: https://drawpile.net/namecheckbot/"
				drawpile_monitor_msg_session_name_terminate="[Name Check Bot] Session keeps switching to unacceptable names, terminating it. Rules and more info: https://drawpile.net/namecheckbot/"
				# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				drawpile_monitor_msg_session_name_first_warning_nsfm="[Name Check Bot] This session's title was detected to be unacceptable and has been changed. Rules and more info: https://drawpile.net/namecheckbot/"
				drawpile_monitor_msg_session_name_second_warning_nsfm=$drawpile_monitor_msg_session_name_second_warning
				drawpile_monitor_msg_session_name_terminate_nsfm=$drawpile_monitor_msg_session_name_terminate
				# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				drawpile_monitor_msg_session_alias_terminate="[Name Check Bot] This session's ID alias was detected to be unacceptable, terminating it. If the session is supposed to be adults-only, mark it as 'Not suitable for minors (NSFM)' when hosting, otherwise names be clean. Rules and more info: https://drawpile.net/namecheckbot/"
				drawpile_monitor_msg_session_alias_terminate_nsfm="[Name Check Bot] This session's ID alias was detected to be unacceptable, terminating it. Rules and more info: https://drawpile.net/namecheckbot/"
				# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				drawpile_monitor_msg_session_founder_terminate="[Name Check Bot] This session's founder was detected to have an unacceptable name, terminating it. If the session is supposed to be adults-only, mark it as 'Not suitable for minors (NSFM)' when hosting, otherwise names should be clean. Rules and more info: https://drawpile.net/namecheckbot/"
				drawpile_monitor_msg_session_founder_terminate_nsfm="[Name Check Bot] This session's founder was detected to have an unacceptable name, terminating it. Rules and more info: https://drawpile.net/namecheckbot/"
				drawpile_monitor_msg_user_kick="[Name Check Bot] Username detected as unacceptable, kicking them. If the session is supposed to be adults-only, mark it as 'Not suitable for minors (NSFM)'. Rules and more info: https://drawpile.net/namecheckbot/"
				drawpile_monitor_msg_user_kick_nsfm="[Name Check Bot] Username detected as unacceptable, kicking them. Rules and more info: https://drawpile.net/namecheckbot/"
				# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				drawpile_monitor_msg_session_outdated="This session is hosted with an old version of Drawpile. Go to https://drawpile.net/ to download the latest one. If there is a reason you can't update, check the help page and tell us why. You will longer be able to host on this server using the old version after November 31 2024."

				# Old content below, retaining for notes.
				# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				# drawpile_monitor_msg_session_name_first_warning="AUTOMOD - Your session's title was detected to be offensive and has been changed. Please read the rules: https://drawpile.net/communities/"
				# drawpile_monitor_msg_session_name_second_warning="AUTOMOD - Your session's title was detected to be offensive and has been changed again. Next time it will be terminated. Read the rules: https://drawpile.net/communities/"
				# drawpile_monitor_msg_session_name_terminate="AUTOMOD - Session keeps offending, terminating it. Read the rules: https://drawpile.net/communities/"
				# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				# drawpile_monitor_msg_session_name_first_warning_nsfm="AUTOMOD - Your session's title was detected to be offensive and has been changed. Please read the rules: https://drawpile.net/communities/"
				# drawpile_monitor_msg_session_name_second_warning_nsfm="AUTOMOD - Your session's title was detected to be offensive and has been changed again. Next time it will be terminated. Read the rules: https://drawpile.net/communities/"
				# drawpile_monitor_msg_session_name_terminate_nsfm="AUTOMOD - Session keeps offending, terminating it. Read the rules: https://drawpile.net/communities/"
				# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				# drawpile_monitor_msg_session_alias_terminate="AUTOMOD - Your session's ID alias was detected to be offensive, terminating it. Read the rules: https://drawpile.net/communities/"
				# drawpile_monitor_msg_session_alias_terminate_nsfm="AUTOMOD - Your session's ID alias was detected to be offensive, terminating it. Read the rules: https://drawpile.net/communities/"
				# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				# drawpile_monitor_msg_session_founder_terminate="AUTOMOD - Your session's founder was detected to be offensive, terminating it. Read the rules: https://drawpile.net/communities/"
				# drawpile_monitor_msg_session_founder_terminate_nsfm="AUTOMOD - Your session's founder was detected to be offensive, terminating it. Read the rules: https://drawpile.net/communities/"
				# drawpile_monitor_msg_user_kick="AUTOMOD - Kicking user because of their offensive name. Read the rules: https://drawpile.net/communities/"
				# drawpile_monitor_msg_user_kick_nsfm="AUTOMOD - Kicking user because of their offensive name. Read the rules: https://drawpile.net/communities/"
				# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				# drawpile_monitor_msg_session_outdated="AUTOMOD - Your session is hosted with an outdated version of Drawpile. Support for this version will be removed in the future. Go to https://drawpile.net/ to download and install the latest version."
			}
			drawpile_monitor_warning_messages_default_function
			# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			function drawpile_monitor_warning_messages_custom_function () {
				echo
				echo ----------------------------------------------------------------------------------
				echo ----------------------------------------------------------------------------------
				echo
				drawpile_monitor_warning_messages_default_function
				echo "Entering custom message editing mode. Will display messages one at a time."
				echo "You will be given the option to use the default or customize the message."
				echo
				echo "Note: You can manually modify the configuration also..."
				echo "     /home/drawpileuser/drawpile-monitor/config.ini"
				echo
				if [ "$drawpile_monitor_warning_messages_edit_query" == "y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "yes" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "YES" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Yes" ]; then
					maybe_use_config_value=n
					# Do nothing as no error was detected, user wishes to edit warning messages.
				else
					# If "no" or null, should try to import previously stored values.
					# elif [ "$drawpile_monitor_warning_messages_edit_query" == "n" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "N" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "no" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "NO" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "No" ]; then
					
					variable_to_read_1="drawpile_monitor_msg_session_name_first_warning"
					variable_to_read_2=""
					variable_to_read_3=""
					
					value_description_1="Drawpile-Monitor: First warning custom message."
					value_description_2=""
					value_description_3=""
					value_description_4=""
					value_description_5=""
					
					read_stored_config_value_query_function
				fi

				if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
					echo "Storing value and moving on."
					drawpile_monitor_msg_session_name_first_warning=$read_stored_config_value_query_1
				elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
					echo "${bold}${cyan}Session name - First Warning:${normal}"
					echo $drawpile_monitor_msg_session_name_first_warning
					echo
					while :; do
						echo "1 - Default"
						echo "2 - Customize"
						echo
						read -r -p "${bold}${cyan}Would you like use the default message, or customize it:${normal} " drawpile_monitor_warning_messages_custom_query
						echo
						if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ] || [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
							break
						else
							echo
							echo "${bold}${red}Invalid input selection, try again.${normal}"
							echo
							echo ----------------------------------------------------------------------------------
							echo
						fi
					done
					if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ]; then
						:
						# Do nothing as no error was detected.
						# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
					elif [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
						read -r -p "${bold}${cyan}Customize - Session Name - First Warning:${normal} " drawpile_monitor_msg_session_name_first_warning
					else
						echo "This 1st message should not be visible for Drawpile-Monitor Message 1 Customization."
					fi
				else
					echo "This 2nd message should not be visible for Drawpile-Monitor Message 1 Customization."
				fi
				echo
				echo ----------------------------------------------------------------------------------
				echo
				if [ "$drawpile_monitor_warning_messages_edit_query" == "y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "yes" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "YES" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Yes" ]; then
					maybe_use_config_value=n
					# Do nothing as no error was detected, user wishes to edit warning messages.
				else
					# If "no" or null, should try to import previously stored values.
					# elif [ "$drawpile_monitor_warning_messages_edit_query" == "n" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "N" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "no" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "NO" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "No" ]; then
					
					variable_to_read_1="drawpile_monitor_msg_session_name_second_warning"
					variable_to_read_2=""
					variable_to_read_3=""

					value_description_1="Drawpile-Monitor: Second warning custom message."
					value_description_2=""
					value_description_3=""
					value_description_4=""
					value_description_5=""
					
					read_stored_config_value_query_function
				fi

				if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
					echo "Storing value and moving on."
					drawpile_monitor_msg_session_name_second_warning=$read_stored_config_value_query_1
				elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then				
					echo "${bold}${cyan}Session name - Second Warning:${normal}"
					echo $drawpile_monitor_msg_session_name_second_warning
					echo
					while :; do
						echo "1 - Default"
						echo "2 - Customize"
						echo
						read -r -p "${bold}${cyan}Would you like use the default message, or customize it:${normal} " drawpile_monitor_warning_messages_custom_query
						echo
						if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ] || [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
							break
						else
							echo
							echo "${bold}${red}Invalid input selection, try again.${normal}"
							echo
							echo ----------------------------------------------------------------------------------
							echo
						fi
					done
					if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ]; then
						:
						# Do nothing as no error was detected.
						# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
					elif [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
						read -r -p "${bold}${cyan}Customize - Session Name - Second Warning:${normal} " drawpile_monitor_msg_session_name_second_warning
					else
						echo "This 1st message should not be visible for Drawpile-Monitor Message 2 Customization."
					fi
				else
					echo "This 2nd message should not be visible for Drawpile-Monitor Message 2 Customization."
				fi
				echo
				echo ----------------------------------------------------------------------------------
				echo
				if [ "$drawpile_monitor_warning_messages_edit_query" == "y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "yes" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "YES" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Yes" ]; then
					maybe_use_config_value=n
					# Do nothing as no error was detected, user wishes to edit warning messages.
				else
					# If "no" or null, should try to import previously stored values.
					# elif [ "$drawpile_monitor_warning_messages_edit_query" == "n" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "N" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "no" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "NO" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "No" ]; then
					
					variable_to_read_1="drawpile_monitor_msg_session_name_terminate"
					variable_to_read_2=""
					variable_to_read_3=""

					value_description_1="Drawpile-Monitor: Terminate session due to session "
					value_description_2="                  name message."
					value_description_3=""
					value_description_4=""
					value_description_5=""
					
					read_stored_config_value_query_function
				fi

				if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
					echo "Storing value and moving on."
					drawpile_monitor_msg_session_name_terminate=$read_stored_config_value_query_1
				elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
					echo "${bold}${cyan}Session name - Terminate Session:${normal}"
					echo $drawpile_monitor_msg_session_name_terminate
					echo
					while :; do
						echo "1 - Default"
						echo "2 - Customize"
						echo
						read -r -p "${bold}${cyan}Would you like use the default message, or customize it:${normal} " drawpile_monitor_warning_messages_custom_query
						echo
						if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ] || [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
							break
						else
							echo
							echo "${bold}${red}Invalid input selection, try again.${normal}"
							echo
							echo ----------------------------------------------------------------------------------
							echo
						fi
					done
					if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ]; then
						:
						# Do nothing as no error was detected.
						# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
					elif [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
						read -r -p "${bold}${cyan}Customize - Session Name - Terminate Session:${normal} " drawpile_monitor_msg_session_name_terminate
					else
						echo "This 1st message should not be visible for Drawpile-Monitor Message 3 Customization."
					fi
				else
					echo "This 2nd message should not be visible for Drawpile-Monitor Message 3 Customization."
				fi
				echo
				echo ----------------------------------------------------------------------------------
				echo
				if [ "$drawpile_monitor_warning_messages_edit_query" == "y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "yes" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "YES" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Yes" ]; then
					maybe_use_config_value=n
					# Do nothing as no error was detected, user wishes to edit warning messages.
				else
					# If "no" or null, should try to import previously stored values.
					# elif [ "$drawpile_monitor_warning_messages_edit_query" == "n" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "N" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "no" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "NO" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "No" ]; then
					
					variable_to_read_1="drawpile_monitor_msg_session_name_first_warning_nsfm"
					variable_to_read_2=""
					variable_to_read_3=""
					
					value_description_1="Drawpile-Monitor: First NSFM warning custom message."
					value_description_2=""
					value_description_3=""
					value_description_4=""
					value_description_5=""
					
					read_stored_config_value_query_function
				fi

				if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
					echo "Storing value and moving on."
					drawpile_monitor_msg_session_name_first_warning_nsfm=$read_stored_config_value_query_1
				elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
					echo "${bold}${cyan}Session name - NSFM - First Warning:${normal}"
					echo $drawpile_monitor_msg_session_name_first_warning_nsfm
					echo
					while :; do
						echo "1 - Default"
						echo "2 - Customize"
						echo
						read -r -p "${bold}${cyan}Would you like use the default message, or customize it:${normal} " drawpile_monitor_warning_messages_custom_query
						echo
						if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ] || [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
							break
						else
							echo
							echo "${bold}${red}Invalid input selection, try again.${normal}"
							echo
							echo ----------------------------------------------------------------------------------
							echo
						fi
					done
					if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ]; then
						:
						# Do nothing as no error was detected.
						# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
					elif [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
						read -r -p "${bold}${cyan}Customize - NSFM - Session Name - First Warning:${normal} " drawpile_monitor_msg_session_name_first_warning_nsfm
					else
						echo "This 1st message should not be visible for Drawpile-Monitor Message 1 NSFM Customization."
					fi
				else
					echo "This 2nd message should not be visible for Drawpile-Monitor Message 1 NSFM Customization."
				fi
				echo
				echo ----------------------------------------------------------------------------------
				echo
				if [ "$drawpile_monitor_warning_messages_edit_query" == "y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "yes" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "YES" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Yes" ]; then
					maybe_use_config_value=n
					# Do nothing as no error was detected, user wishes to edit warning messages.
				else
					# If "no" or null, should try to import previously stored values.
					# elif [ "$drawpile_monitor_warning_messages_edit_query" == "n" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "N" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "no" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "NO" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "No" ]; then
					
					variable_to_read_1="drawpile_monitor_msg_session_name_second_warning_nsfm"
					variable_to_read_2=""
					variable_to_read_3=""
					
					value_description_1="Drawpile-Monitor: Second NSFM warning custom message. "
					value_description_2=""
					value_description_3=""
					value_description_4=""
					value_description_5=""
					
					read_stored_config_value_query_function
				fi

				if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
					echo "Storing value and moving on."
					drawpile_monitor_msg_session_name_second_warning_nsfm=$read_stored_config_value_query_1
				elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
					echo "${bold}${cyan}Session name - NSFM - Second Warning:${normal}"
					echo $drawpile_monitor_msg_session_name_second_warning_nsfm
					echo
					while :; do
						echo "1 - Default"
						echo "2 - Customize"
						echo
						read -r -p "${bold}${cyan}Would you like use the default message, or customize it:${normal} " drawpile_monitor_warning_messages_custom_query
						echo
						if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ] || [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
							break
						else
							echo
							echo "${bold}${red}Invalid input selection, try again.${normal}"
							echo
							echo ----------------------------------------------------------------------------------
							echo
						fi
					done
					if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ]; then
						:
						# Do nothing as no error was detected.
						# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
					elif [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
						read -r -p "${bold}${cyan}Customize - Session Name - NSFM - Second Warning:${normal} " drawpile_monitor_msg_session_name_second_warning_nsfm
					else
						echo "This 1st message should not be visible for Drawpile-Monitor Message 2 NSFM Customization."
					fi
				else
					echo "This 2nd message should not be visible for Drawpile-Monitor Message 2 NSFM Customization."
				fi
				echo
				echo ----------------------------------------------------------------------------------
				echo
				
				
				if [ "$drawpile_monitor_warning_messages_edit_query" == "y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "yes" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "YES" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Yes" ]; then
					maybe_use_config_value=n
					# Do nothing as no error was detected, user wishes to edit warning messages.
				else
					# If "no" or null, should try to import previously stored values.
					# elif [ "$drawpile_monitor_warning_messages_edit_query" == "n" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "N" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "no" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "NO" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "No" ]; then
					
					variable_to_read_1="drawpile_monitor_msg_session_name_terminate_nsfm"
					variable_to_read_2=""
					variable_to_read_3=""
					
					value_description_1="Drawpile-Monitor: Terminate NSFM session due to session "
					value_description_2="                  name message."
					value_description_3=""
					value_description_4=""
					value_description_5=""
					
					read_stored_config_value_query_function
				fi

				if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
					echo "Storing value and moving on."
					drawpile_monitor_msg_session_name_terminate_nsfm=$read_stored_config_value_query_1
				elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
					echo "${bold}${cyan}Session name - NSFM - Terminate Session:${normal}"
					echo $drawpile_monitor_msg_session_name_terminate_nsfm
					echo
					while :; do
						echo "1 - Default"
						echo "2 - Customize"
						echo
						read -r -p "${bold}${cyan}Would you like use the default message, or customize it:${normal} " drawpile_monitor_warning_messages_custom_query
						echo
						if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ] || [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
							break
						else
							echo
							echo "${bold}${red}Invalid input selection, try again.${normal}"
							echo
							echo ----------------------------------------------------------------------------------
							echo
						fi
					done
					if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ]; then
						:
						# Do nothing as no error was detected.
						# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
					elif [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
						read -r -p "${bold}${cyan}Customize - Session Name - NSFM - Terminate Session:${normal} " drawpile_monitor_msg_session_name_terminate_nsfm
					else
						echo "This 1st message should not be visible for Drawpile-Monitor Message 3 NSFM Customization."
					fi
				else
					echo "This 2nd message should not be visible for Drawpile-Monitor Message 3 NSFM Customization."
				fi
				echo
				echo ----------------------------------------------------------------------------------
				echo
				if [ "$drawpile_monitor_warning_messages_edit_query" == "y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "yes" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "YES" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Yes" ]; then
					maybe_use_config_value=n
					# Do nothing as no error was detected, user wishes to edit warning messages.
				else
					# If "no" or null, should try to import previously stored values.
					# elif [ "$drawpile_monitor_warning_messages_edit_query" == "n" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "N" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "no" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "NO" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "No" ]; then
					
					variable_to_read_1="drawpile_monitor_msg_session_alias_terminate"
					variable_to_read_2=""
					variable_to_read_3=""
					
					value_description_1="Drawpile-Monitor: Terminate session due to session alias"
					value_description_2="                  message."
					value_description_3=""
					value_description_4=""
					value_description_5=""
					
					read_stored_config_value_query_function
				fi

				if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
					echo "Storing value and moving on."
					drawpile_monitor_msg_session_alias_terminate=$read_stored_config_value_query_1
				elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
					echo "${bold}${cyan}Session alias termination:${normal}"
					echo $drawpile_monitor_msg_session_alias_terminate
					echo
					while :; do
						echo "1 - Default"
						echo "2 - Customize"
						echo
						read -r -p "${bold}${cyan}Would you like use the default message, or customize it:${normal} " drawpile_monitor_warning_messages_custom_query
						echo
						if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ] || [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
							break
						else
							echo
							echo "${bold}${red}Invalid input selection, try again.${normal}"
							echo
							echo ----------------------------------------------------------------------------------
							echo
						fi
					done
					if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ]; then
						:
						# Do nothing as no error was detected.
						# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
					elif [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
						read -r -p "${bold}${cyan}Customize - Session alias termination:${normal} " drawpile_monitor_msg_session_alias_terminate
					else
						echo "This 1st message should not be visible for Drawpile-Monitor Message 4 Customization."
					fi
				else
					echo "This 2nd message should not be visible for Drawpile-Monitor Message 4 Customization."
				fi
				echo
				echo ----------------------------------------------------------------------------------
				echo
				if [ "$drawpile_monitor_warning_messages_edit_query" == "y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "yes" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "YES" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Yes" ]; then
					maybe_use_config_value=n
					# Do nothing as no error was detected, user wishes to edit warning messages.
				else
					# If "no" or null, should try to import previously stored values.
					# elif [ "$drawpile_monitor_warning_messages_edit_query" == "n" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "N" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "no" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "NO" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "No" ]; then
					
					variable_to_read_1="drawpile_monitor_msg_session_alias_terminate_nsfm"
					variable_to_read_2=""
					variable_to_read_3=""
					
					value_description_1="Drawpile-Monitor: Terminate NSFM session due to session "
					value_description_2="                  alias message."
					value_description_3=""
					value_description_4=""
					value_description_5=""
					
					read_stored_config_value_query_function
				fi

				if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
					echo "Storing value and moving on."
					drawpile_monitor_msg_session_alias_terminate_nsfm=$read_stored_config_value_query_1
				elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
					echo "${bold}${cyan}Session alias NSFM termination:${normal}"
					echo $drawpile_monitor_msg_session_alias_terminate_nsfm
					echo
					while :; do
						echo "1 - Default"
						echo "2 - Customize"
						echo
						read -r -p "${bold}${cyan}Would you like use the default message, or customize it:${normal} " drawpile_monitor_warning_messages_custom_query
						echo
						if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ] || [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
							break
						else
							echo
							echo "${bold}${red}Invalid input selection, try again.${normal}"
							echo
							echo ----------------------------------------------------------------------------------
							echo
						fi
					done
					if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ]; then
						:
						# Do nothing as no error was detected.
						# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
					elif [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
						read -r -p "${bold}${cyan}Customize - Session alias NSFM termination:${normal} " drawpile_monitor_msg_session_alias_terminate_nsfm
					else
						echo "This 1st message should not be visible for Drawpile-Monitor Message 4 NSFM Customization."
					fi
				else
					echo "This 2nd message should not be visible for Drawpile-Monitor Message 4 NSFM Customization."
				fi
				echo
				echo ----------------------------------------------------------------------------------
				echo
				if [ "$drawpile_monitor_warning_messages_edit_query" == "y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "yes" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "YES" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Yes" ]; then
					maybe_use_config_value=n
					# Do nothing as no error was detected, user wishes to edit warning messages.
				else
					# If "no" or null, should try to import previously stored values.
					# elif [ "$drawpile_monitor_warning_messages_edit_query" == "n" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "N" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "no" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "NO" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "No" ]; then
					
					variable_to_read_1="drawpile_monitor_msg_session_founder_terminate"
					variable_to_read_2=""
					variable_to_read_3=""
					
					value_description_1="Drawpile-Monitor: Terminate session due to founder"
					value_description_2="                  username message."
					value_description_3=""
					value_description_4=""
					value_description_5=""
					
					read_stored_config_value_query_function
				fi

				if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
					echo "Storing value and moving on."
					drawpile_monitor_msg_session_founder_terminate=$read_stored_config_value_query_1
				elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
					echo "${bold}${cyan}Username - Session Founder - Terminate Session:${normal}"
					echo $drawpile_monitor_msg_session_founder_terminate
					echo
					while :; do
						echo "1 - Default"
						echo "2 - Customize"
						echo
						read -r -p "${bold}${cyan}Would you like use the default message, or customize it:${normal} " drawpile_monitor_warning_messages_custom_query
						echo
						if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ] || [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
							break
						else
							echo
							echo "${bold}${red}Invalid input selection, try again.${normal}"
							echo
							echo ----------------------------------------------------------------------------------
							echo
						fi
					done
					if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ]; then
						:
						# Do nothing as no error was detected.
						# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
					elif [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
						read -r -p "${bold}${cyan}Customize - Username - Session Founder - Terminate Session:${normal} " drawpile_monitor_msg_session_founder_terminate
					else
						echo "This 1st message should not be visible for Drawpile-Monitor Message 5 Customization."
					fi
				else
					echo "This 2nd message should not be visible for Drawpile-Monitor Message 5 Customization."
				fi
				echo
				echo ----------------------------------------------------------------------------------
				echo
				if [ "$drawpile_monitor_warning_messages_edit_query" == "y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "yes" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "YES" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Yes" ]; then
					maybe_use_config_value=n
					# Do nothing as no error was detected, user wishes to edit warning messages.
				else
					# If "no" or null, should try to import previously stored values.
					# elif [ "$drawpile_monitor_warning_messages_edit_query" == "n" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "N" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "no" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "NO" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "No" ]; then
					
					variable_to_read_1="drawpile_monitor_msg_session_founder_terminate_nsfm"
					variable_to_read_2=""
					variable_to_read_3=""
					
					value_description_1="Drawpile-Monitor: Terminate NSFM session due to "
					value_description_2="                  founder username message."
					value_description_3=""
					value_description_4=""
					value_description_5=""
					
					read_stored_config_value_query_function
				fi

				if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
					echo "Storing value and moving on."
					drawpile_monitor_msg_session_founder_terminate_nsfm=$read_stored_config_value_query_1
				elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
					echo "${bold}${cyan}Username - Session Founder - NSFM - Terminate Session:${normal}"
					echo $drawpile_monitor_msg_session_founder_terminate_nsfm
					echo
					while :; do
						echo "1 - Default"
						echo "2 - Customize"
						echo
						read -r -p "${bold}${cyan}Would you like use the default message, or customize it:${normal} " drawpile_monitor_warning_messages_custom_query
						echo
						if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ] || [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
							break
						else
							echo
							echo "${bold}${red}Invalid input selection, try again.${normal}"
							echo
							echo ----------------------------------------------------------------------------------
							echo
						fi
					done
					if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ]; then
						:
						# Do nothing as no error was detected.
						# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
					elif [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
						read -r -p "${bold}${cyan}Customize - Username - Session Founder - NSFM - Terminate Session:${normal} " drawpile_monitor_msg_session_founder_terminate_nsfm
					else
						echo "This 1st message should not be visible for Drawpile-Monitor Message 5 NSFM Customization."
					fi
				else
					echo "This 2nd message should not be visible for Drawpile-Monitor Message 5 NSFM Customization."
				fi
				echo
				echo ----------------------------------------------------------------------------------
				echo
				if [ "$drawpile_monitor_warning_messages_edit_query" == "y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "yes" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "YES" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Yes" ]; then
					maybe_use_config_value=n
					# Do nothing as no error was detected, user wishes to edit warning messages.
				else
					# If "no" or null, should try to import previously stored values.
					# elif [ "$drawpile_monitor_warning_messages_edit_query" == "n" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "N" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "no" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "NO" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "No" ]; then
					
					variable_to_read_1="drawpile_monitor_msg_user_kick"
					variable_to_read_2=""
					variable_to_read_3=""
					
					value_description_1="Drawpile-Monitor: Kick user from SFW session due to "
					value_description_2="                  inappropriate username message."
					value_description_3=""
					value_description_4=""
					value_description_5=""
					
					read_stored_config_value_query_function
				fi

				if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
					echo "Storing value and moving on."
					drawpile_monitor_msg_user_kick=$read_stored_config_value_query_1
				elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
					echo "${bold}${cyan}Username - User kicked for offensive name:${normal}"
					echo $drawpile_monitor_msg_user_kick
					echo
					while :; do
						echo "1 - Default"
						echo "2 - Customize"
						echo
						read -r -p "${bold}${cyan}Would you like use the default message, or customize it:${normal} " drawpile_monitor_warning_messages_custom_query
						echo
						if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ] || [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
							break
						else
							echo
							echo "${bold}${red}Invalid input selection, try again.${normal}"
							echo
							echo ----------------------------------------------------------------------------------
							echo
						fi
					done
					if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ]; then
						:
						# Do nothing as no error was detected.
						# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
					elif [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
						read -r -p "${bold}${cyan}Customize - Username - User kicked for offensive name:${normal} " drawpile_monitor_msg_user_kick
					else
						echo "This 1st message should not be visible for Drawpile-Monitor Message 6 Customization."
					fi
				else
					echo "This 2nd message should not be visible for Drawpile-Monitor Message 6 Customization."
				fi
				echo
				echo ----------------------------------------------------------------------------------
				echo
				if [ "$drawpile_monitor_warning_messages_edit_query" == "y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "yes" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "YES" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Yes" ]; then
					maybe_use_config_value=n
					# Do nothing as no error was detected, user wishes to edit warning messages.
				else
					# If "no" or null, should try to import previously stored values.
					# elif [ "$drawpile_monitor_warning_messages_edit_query" == "n" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "N" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "no" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "NO" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "No" ]; then
					
					variable_to_read_1="drawpile_monitor_msg_user_kick_nsfm"
					variable_to_read_2=""
					variable_to_read_3=""
					
					value_description_1="Drawpile-Monitor: Kick user from NSFM session due to "
					value_description_2="                  inappropriate username message."
					value_description_3=""
					value_description_4=""
					value_description_5=""
					
					read_stored_config_value_query_function
				fi

				if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
					echo "Storing value and moving on."
					drawpile_monitor_msg_user_kick_nsfm=$read_stored_config_value_query_1
				elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
					echo "${bold}${cyan}Username - NSFM - User kicked for offensive name:${normal}"
					echo $drawpile_monitor_msg_user_kick_nsfm
					echo
					while :; do
						echo "1 - Default"
						echo "2 - Customize"
						echo
						read -r -p "${bold}${cyan}Would you like use the default message, or customize it:${normal} " drawpile_monitor_warning_messages_custom_query
						echo
						if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ] || [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
							break
						else
							echo
							echo "${bold}${red}Invalid input selection, try again.${normal}"
							echo
							echo ----------------------------------------------------------------------------------
							echo
						fi
					done
					if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ]; then
						:
						# Do nothing as no error was detected.
						# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
					elif [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
						read -r -p "${bold}${cyan}Customize - Username - NSFM - User kicked for offensive name:${normal} " drawpile_monitor_msg_user_kick_nsfm
					else
						echo "This 1st message should not be visible for Drawpile-Monitor Message 6 NSFM Customization."
					fi
				else
					echo "This 2nd message should not be visible for Drawpile-Monitor Message 6 NSFM Customization."
				fi
				echo
				echo ----------------------------------------------------------------------------------
				echo
				if [ "$drawpile_monitor_warning_messages_edit_query" == "y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "yes" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "YES" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Yes" ]; then
					maybe_use_config_value=n
					# Do nothing as no error was detected, user wishes to edit warning messages.
				else
					# If "no" or null, should try to import previously stored values.
					# elif [ "$drawpile_monitor_warning_messages_edit_query" == "n" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "N" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "no" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "NO" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "No" ]; then
					
					variable_to_read_1="drawpile_monitor_msg_session_outdated"
					variable_to_read_2=""
					variable_to_read_3=""
					
					value_description_1="Drawpile-Monitor: Out of date client warning message. "
					value_description_2=""
					value_description_3=""
					value_description_4=""
					value_description_5=""
					
					read_stored_config_value_query_function
				fi

				if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
					echo "Storing value and moving on."
					drawpile_monitor_msg_session_outdated=$read_stored_config_value_query_1
				elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
					echo "${bold}${cyan}Out of Date warning:${normal}"
					echo $drawpile_monitor_msg_session_outdated
					echo
					while :; do
						echo "1 - Default"
						echo "2 - Customize"
						echo
						read -r -p "${bold}${cyan}Would you like use the default message, or customize it:${normal} " drawpile_monitor_warning_messages_custom_query
						echo
						if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ] || [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
							break
						else
							echo
							echo "${bold}${red}Invalid input selection, try again.${normal}"
							echo
							echo ----------------------------------------------------------------------------------
							echo
						fi
					done
					if [ "$drawpile_monitor_warning_messages_custom_query" == "1" ]; then
						:
						# Do nothing as no error was detected.
						# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
					elif [ "$drawpile_monitor_warning_messages_custom_query" == "2" ]; then
						read -r -p "${bold}${cyan}Customize - Out of Date warning:${normal} " drawpile_monitor_msg_session_outdated
					else
						echo "This 1st message should not be visible for Drawpile-Monitor Message 7 Customization."
					fi
				else
					echo "This 2nd message should not be visible for Drawpile-Monitor Message 7 Customization."
				fi
				echo
				echo ----------------------------------------------------------------------------------
				echo
			}
			
			
			echo "${bold}${cyan}${underline}Default list of warning messages:${normal}"
			echo
			echo
			echo "${bold}${cyan}Session name warnings:${normal}"
			echo "${underline}First warning:${normal}"
			echo $drawpile_monitor_msg_session_name_first_warning
			echo
			echo "${underline}Second warning:${normal}"
			echo $drawpile_monitor_msg_session_name_second_warning
			echo
			echo "${underline}Terminate Session:${normal}"
			echo $drawpile_monitor_msg_session_name_terminate
			echo
			echo "${underline}NSFM - First warning:${normal}"
			echo $drawpile_monitor_msg_session_name_first_warning_nsfm
			echo
			echo "${underline}NSFM - Second warning:${normal}"
			echo $drawpile_monitor_msg_session_name_second_warning_nsfm
			echo
			echo "${underline}NSFM - Terminate Session:${normal}"
			echo $drawpile_monitor_msg_session_name_terminate_nsfm
			echo
			echo "${bold}${cyan}Session alias termination:${normal}"
			echo $drawpile_monitor_msg_session_alias_terminate
			echo
			echo "${bold}${cyan}Session alias NSFM termination:${normal}"
			echo $drawpile_monitor_msg_session_alias_terminate_nsfm
			echo
			echo "${bold}${cyan}Username warnings:${normal}"
			echo "${underline}Session Founder - Terminate Session:${normal}"
			echo $drawpile_monitor_msg_session_founder_terminate
			echo
			echo "${underline}Session Founder - NSFM - Terminate Session:${normal}"
			echo $drawpile_monitor_msg_session_founder_terminate_nsfm
			echo
			echo "${underline}User kicked for offensive name:${normal}"
			echo $drawpile_monitor_msg_user_kick
			echo
			echo "${underline}User (NSFM) kicked for offensive name:${normal}"
			echo $drawpile_monitor_msg_user_kick_nsfm
			echo
			echo "${bold}${cyan}Out of Date warning:${normal}"
			echo $drawpile_monitor_msg_session_outdated
			echo
			echo
			drawpile_monitor_warning_messages_query=$( grep -m 1 "drawpile_monitor_warning_messages_query = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
			
			echo "(Y)es - Use default messages"
			echo "(N)o  - Use custom messages"
			if [ "$drawpile_monitor_warning_messages_query" == "y" ] || [ "$drawpile_monitor_warning_messages_query" == "Y" ] || [ "$drawpile_monitor_warning_messages_query" == "yes" ] || [ "$drawpile_monitor_warning_messages_query" == "YES" ] || [ "$drawpile_monitor_warning_messages_query" == "Yes" ]; then
				echo "        No previously set customized messages."
			elif [ "$drawpile_monitor_warning_messages_query" == "n" ] || [ "$drawpile_monitor_warning_messages_query" == "N" ] || [ "$drawpile_monitor_warning_messages_query" == "no" ] || [ "$drawpile_monitor_warning_messages_query" == "NO" ] || [ "$drawpile_monitor_warning_messages_query" == "No" ]; then
				echo "        Will check for previously set customized messages."
			else
				if [ -e "/home/drawpileuser/drawpile-monitor/config.ini" ]; then
					echo "        Will check for previously set customized messages, may not be available."	
					echo "        Reconfigure from scratch or manually check file at this location to verify:"
					echo "               /home/drawpileuser/drawpile-monitor/config.ini"
				else
					# if [ ! -e "/home/drawpileuser/drawpile-monitor/config.ini" ]; then
					echo "        Will need to configure any custom messages from scratch."	
				fi
			fi
			echo
			while :; do
				read -r -p "${bold}${cyan}Would you like to use the default (yes) or custom messages (no):${normal} " drawpile_monitor_warning_messages_query
				echo
				if [ "$drawpile_monitor_warning_messages_query" == "y" ] || [ "$drawpile_monitor_warning_messages_query" == "Y" ] || [ "$drawpile_monitor_warning_messages_query" == "yes" ] || [ "$drawpile_monitor_warning_messages_query" == "YES" ] || [ "$drawpile_monitor_warning_messages_query" == "Yes" ] || [ "$drawpile_monitor_warning_messages_query" == "n" ] || [ "$drawpile_monitor_warning_messages_query" == "N" ] || [ "$drawpile_monitor_warning_messages_query" == "no" ] || [ "$drawpile_monitor_warning_messages_query" == "NO" ] || [ "$drawpile_monitor_warning_messages_query" == "No" ]; then
					break
				else
					echo
					echo "${bold}${red}Invalid input selection, try again.${normal}"
					echo
					echo ----------------------------------------------------------------------------------
					echo
				fi
			done
			sudo sed -i '\!^drawpile_monitor_warning_messages_query =!{h;s!=.*!= '"$drawpile_monitor_warning_messages_query"'!};${x;\!^$!{s!!drawpile_monitor_warning_messages_query = '"$drawpile_monitor_warning_messages_query"'!;H};x}' $drawpile_configuration_values_file
			
			if [ "$drawpile_monitor_warning_messages_query" == "y" ] || [ "$drawpile_monitor_warning_messages_query" == "Y" ] || [ "$drawpile_monitor_warning_messages_query" == "yes" ] || [ "$drawpile_monitor_warning_messages_query" == "YES" ] || [ "$drawpile_monitor_warning_messages_query" == "Yes" ]; then
				echo
				echo "Using default messages."
			elif [ "$drawpile_monitor_warning_messages_query" == "n" ] || [ "$drawpile_monitor_warning_messages_query" == "N" ] || [ "$drawpile_monitor_warning_messages_query" == "no" ] || [ "$drawpile_monitor_warning_messages_query" == "NO" ] || [ "$drawpile_monitor_warning_messages_query" == "No" ]; then
				drawpile_monitor_warning_messages_custom_function
				while :; do
					echo
					echo "${bold}${cyan}${underline}Updated Drawpile-Monitor Warnings:${normal}"
					echo
					echo "${bold}${cyan}Session name warnings:${normal}"
					echo "${underline}First warning:${normal}"
					echo $drawpile_monitor_msg_session_name_first_warning
					echo
					echo "${underline}Second warning:${normal}"
					echo $drawpile_monitor_msg_session_name_second_warning
					echo
					echo "${underline}Terminate Session:${normal}"
					echo $drawpile_monitor_msg_session_name_terminate
					echo
					echo "${underline}NSFM - First warning:${normal}"
					echo $drawpile_monitor_msg_session_name_first_warning_nsfm
					echo
					echo "${underline}NSFM - Second warning:${normal}"
					echo $drawpile_monitor_msg_session_name_second_warning_nsfm
					echo
					echo "${underline}NSFM - Terminate Session:${normal}"
					echo $drawpile_monitor_msg_session_name_terminate_nsfm
					echo
					echo "${bold}${cyan}Session alias termination:${normal}"
					echo $drawpile_monitor_msg_session_alias_terminate
					echo
					echo "${bold}${cyan}Session alias NSFM termination:${normal}"
					echo $drawpile_monitor_msg_session_alias_terminate_nsfm
					echo
					echo "${bold}${cyan}Username warnings:${normal}"
					echo "${underline}Session Founder - Terminate Session:${normal}"
					echo $drawpile_monitor_msg_session_founder_terminate
					echo
					echo "${underline}Session Founder - NSFM - Terminate Session:${normal}"
					echo $drawpile_monitor_msg_session_founder_terminate_nsfm
					echo
					echo "${underline}User kicked for offensive name:${normal}"
					echo $drawpile_monitor_msg_user_kick
					echo
					echo "${underline}User (NSFM) kicked for offensive name:${normal}"
					echo $drawpile_monitor_msg_user_kick_nsfm
					echo
					echo "${bold}${cyan}Out of Date warning:${normal}"
					echo $drawpile_monitor_msg_session_outdated
					echo				
					echo
					echo "Are these updated messages acceptable?"
					echo "(Y)es"
					echo "(N)o"
					echo
					read -r -p "${bold}${cyan}Please enter (Y)es or (N)o:${normal} " drawpile_monitor_warning_messages_edit_query
					echo
					if [ "$drawpile_monitor_warning_messages_edit_query" == "y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Y" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "yes" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "YES" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "Yes" ]; then
						sudo sed -i '\!^drawpile_monitor_msg_session_name_first_warning =!{h;s!=.*!= '"$drawpile_monitor_msg_session_name_first_warning"'!};${x;\!^$!{s!!drawpile_monitor_msg_session_name_first_warning = '"$drawpile_monitor_msg_session_name_first_warning"'!;H};x}' $drawpile_configuration_values_file
						sudo sed -i '\!^drawpile_monitor_msg_session_name_second_warning =!{h;s!=.*!= '"$drawpile_monitor_msg_session_name_second_warning"'!};${x;\!^$!{s!!drawpile_monitor_msg_session_name_second_warning = '"$drawpile_monitor_msg_session_name_second_warning"'!;H};x}' $drawpile_configuration_values_file
						sudo sed -i '\!^drawpile_monitor_msg_session_name_terminate =!{h;s!=.*!= '"$drawpile_monitor_msg_session_name_terminate"'!};${x;\!^$!{s!!drawpile_monitor_msg_session_name_terminate = '"$drawpile_monitor_msg_session_name_terminate"'!;H};x}' $drawpile_configuration_values_file
						sudo sed -i '\!^drawpile_monitor_msg_session_name_first_warning_nsfm =!{h;s!=.*!= '"$drawpile_monitor_msg_session_name_first_warning_nsfm"'!};${x;\!^$!{s!!drawpile_monitor_msg_session_name_first_warning_nsfm = '"$drawpile_monitor_msg_session_name_first_warning_nsfm"'!;H};x}' $drawpile_configuration_values_file
						sudo sed -i '\!^drawpile_monitor_msg_session_name_second_warning_nsfm =!{h;s!=.*!= '"$drawpile_monitor_msg_session_name_second_warning_nsfm"'!};${x;\!^$!{s!!drawpile_monitor_msg_session_name_second_warning_nsfm = '"$drawpile_monitor_msg_session_name_second_warning_nsfm"'!;H};x}' $drawpile_configuration_values_file
						sudo sed -i '\!^drawpile_monitor_msg_session_name_terminate_nsfm =!{h;s!=.*!= '"$drawpile_monitor_msg_session_name_terminate_nsfm"'!};${x;\!^$!{s!!drawpile_monitor_msg_session_name_terminate_nsfm = '"$drawpile_monitor_msg_session_name_terminate_nsfm"'!;H};x}' $drawpile_configuration_values_file
						sudo sed -i '\!^drawpile_monitor_msg_session_alias_terminate =!{h;s!=.*!= '"$drawpile_monitor_msg_session_alias_terminate"'!};${x;\!^$!{s!!drawpile_monitor_msg_session_alias_terminate = '"$drawpile_monitor_msg_session_alias_terminate"'!;H};x}' $drawpile_configuration_values_file
						sudo sed -i '\!^drawpile_monitor_msg_session_alias_terminate_nsfm =!{h;s!=.*!= '"$drawpile_monitor_msg_session_alias_terminate_nsfm"'!};${x;\!^$!{s!!drawpile_monitor_msg_session_alias_terminate_nsfm = '"$drawpile_monitor_msg_session_alias_terminate_nsfm"'!;H};x}' $drawpile_configuration_values_file
						sudo sed -i '\!^drawpile_monitor_msg_session_founder_terminate =!{h;s!=.*!= '"$drawpile_monitor_msg_session_founder_terminate"'!};${x;\!^$!{s!!drawpile_monitor_msg_session_founder_terminate = '"$drawpile_monitor_msg_session_founder_terminate"'!;H};x}' $drawpile_configuration_values_file
						sudo sed -i '\!^drawpile_monitor_msg_session_founder_terminate_nsfm =!{h;s!=.*!= '"$drawpile_monitor_msg_session_founder_terminate_nsfm"'!};${x;\!^$!{s!!drawpile_monitor_msg_session_founder_terminate_nsfm = '"$drawpile_monitor_msg_session_founder_terminate_nsfm"'!;H};x}' $drawpile_configuration_values_file
						sudo sed -i '\!^drawpile_monitor_msg_user_kick =!{h;s!=.*!= '"$drawpile_monitor_msg_user_kick"'!};${x;\!^$!{s!!drawpile_monitor_msg_user_kick = '"$drawpile_monitor_msg_user_kick"'!;H};x}' $drawpile_configuration_values_file
						sudo sed -i '\!^drawpile_monitor_msg_user_kick_nsfm =!{h;s!=.*!= '"$drawpile_monitor_msg_user_kick_nsfm"'!};${x;\!^$!{s!!drawpile_monitor_msg_user_kick_nsfm = '"$drawpile_monitor_msg_user_kick_nsfm"'!;H};x}' $drawpile_configuration_values_file
						sudo sed -i '\!^drawpile_monitor_msg_session_outdated =!{h;s!=.*!= '"$drawpile_monitor_msg_session_outdated"'!};${x;\!^$!{s!!drawpile_monitor_msg_session_outdated = '"$drawpile_monitor_msg_session_outdated"'!;H};x}' $drawpile_configuration_values_file
						break
					elif [ "$drawpile_monitor_warning_messages_edit_query" == "n" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "N" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "no" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "NO" ] || [ "$drawpile_monitor_warning_messages_edit_query" == "No" ]; then
						drawpile_monitor_warning_messages_custom_function
					else
						echo
						echo "${bold}${red}Invalid input selection, try again.${normal}"
						echo
						echo ----------------------------------------------------------------------------------
						echo
					fi
				done
			else
				echo "This message should not be visible list of warning messages."
			fi
			echo
			echo ----------------------------------------------------------------------------------
			echo
			function drawpile_monitor_edit_wordlist_suggestion_function () {
				echo "If you want to edit this file later, you'll have to open it in a text"
				echo "     editor that is in use by your system."
				echo "     "
				echo "${underline}${bold}Examples that may work for you:${normal}"
				echo "     sudo nano $drawpile_monitor_filename_and_path"
				echo "     sudo vi $drawpile_monitor_filename_and_path"
				echo
			}
			# ----------------------------------------------------------------------------------
			function drawpile_monitor_wordlist_add_query_function () {
				echo 'Would you like to set a custom word list now?'
				echo
				echo 'y for yes'
				echo 'n for no'
				echo
				while :; do
					read -r -p "${bold}${cyan}Enter a letter and hit enter to continue:${normal} " drawpile_monitor_wordlist_add_query
					echo
					if [ "$drawpile_monitor_wordlist_add_query" == "y" ] || [ "$drawpile_monitor_wordlist_add_query" == "Y" ] || [ "$drawpile_monitor_wordlist_add_query" == "yes" ] || [ "$drawpile_monitor_wordlist_add_query" == "YES" ] || [ "$drawpile_monitor_wordlist_add_query" == "Yes" ] || [ "$drawpile_monitor_wordlist_add_query" == "n" ] || [ "$drawpile_monitor_wordlist_add_query" == "N" ] || [ "$drawpile_monitor_wordlist_add_query" == "no" ] || [ "$drawpile_monitor_wordlist_add_query" == "NO" ] || [ "$drawpile_monitor_wordlist_add_query" == "No" ]; then
						break
					else
						echo
						echo "${bold}${red}Invalid input selection, try again.${normal}"
						echo
						echo ----------------------------------------------------------------------------------
						echo
					fi
				done
			}
			# ----------------------------------------------------------------------------------
			function drawpile_monitor_manual_wordlist_tips_function () {
				echo "Normally, words are only recognized in isolation. To "
				echo "     recognize them even as part of other words, use *"
				echo "     at the beginning and/or end, that will disable the"
				echo "     boundary check on that side."
				echo 
				echo "     Session name       : testing"
				echo
				echo "     Bot Config sample 1:  test"
				echo "                Result 1:  No Warning."
				echo "     Bot Config sample 2:  test*"
				echo "                Result 2:  Warning."
				echo "     Bot Config sample 3:  *test"
				echo "                Result 3:  No Warning."
				echo "     Bot Config sample 4:  *test*"
				echo "                Result 4:  Warning."
				echo 
				echo "${bold}This list is separated by spaces!${normal}"
				echo 
				echo "If you need the bot to recognize words with whitespace,"
				echo "     you will need to edit the file manually. Spaces"
				echo "     placed in the list will match zero or more "
				echo "     whitespace, or some common punctuation marks."
			}
			
			function drawpile_monitor_wordlist_add_function () {
				# Read more
				# https://github.com/drawpile/drawpile-monitor/blob/main/profanity/profanity_wordlist.txt
				echo "If you enter the same word twice, it will be removed"
				echo "     and the file sorted alphabetically."
				echo
				drawpile_monitor_manual_wordlist_tips_function
				echo
				read -a array -p "${bold}${cyan}Enter the list of words, separated by spaces:${normal} "
				for n in ${array[*]};
				do
					echo "$n" | sudo tee -a $drawpile_monitor_filename_and_path >>/dev/null
				done

				# The sort command used at the end sorts the list alphabetically.
				sudo sort $drawpile_monitor_filename_and_path -o $drawpile_monitor_filename_and_path
				# This removes any duplicates that may exist in the file
				perl -i -ne 'print if ! $a{$_}++' $drawpile_monitor_filename_and_path
			}
			# ----------------------------------------------------------------------------------
			# ----------------------------------------------------------------------------------
			drawpile_monitor_filepath=/home/drawpileuser
			drawpile_monitor_filename=drawpile-monitor-custom-banned-words-list.txt
			drawpile_monitor_filename_and_path=$drawpile_monitor_filepath/$drawpile_monitor_filename
			if [ -e "/home/drawpileuser/drawpile-monitor-custom-list.txt" ]; then
				sudo mv "/home/drawpileuser/drawpile-monitor-custom-list.txt" "$drawpile_monitor_filename_and_path"
				echo "Custom banned word list, applies to all sessions (NSFM and SFW)."
				echo "Renamed file  : /home/drawpileuser/drawpile-monitor-custom-list.txt"
				echo "New file name : $drawpile_monitor_filename_and_path"
			elif [[ ! -e "/home/drawpileuser/drawpile-monitor-custom-list.txt" && ! -e "$drawpile_monitor_filename_and_path" ]]; then
				touch $drawpile_monitor_filename_and_path
				echo "Custom banned word list, applies to all sessions (NSFM and SFW)."
				echo "Created file: $drawpile_monitor_filename_and_path"
			else
				echo "${bold}${green}File $drawpile_monitor_filename already exists. Skipping.${normal}"
				echo
				echo "${bold}${yellow}If you need to edit the file manually, consider manually${normal}"
				echo "     ${bold}${yellow}editing the file and restart the service.${normal}"
				echo "       nano $drawpile_monitor_filename_and_path"
				echo "       sudo systemctl restart drawpile-monitor.service"
				echo
				drawpile_monitor_manual_wordlist_tips_function
				echo
				echo "Or consult the profanity_wordlist.txt file for details."
				echo "     https://github.com/drawpile/drawpile-monitor/blob/main/profanity/profanity_wordlist.txt"
			fi
			echo
			echo ----------------------------------------------------------------------------------
			echo
			drawpile_monitor_filename=drawpile-monitor-custom-nsfm-banned-words-list.txt
			drawpile_monitor_filename_and_path=$drawpile_monitor_filepath/$drawpile_monitor_filename
			if [[ ! -e "$drawpile_monitor_filename_and_path" ]]; then
				touch $drawpile_monitor_filename_and_path
				echo "${bold}${cyan}The file:${normal} $drawpile_monitor_filename_and_path"
				echo
				echo "${bold}${cyan}Contains an additional list of words to ban by Drawpile-monitor.${normal}"
				echo "${bold}${cyan}Primarily for monitoring NSFM sessions, so this list must be ${normal}"
				echo "${bold}${cyan}manually configured. Sessions that are not NSFM will also use${normal}"
				echo "${bold}${cyan}content from this list.${normal}"
				echo
				drawpile_monitor_edit_wordlist_suggestion_function
				drawpile_monitor_wordlist_add_query_function

				if [ "$drawpile_monitor_wordlist_add_query" == "y" ] || [ "$drawpile_monitor_wordlist_add_query" == "Y" ] || [ "$drawpile_monitor_wordlist_add_query" == "yes" ] || [ "$drawpile_monitor_wordlist_add_query" == "YES" ] || [ "$drawpile_monitor_wordlist_add_query" == "Yes" ] ; then
					drawpile_monitor_wordlist_add_function
				else
					echo 'Not adding any words to this file.'
				fi
			else
				echo "${bold}${green}File $drawpile_monitor_filename already exists. Skipping.${normal}"
				echo
				echo "${bold}${yellow}If you need to edit the file manually, consider manually${normal}"
				echo "     ${bold}${yellow}editing the file and restart the service.${normal}"
				echo "       nano $drawpile_monitor_filename_and_path"
				echo "       sudo systemctl restart drawpile-monitor.service"
				echo
				drawpile_monitor_manual_wordlist_tips_function
				echo
				echo "Or consult the profanity_wordlist.txt file for details."
				echo "     https://github.com/drawpile/drawpile-monitor/blob/main/profanity/profanity_wordlist.txt"
			fi
			echo
			echo ----------------------------------------------------------------------------------
			echo
			drawpile_monitor_filename=drawpile-monitor-allowed-words-list.txt
			drawpile_monitor_filename_and_path=$drawpile_monitor_filepath/$drawpile_monitor_filename
			if [[ ! -e "$drawpile_monitor_filename_and_path" ]]; then
				touch $drawpile_monitor_filename_and_path
				echo "${bold}${cyan}The file:${normal} $drawpile_monitor_filename_and_path"
				echo
				echo "${bold}${cyan}Contains a list of words to be excluded by Drawpile-monitor.${normal}"
				echo
				drawpile_monitor_edit_wordlist_suggestion_function
				drawpile_monitor_wordlist_add_query_function

				if [ "$drawpile_monitor_wordlist_add_query" == "y" ] || [ "$drawpile_monitor_wordlist_add_query" == "Y" ] || [ "$drawpile_monitor_wordlist_add_query" == "yes" ] || [ "$drawpile_monitor_wordlist_add_query" == "YES" ] || [ "$drawpile_monitor_wordlist_add_query" == "Yes" ] ; then
					drawpile_monitor_wordlist_add_function
				else
					echo 'Not adding any words to this file.'
				fi
			else
				echo "${bold}${green}File $drawpile_monitor_filename already exists. Skipping.${normal}"
				echo
				echo "${bold}${yellow}If you need to edit the file manually, consider manually${normal}"
				echo "     ${bold}${yellow}editing the file and restart the service.${normal}"
				echo "       nano $drawpile_monitor_filename_and_path"
				echo "       sudo systemctl restart drawpile-monitor.service"
				echo
				drawpile_monitor_manual_wordlist_tips_function
				echo
				echo "Or consult the profanity_wordlist.txt file for details."
				echo "     https://github.com/drawpile/drawpile-monitor/blob/main/profanity/profanity_wordlist.txt"
			fi
			echo
			echo ----------------------------------------------------------------------------------
			echo
			drawpile_monitor_filename=drawpile-monitor-silent-notify-words-list.txt
			drawpile_monitor_filename_and_path=$drawpile_monitor_filepath/$drawpile_monitor_filename
			if [[ ! -e "$drawpile_monitor_filename_and_path" ]]; then
				touch $drawpile_monitor_filename_and_path
				
				echo "${bold}${cyan}Contains a list of words that should trigger a report, but not notify${normal}"
				echo "${bold}${cyan}the offending session or user about that infraction. This is for${normal}"
				echo "${bold}${cyan}session names which may require immediate moderation by a user.${normal}"
				echo
				echo "${underline}Examples:${normal}"
				echo "     MAP, Shota, Shotacon, Loli, Lolicon, Cub, etc ..."
				echo
				drawpile_monitor_edit_wordlist_suggestion_function
				drawpile_monitor_wordlist_add_query_function

				if [ "$drawpile_monitor_wordlist_add_query" == "y" ] || [ "$drawpile_monitor_wordlist_add_query" == "Y" ] || [ "$drawpile_monitor_wordlist_add_query" == "yes" ] || [ "$drawpile_monitor_wordlist_add_query" == "YES" ] || [ "$drawpile_monitor_wordlist_add_query" == "Yes" ] ; then
					drawpile_monitor_wordlist_add_function
				else
					echo 'Not adding any words to this file.'
				fi
			else
				echo "${bold}${green}File $drawpile_monitor_filename already exists. Skipping.${normal}"
				echo
				echo "${bold}${yellow}If you need to edit the file manually, consider manually${normal}"
				echo "     ${bold}${yellow}editing the file and restart the service.${normal}"
				echo "       nano $drawpile_monitor_filename_and_path"
				echo "       sudo systemctl restart drawpile-monitor.service"
				echo
				drawpile_monitor_manual_wordlist_tips_function
				echo
				echo "Or consult the profanity_wordlist.txt file for details."
				echo "     https://github.com/drawpile/drawpile-monitor/blob/main/profanity/profanity_wordlist.txt"
			fi
			echo
			echo ----------------------------------------------------------------------------------
			echo
			# --------------------------------------------------------------------------------------------------------------------------------------------------------------------
			# https://github.com/drawpile/drawpile-monitor/blob/main/config.template.ini
			cat <<EOF | sudo tee /home/drawpileuser/drawpile-monitor/config.ini >/dev/null
# This is a template configuration file. Copy it to config.ini and fill it in.

[config]
# URL to your drawpile-srv web admin. Required.
# This is just the base URL, something like http://localhost:8080
# Do NOT append / or /api or anything.
base_url=http://127.0.0.1:27780

# Discord webhook URL to report actions to. Optional.
# See here to find out how to get this URL:
# https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks
discord_webhook_url=$discord_webhook_URL

# Where to store the script's database. If left empty, this will use
# "drawpile-monitor.db" in the script's directory.
database_path=/home/drawpileuser/drawpile-monitor.db

# Path to a file that contains additional banned words, one per line.
# See profanity/profanity_wordlist.txt for the format of that file.
# Old Value for script
# 	wordlist_path=/home/drawpileuser/drawpile-monitor-custom-list.txt
wordlist_path=/home/drawpileuser/drawpile-monitor-custom-banned-words-list.txt

# Path to a file that contains banned words even for NSFM sessions, one per
# line. For non-NSFM sessions, this will be merged with wordlist_path.
# See profanity/profanity_wordlist.txt for the format of that file.
nsfm_wordlist_path=/home/drawpileuser/drawpile-monitor-custom-nsfm-banned-words-list.txt

# Path to a file containing explicitly allowed words, one per line. These words
# will be removed from consideration when checking for profanity.
# See profanity/profanity_wordlist.txt for the format of that file, but note
# that this option does NOT handle * or spaces specially, they're verbatim!
allowlist_path=/home/drawpileuser/drawpile-monitor-allowed-words-list.txt

# Path to a file containing words that should trigger a report, but not notify
# the offending session or user about that infraction. This feature requires
# discord_webhook_url to be set so that it can actually notify someone.
# See profanity/profanity_wordlist.txt for the format of that file.
silent_wordlist_path=/home/drawpileuser/drawpile-monitor-silent-notify-words-list.txt

# Users/roles to mention in silent notifications as a list of comma-separated
# ids. Use Discord's developer mode to copy the user/role ids.
silent_user_mentions=$discord_silent_user_mentions
silent_role_mentions=$discord_silent_role_mentions

# Minimum probability required for something to count as offensive, in percent.
# Too low values may end up classifying stuff like "silly" as offensive. Too
# high values may miss stuff. 0 turns off the probablistic checking and only
# uses the word list checker. If this is not given, it defaults to 90.
min_offensive_probability=90

# How to handle checking for sessions with the NSFM flag. One of:
# - full: same criteria applies.
# - relaxed: disable regular profanity checks, only check for stuff given in
#            nsfm_wordlist_path.
# If no value is given, this defaults to "full".
# Default script
#      handle_nsfm=relaxed
handle_nsfm=$drawpile_monitor_handle_nsfm

# When this setting is enabled, NSFM usernames in passworded sessions are
# allowed even if the session does not have the NSFM flag set, since those
# usernames aren't visible publicly anyway. Defaults to false.
# Default Script
#      nsfm_users_in_passworded_sessions=true
nsfm_users_in_passworded_sessions=$drawpile_monitor_nsfm_users_in_passworded_sessions

# How many runs in a row can have errors before sending a report to the Discord
# webhook. So, for example, if you set it to 3, it will be quiet the first 3
# errors, but on the 4th it will report that something is fishy. When it gets a
# good run again afterwards, it will report that everything is well again.
max_error_streak_before_report=4

# Whether to warn sessions that are on an old version of Drawpile to update.
# Currently, this only checks for Drawpile 2.1 and 2.2 betas. If no value is
# given, this defaults to false.
# Default script
#      warn_outdated_sessions=true
warn_outdated_sessions=$drawpile_monitor_warn_outdated_sessions

[messages]
# Messages that will be sent into the chat. Personalize them and maybe replace
# the link. You can append "_nsfm" to most of these messages to have a
# different message sent to sessions marked NSFM.
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#      session_name_first_warning=Your session's title was detected to be offensive and has been changed. Please read the rules: https://drawpile.net/communities/
session_name_first_warning=$drawpile_monitor_msg_session_name_first_warning
#      session_name_second_warning=Your session's title was detected to be offensive and has been changed again. Next time it will be terminated. Read the rules: https://drawpile.net/communities/
session_name_second_warning=$drawpile_monitor_msg_session_name_second_warning
#      session_name_terminate=Session keeps offending, terminating it. Read the rules: https://drawpile.net/communities/
session_name_terminate=$drawpile_monitor_msg_session_name_terminate
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#      session_name_first_warning_nsfm=Your session's title was detected to be offensive and has been changed. Please read the rules: https://drawpile.net/communities/
session_name_first_warning_nsfm=$drawpile_monitor_msg_session_name_first_warning_nsfm
#      session_name_second_warning_nsfm=Your session's title was detected to be offensive and has been changed again. Next time it will be terminated. Read the rules: https://drawpile.net/communities/
session_name_second_warning_nsfm=$drawpile_monitor_msg_session_name_second_warning_nsfm
#      session_name_terminate_nsfm=Session keeps offending, terminating it. Read the rules: https://drawpile.net/communities/
session_name_terminate_nsfm=$drawpile_monitor_msg_session_name_terminate_nsfm
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#      session_alias_terminate=Your session's ID alias was detected to be offensive, terminating it. Read the rules: https://drawpile.net/communities/
session_alias_terminate=$drawpile_monitor_msg_session_alias_terminate
#      session_alias_terminate_nsfm=Your session's ID alias was detected to be offensive, terminating it. Read the rules: https://drawpile.net/communities/
session_alias_terminate_nsfm=$drawpile_monitor_msg_session_alias_terminate_nsfm
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#      session_founder_terminate=Your session's founder was detected to be offensive, terminating it. Read the rules: https://drawpile.net/communities/
session_founder_terminate=$drawpile_monitor_msg_session_founder_terminate
#      session_founder_terminate_nsfm=Your session's founder was detected to be offensive, terminating it. Read the rules: https://drawpile.net/communities/
session_founder_terminate_nsfm=$drawpile_monitor_msg_session_founder_terminate_nsfm
#      user_kick=Kicking user because of their offensive name. Read the rules: https://drawpile.net/communities/
user_kick=$drawpile_monitor_msg_user_kick
#      user_kick_nsfm=Kicking user because of their offensive name. Read the rules: https://drawpile.net/communities/
user_kick_nsfm=$drawpile_monitor_msg_user_kick_nsfm
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#      session_outdated=Your session is hosted with an outdated version of Drawpile. Support for this version will be removed in the future. Go to https://drawpile.net/ to download and install the latest version.
session_outdated=$drawpile_monitor_msg_session_outdated
EOF
			sudo chown drawpileuser:drawpileread "/home/drawpileuser/drawpile-monitor/config.ini"
			sudo chmod 775 "/home/drawpileuser/drawpile-monitor/config.ini"
			# ----------------------------------------------------------------------------------
			echo "${underline}${red}Choose the number for the mode to run Drawpile monitor.${normal}"
			echo "     The purpose of dry run mode is to see what changes need"
			echo "     to be made to work with your desired moderation methods."
			echo
			echo "     Running it in dry mode won't warn users and messages "
			echo "     are deduplicated to avoid spamming discord."
			# echo "     Running it in dry mode won't warn users, but may miss"
			# echo "     reporting on sessions that are shorter than the period"
			# echo "     to check for violations. Shorter durations will create"
			# echo "     more messages to read through to fine-tune the script."
			# echo "     When testing Drawpile-monitor, busy servers with lots of"
			# echo "     users should use longer intervals (30 or 60 minutes), and"
			# echo "     servers that are less busy can use shorter intervals if"
			# echo "     desired. How many reports depends on the total number of"
			# echo "     rooms in use and users connecting to the server."
			echo
			echo "     ${red}${bold}To change the status later, you will need to modify${normal}"
			echo "     ${red}${bold}the service file and then restart the service.${normal}"
			echo
			echo "     nano /usr/local/bin/drawpile_monitor_report"
			echo "     sudo systemctl restart drawpile-monitor.service"
			echo
			echo "${bold}${cyan} 1 - activated - check randomly between 20 to 60 seconds${normal}"
			echo "${bold}${cyan} 2 - dry run   - messages are de-duplicated so it${normal}"
			echo "     ${bold}${cyan}should no longer spam Discord for logging purposes.${normal}"
			echo "     ${bold}${cyan}Will still check for rooms randomly between 20 and ${normal}"
			echo "     ${bold}${cyan}60 seconds.${normal}"
			echo
			echo "     ${bold}${cyan}Deduplication requires database to avoid duplicates.${normal}"
			echo "     ${bold}${cyan}If this file gets too large, it can be safely deleted.${normal}"
			echo "          /home/drawpileuser/drawpile-monitor.db"
			echo 
			echo "          ${bold}Read More from the link below:${normal}"
			echo "          Since it doesn't store anything to the database, it would normally"
			echo "          repeatedly report the same infraction. Those now get deduplicated"
			echo "          so that they're only reported once, which makes test runs a bit"
			echo "          more feasible. They still get logged each time around though."
			echo "            https://github.com/drawpile/drawpile-monitor/commit/8883ba22252eb2b28b1f0ae7f4786e0bb5ddba87"
			echo
			
			# Old Configuration Options
			# echo "${bold}${cyan} 2 - dry run mode - check every 5 minutes${normal}"
			# echo "     reports per session in 24 hrs - 288"
			# echo "${bold}${cyan} 3 - dry run mode - check every 10 minutes${normal}"
			# echo "     reports per session in 24 hrs - 144"
			# echo "${bold}${cyan} 4 - dry run mode - check every 20 minutes${normal}"
			# echo "     reports per session in 24 hrs - 72"
			# echo "${bold}${cyan} 5 - dry run mode - check every 30 minutes${normal}"
			# echo "     reports per session in 24 hrs - 48"
			# echo "${bold}${cyan} 6 - dry run mode - check every 60 minutes${normal}"
			# echo "     reports per session in 24 hrs - 24"

			while :; do
				echo
				read -r -p "${bold}${cyan}Please select a number:${normal} " drawpile_monitor_run_type_query
				if (( "$drawpile_monitor_run_type_query" >= "1" && "$drawpile_monitor_run_type_query" <= "2" )) ; then
					break
				else
					echo
					echo "${bold}${red}Invalid input selection, try again.${normal}"
					echo
					echo ----------------------------------------------------------------------------------
					echo
				fi
			done
			echo
			if [ "$drawpile_monitor_run_type_query" == "1" ]; then
				echo "Setting run type: Active"
				echo "     ./drawpile-monitor.py --interval=20 --jitter=40"
				drawpile_monitor_run_type="./drawpile-monitor.py --interval=20 --jitter=40"
			elif [ "$drawpile_monitor_run_type_query" == "2" ]; then
				echo "Setting run type: Dry Run"
				echo "     ./drawpile-monitor.py --interval=20 --jitter=40 --dryrun"
				drawpile_monitor_run_type="./drawpile-monitor.py --interval=20 --jitter=40 --dryrun"
			else
				echo "This message should not be visible for configuring Drawpile-Monitor run type."
			fi
				
			
			cat <<EOF | sudo tee /usr/local/bin/drawpile_monitor_report >/dev/null
#!/bin/sh
cd /home/drawpileuser/drawpile-monitor
. env/bin/activate
export DRAWPILE_MONITOR_USER='$nginx_username_1'
export DRAWPILE_MONITOR_PASS='$nginx_htpasswd_1'

# Script Variables for web admin username and password.
# nginx_username_1
# nginx_htpasswd_1
# nginx_username_encoded_1
# nginx_htpasswd_encoded_1

# Active mode, see examples below for configuration.
$drawpile_monitor_run_type

# ----------------------------------------------------------------------------------
# ------------------------------------ Examples ------------------------------------
# ----------------------------------------------------------------------------------
# No longer duplicates messages during a dry run. Information provided below is for reference only.
# https://github.com/drawpile/drawpile-monitor/commit/8883ba22252eb2b28b1f0ae7f4786e0bb5ddba87

# To do a dry-run (makes checks and reports to Discord, but does not act):
# ./drawpile-monitor.py --dryrun

# Dry run every 5 minutes. Reports per session in 24 hrs - 288
# ./drawpile-monitor.py --dryrun --interval=300

# Dry run every 10 minutes. Reports per session in 24 hrs - 144
# ./drawpile-monitor.py --dryrun --interval=600

# Dry run every 20 minutes. Reports per session in 24 hrs - 72
# ./drawpile-monitor.py --dryrun --interval=1200

# Dry run every 30 minutes. Reports per session in 24 hrs - 48
# ./drawpile-monitor.py --dryrun --interval=1800

# Dry run every 60 minutes. Reports per session in 24 hrs - 24
# ./drawpile-monitor.py --dryrun --interval=3600
# ----------------------------------------------------------------------------------
# To run it once:
# ./drawpile-monitor.py
# ----------------------------------------------------------------------------------
# To check every 10 seconds:
# ./drawpile-monitor.py --interval=10

# To check randomly between 20 and 60 seconds (to avoid counter-scripting)
# ./drawpile-monitor.py --interval=20 --jitter=40
# ----------------------------------------------------------------------------------
EOF
			# ----------------------------------------------------------------------------------
			sudo chown drawpileuser:drawpileread "/usr/local/bin/./drawpile_monitor_report"
			sudo chmod 775 "/usr/local/bin/./drawpile_monitor_report"

			cat <<EOF | sudo tee /etc/systemd/system/drawpile-monitor.service >/dev/null
[Unit]
Description=Drawpile Monitor Language Report tool

[Service]
ExecStart=/usr/local/bin/drawpile_monitor_report
User=drawpileuser
# ExecStart=/home/drawpile-monitor/start.sh
# Group=drawpile-monitor

[Install]
WantedBy=multi-user.target
EOF
			sudo chmod 664 /etc/systemd/system/drawpile-monitor.service 
			sudo systemctl daemon-reload
			sudo systemctl restart systemd-modules-load
			# Systemd service to be started later in the script after server is started up.
		elif [[ ( "$drawpile_monitor_installation_status" == "n" || "$drawpile_monitor_installation_status" == "N" || "$drawpile_monitor_installation_status" == "no" || "$drawpile_monitor_installation_status" == "NO" || "$drawpile_monitor_installation_status" == "No" ) ]]; then
			echo "Skipping installation of Drawpile-Monitor."
		else
			echo "This message for Drawpile-monitor should not be visible."
		fi
		sudo sed -i '\!^drawpile_monitor_installation_status =!{h;s!=.*!= '"$drawpile_monitor_installation_status"'!};${x;\!^$!{s!!drawpile_monitor_installation_status = '"$drawpile_monitor_installation_status"'!;H};x}' $drawpile_configuration_values_file
	else
		echo "This message should not be visible."
	fi
elif [ "$drawpile_abuse_report_installation_status" == "n" ] || [ "$drawpile_abuse_report_installation_status" == "N" ] || [ "$drawpile_abuse_report_installation_status" == "no" ] || [ "$drawpile_abuse_report_installation_status" == "NO" ] || [ "$drawpile_abuse_report_installation_status" == "No" ]; then
	echo "Skipping installation of Drawpile-Monitor, because the Abuse-Report Tool"
	echo "installation was skipped with the necessary Discord webhook URL."
	drawpile_monitor_installation_status=skipped
	sudo sed -i '\!^drawpile_monitor_installation_status =!{h;s!=.*!= '"$drawpile_monitor_installation_status"'!};${x;\!^$!{s!!drawpile_monitor_installation_status = '"$drawpile_monitor_installation_status"'!;H};x}' $drawpile_configuration_values_file
else
	"This message should not be visible for Drawpile Monitor."
fi

echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}*****Drawpile AFK Kick Bot . . .*****${normal}"
echo
variable_to_read_1="drawpile_afk_kick_installation_status"
variable_to_read_2=""
variable_to_read_3=""
value_description_1="Used to kick AFK users in general, or can be used to help"
value_description_2="open user slots on user-limited boards."

read_stored_config_value_query_function

if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	drawpile_afk_kick_installation_status=$read_stored_config_value_query_1
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	echo "This is a bot to kick AFK users from the server adapted from"
	echo "from user NotFood's gist on github."
	echo
	echo "${underline}https://gist.github.com/notfood/b8d93250c706f1d5b5faee99c111126f ${normal}"
	echo
	echo "This script can help keep boards with limited user slots available"
	echo "free by kicking inactive users. This will not apply to room"
	echo "operators or moderators in the session. The script checks every 15"
	echo "minutes based on the current hour."
	echo " e.g. 12:00, 12:15, 12:30, 12:45, 1:00, 1:15, etc..."
	echo
	echo "The script can configure the following values:"
	echo " - Minimum number of free slots to begin AFK KICK"
	echo " - Number of AFK users to KICK"
	echo " - Minutes to be considered AFK"
	echo
	echo "The script will not modify these values:"
	echo " - Message to be given before KICK"
	echo "     USERNAME, you have been AFK kicked by the administrator for"
	echo "        being HOURS:MINUTES hours away."
	echo " - Logging kicks to the console."
	echo
	echo "Would you like to enable this service?"
	echo ""
	while :; do
		read -r -p "${bold}${red}Without quotes, type 'yes' or 'no':${normal} " drawpile_afk_kick_query
		echo
		if [ "$drawpile_afk_kick_query" == "y" ] || [ "$drawpile_afk_kick_query" == "Y" ] || [ "$drawpile_afk_kick_query" == "yes" ] || [ "$drawpile_afk_kick_query" == "YES" ] || [ "$drawpile_afk_kick_query" == "Yes" ] || [ "$drawpile_afk_kick_query" == "n" ] || [ "$drawpile_afk_kick_query" == "N" ] || [ "$drawpile_afk_kick_query" == "no" ] || [ "$drawpile_afk_kick_query" == "NO" ] || [ "$drawpile_afk_kick_query" == "No" ]; then
			break
		else
			echo
			echo "${bold}${red}Invalid input selection, try again.${normal}"
			echo
			echo ----------------------------------------------------------------------------------
			echo
		fi
	done
	echo
	echo ----------------------------------------------------------------------------------
	echo
	if [ "$drawpile_afk_kick_query" == "yes" ] || [ "$drawpile_afk_kick_query" == "YES" ] || [ "$drawpile_afk_kick_query" == "Yes" ] || [ "$drawpile_afk_kick_query" == "Y" ] || [ "$drawpile_afk_kick_query" == "y" ] ; then
		drawpile_afk_kick_installation_status="yes"
		echo "What should be the minimum number of user slots available to begin"
		echo "     AFK kick? If left blank, defaults to 3. If you want it to just"
		echo "     kick inactive users regardless of slots available, set to 254."
		echo
		while :; do
			read -r -p "${bold}${cyan}Enter any number from 0 to 254:${normal} " drawpile_afk_kick_minimum_slots
			echo
			if [ "$drawpile_afk_kick_minimum_slots" == "" ]; then
					drawpile_afk_kick_minimum_slots="3"
					break		
			elif (( "$drawpile_afk_kick_minimum_slots" >= "0" && "$drawpile_afk_kick_minimum_slots" <= "254" )) ; then
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done
		echo ----------------------------------------------------------------------------------
		echo
		echo "What number of AFK users should be kicked? If left blank, defaults"
		echo "     to 5 users. If you want it to kick all AFK users, set to 254."
		echo
		while :; do
			read -r -p "${bold}${cyan}Enter any number from 1 to 254:${normal} " drawpile_afk_kick_number
			echo
			if [ "$drawpile_afk_kick_number" == "" ]; then
					drawpile_afk_kick_number="5"
					break	
			elif (( "$drawpile_afk_kick_number" >= "1" && "$drawpile_afk_kick_number" <= "254" )) ; then
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done
		echo ----------------------------------------------------------------------------------
		echo
		echo "How many minutes should a user be away to be considered AFK? Blank"
		echo "     defaults to 60 minutes."
		echo
		echo "  NOTE: Remember, the script checks once every 15 minutes, so if"
		echo "     you pick 60 minutes the user might be kicked after 61 to 74"
		echo "     minutes of inactivity."
		echo
		echo "  Examples of auto kick after 60 minutes:"
		echo "  - User goes AFK at 12:01 PM. 60 minutes doesn't occur until 1:01 PM."
		echo "      Next kick time check is 1:15 PM. 74 minutes of being inactive."
		echo "  - User goes AFK at 11:59 AM. 60 minutes doesn't occur until 12:59 PM."
		echo "      Next kick time check is 1:00 PM. 61 minutes of being inactive."
		echo
		while :; do
			read -r -p "${bold}${cyan}Enter any number from 1 to 1440:${normal} " drawpile_afk_kick_timer
			echo
			if [ "$drawpile_afk_kick_timer" == "" ]; then
					drawpile_afk_kick_timer="60"
					break	
			elif (( "$drawpile_afk_kick_timer" >= "1" && "$drawpile_afk_kick_timer" <= "1440" )) ; then
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done

		sudo $package_install_program jq
		mkdir -p -v /home/drawpileuser/drawpile-afk
		cat <<EOF | sudo tee /home/drawpileuser/drawpile-afk/drawpile-afk-kick >/dev/null
#!/bin/bash

# Drawpile Admin API URL. Alternatively use pubsrvproxy for safety.
API=http://localhost:27780/api

# Minimun free slots to begin AFK KICK
MINSLOTS=$drawpile_afk_kick_minimum_slots

# Number of AFK users to KICK
NUM2KICK=$drawpile_afk_kick_number

# Minutes to be considered AFK
MINAFK=$drawpile_afk_kick_timer

# Message to be given before KICK format(name, seconds afk)
MESSAGE="%s, you have been AFK kicked by the administrator for being %(%H:%M)T hours away."

# Should we log the kicks to console?
LOG=1


# Get the session ids with almost no slots for only public boards
sessions=\$(curl -s \$API/sessions | jq -c '[.[]
  | select(.hasPassword == false and .maxUserCount - .userCount < '\$MINSLOTS')
  | .id]')


# Exit if there is no sessions full
if [ "\$sessions" = "[]" ]; then
        exit
fi


# Don't overwhelm Admin
sleep .5


# Pick top non mod non op AFK
users=\$(curl -s \$API/users | jq '.
  | map(.afk = (.lastActive | now - fromdate))
  | sort_by(-.afk)
  |
  [ .[]
    | select(.session | IN('\${sessions:1:-1}'))
    | select(.mod == false and .op == false and .afk > 60*'\$MINAFK')
    | [.id, .session, .name, .afk]
    | join("|")
  ] [:'\$NUM2KICK'] []' )


# Avoid any action if the above failed
if [ \$? -ne 0 ]; then
    exit 1;
fi

# If no users to kick, notify
if [ "\$users" = "" ]; then
    if [ "\$LOG" -ne "0" ]; then
        printf "FULL without AFK\n"
    fi
    exit
fi


# Notify and Kick
while IFS=\$'\n' read line; do
  IFS='|' read -r id session name afk <<<"\${line:1:-1}"

  afk=\${afk%.*}
  
  # Output for logging
  if [ "\$LOG" -ne "0" ]; then
          printf "KICK %s/%s\t%s\t%(%HH:%MM:%SS)T\t%s\n" "\$session" "\$id" "\$afk" "\$afk" "\$name"
  fi

  url="\$API/sessions/\$session/\$id"
  msg=\$(printf "\$MESSAGE" "\$name" "\$afk")
  curl -s -H 'Content-Type: application/json' -X PUT -d '{"message":"'"\$msg"'"}' "\$url" -o /dev/null
  sleep .5
  curl -s -X DELETE "\$url" -o /dev/null
  sleep 1

done <<<"\$users"
EOF
		sudo chmod 775 /home/drawpileuser/drawpile-afk/drawpile-afk-kick
		cat <<EOF | sudo tee /etc/systemd/system/drawpile-afk-kick.service >/dev/null
[Unit]
Description=Drawpile afk users kick service

[Service]
Type=oneshot
ExecStart=/home/drawpileuser/drawpile-afk/drawpile-afk-kick

[Install]
WantedBy=multi-user.target
EOF

		cat <<EOF | sudo tee /etc/systemd/system/drawpile-afk-kick.timer >/dev/null
[Unit]
Description=Drawpile afk users kick timer check

[Timer]
OnCalendar=*:0/15
# https://unix.stackexchange.com/questions/126786/systemd-timer-every-15-minutes
# https://www.freedesktop.org/software/systemd/man/latest/systemd.time.html
# Checks every minute
# OnCalendar=*:0/1
# Checks every 5 minutes
# OnCalendar=*:0/5

[Install]
WantedBy=timers.target
EOF

		if [ "`systemctl is-enabled drawpile-afk-kick.timer`" = "enabled" ]; then
			echo
			echo "${bold}${yellow}Detected drawpile-afk-kick.timer is active. Restarting service.${normal}"
			echo
			sudo systemctl daemon-reload
			sudo systemctl stop --now drawpile-afk-kick.service
			sudo systemctl restart drawpile-afk-kick.timer
		else
			sudo systemctl enable drawpile-afk-kick.timer
			sudo systemctl start --now drawpile-afk-kick.timer
		fi
	else
		drawpile_afk_kick_installation_status="no"
		echo "Skipping addition of drawpile-afk-kick."
		if [ "`systemctl is-enabled drawpile-afk-kick.timer`" = "enabled" ]; then
			echo
			echo "${bold}${yellow}Detected drawpile-afk-kick.timer is active. Disabling service.${normal}"
			echo
			sudo systemctl enable drawpile-afk-kick.timer
			sudo systemctl stop --now drawpile-afk-kick.timer
			sudo systemctl stop --now drawpile-afk-kick.service
		fi
	fi
	sudo sed -i '\!^drawpile_afk_kick_installation_status =!{h;s!=.*!= '"$drawpile_afk_kick_installation_status"'!};${x;\!^$!{s!!drawpile_afk_kick_installation_status = '"$drawpile_afk_kick_installation_status"'!;H};x}'  $drawpile_configuration_values_file
else
	"This message should not be visible for Drawpile AFK Kick Bot."
fi

if [ "$local_or_remote" == "Local" ]; then
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	variable_to_read_1="samba_choice"
	variable_to_read_2="option_loc_num"
	variable_to_read_3="dp_install_loc_9_custom"

	value_description_1="${bold}${cyan}***** Set up file sharing with other computers . . . (Samba) *****${normal}"
	value_description_2=" "
	value_description_3="For the value located above, the values 1-3 specifies file sharing"
	value_description_4="     is set up, while 4 means not set up."
	value_description_5=" "
	value_description_6="Used to enable file sharing with Windows devices on your home network."
	value_description_7="     ${bold}${red}This should not be used for remote servers that are not on your${normal}"
	value_description_8="     ${bold}${red}local network.${normal}"
	value_description_9=" "
	value_description_10="Query 02: option_loc_num"
	value_description_11="     Number selected when selecting download/server set up location."
	value_description_12=" "
	value_description_13="Query 03: dp_install_loc_9_custom"
	value_description_14="     If this has a value, this is the user specified location."
	value_description_15=" "


	read_stored_config_value_query_function
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing value and moving on."
		samba_choice=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		echo
		echo "${bold}${cyan}***** Set up file sharing with other computers . . . (Samba) *****${normal}"
		echo
		echo 'This stage will give you an option to set up your Raspberry Pi for file'
		echo 'sharing with Windows so that you can copy or move files to and from'
		echo 'the device. This also means it will be easier to get recorded sessions,'
		echo 'templates, and the archived file backed sessions from the drawpile'
		echo 'server to your computer.'
		echo
		echo 'What folders would you like to share to access on the network?'
		echo
		echo "${red}${bold}NOTE: If using server remotely that is NOT on your home network, you${normal}"
		echo "${red}${bold}      should NOT use this option. Select 4 to skip this step.${normal}"
		echo
		echo
		echo "							${bold}Actual Path to be shared${normal}"
		echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "
		if [[ -d "$option_loc_1" ]]; then
			echo " 1 - ${underline}Public Folder (Recommended)${normal}			$option_loc_1"
		else
			echo " ${red}${bold}$invalid_path_text	$option_loc_1${normal}"
		fi
		echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "
		if [[ -d "$option_loc_10" ]] && [[ -d "$option_loc_4" ]] && [[ -d "$option_loc_1" ]] && [[ -d "$option_loc_11" ]]; then
			echo " 2 - ${underline}Music, Pictures, Public, and Videos${normal}		$option_loc_10
								$option_loc_4
								$option_loc_1
								$option_loc_11"
		else
			echo " ${red}${bold}$invalid_path_text	$option_loc_10
								$option_loc_4
								$option_loc_1
								$option_loc_11${normal}"
		fi
		echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "
		if [[ -d "$dp_install_loc_9_custom/Programs/Drawpile-Srv-Files" ]]; then
			echo " 3 - ${underline}Custom location of drawpile${normal}			$dp_install_loc_9_custom/Programs/Drawpile-Srv-Files" || echo "${red}${bold}$invalid_path_text	- $dp_install_loc/Programs/Drawpile-Srv-Files${normal}"
			echo "     Server files only to be shared, like recordings,"
			echo "           templates, and file-backed sessions."
		elif [[ -d "$dp_install_loc/Programs/Drawpile-Srv-Files" ]]; then
			echo " 3 - ${underline}Server files only to be shared.${normal}			$dp_install_loc/Programs/Drawpile-Srv-Files"
			echo "     Server files only to be shared, like recordings,"
			echo "           templates, and file-backed sessions."
		else
			echo "${red}${bold} $invalid_path_text	$dp_install_loc/Programs/Drawpile-Srv-Files"
		fi
		echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "
		echo " 4 - ${underline}No Windows file sharing to be set up.${normal}"
		echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "
		echo
		while :; do
			read -r -p 'Enter a number and hit enter to continue: ' samba_choice
			[[ $samba_choice =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
			if (( $samba_choice >= 1 && $samba_choice <= 4)); then
				break
			else
				echo
				echo "${red}${bold}Invalid number selection, try again.${normal}"
				echo
			fi
		done
		if [ "$samba_choice" == "1" ] || [ "$samba_choice" == "2" ] || [ "$samba_choice" == "3" ]; then

			echo "${bold}${cyan}*****Installing Samba for Windows Network Sharing . . . *****${normal}"
			echo
			if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
				version_samba=$( apt-cache policy samba | grep "Installed:" | cut -c 14-22 )
				# minimum_version_samba=2:4.13.13
				version_samba_common_bin=$( apt-cache policy samba-common-bin | grep "Installed:" | cut -c 14-22 )
				# minimum_version_samba_common_bin=2:4.13.13
				progs=(samba samba-common-bin);
			fi
			if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
				version_samba=$( dnf info -q samba | grep -i "Version" | tail -1 | tr -s " " | awk '{ print $3 }' )
				installation_status_samba=$( dnf info -q samba | sed -n '2 p' )
				# minimum_version_samba=2:4.13.13
				if [[ "${installation_status_samba,,}" == "installed packages" || "${installation_status_samba,,}" == "available packages" ]]; then
					# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
					:
				else
					installation_status_samba=$( dnf info -q samba | sed -n '1 p' )
					if [[ "${installation_status_samba,,}" == "installed packages" || "${installation_status_samba,,}" == "available packages" ]]; then
						# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
						:
					else
						installation_status_samba="error"
					fi
				fi
				
				version_samba_common_bin=$( dnf info -q samba-common | grep -i "Version" | tail -1 | tr -s " " | awk '{ print $3 }' )
				installation_status_samba_common_bin=$( dnf info -q samba-common | sed -n '2 p' )
				# minimum_version_samba_common_bin=2:4.13.13
				if [[ "${installation_status_samba_common_bin,,}" == "installed packages" || "${installation_status_samba_common_bin,,}" == "available packages" ]]; then
					# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
					:
				else
					installation_status_samba_common_bin=$( dnf info -q samba-common | sed -n '1 p' )
					if [[ "${installation_status_samba_common_bin,,}" == "installed packages" || "${installation_status_samba_common_bin,,}" == "available packages" ]]; then
						# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
						:
					else
						installation_status_samba_common_bin="error"
					fi
				fi
				
				progs=(samba samba-common);
				# Installed Packages
				# Available Packages
				# Error: No matching Packages to list
			fi
			app_does_not_exist=0
			app_installed=0
			app_not_installed=0
			package_install_status_check_function		
			if [[ "$version_samba" = "(none)" ]] || [[ "$installation_status_samba" = "Available Packages" ]]; then
				echo "Installing package samba . . ."
				echo
				sudo $package_install_program samba # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
				echo
			else
				echo "Package samba already installed."
			fi
			echo
			if [[ "$version_samba_common_bin" = "(none)" ]] || [[ "$installation_status_samba_common_bin" = "Available Packages" ]]; then
				echo "Installing package samba . . ."
				echo
				if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
					package_name=samba-common-bin
				fi
				if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
					package_name=samba-common
				fi
				sudo $package_install_program samba-common-bin # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
				echo
			else
				echo "Package samba already installed."
			fi
			echo
			if [[ ! -e /etc/samba/smb.conf.bak && -e /etc/samba/smb.conf ]]; then
				sudo cp /etc/samba/smb.conf /etc/samba/smb.conf.bak
				# sudo cp /etc/samba/smb.conf.bak /etc/samba/smb.conf
				echo Backup made of smb.conf to smb.conf.bak
			fi
			sudo chmod 777 /etc/samba/smb.conf
			if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
				sudo sed -i '/workgroup = WORKGROUP/ c\	workgroup = workgroup' /etc/samba/smb.conf
				sudo sed -i "s/workgroup = workgroup$/&\n	netbios name = $HOSTNAME/" /etc/samba/smb.conf
				sudo sed -i "s/netbios name = $HOSTNAME$/&\n	wins support = yes/" /etc/samba/smb.conf
			fi
			if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
				sudo sed -i '/workgroup = SAMBA/ c\	workgroup = workgroup' /etc/samba/smb.conf
				sudo sed -i "s/workgroup = workgroup$/&\n	netbios name = $HOSTNAME/" /etc/samba/smb.conf
				sudo sed -i "s/netbios name = $HOSTNAME$/&\n	wins support = yes/" /etc/samba/smb.conf
				# sudo sed -i 's/workgroup = SAMBA$/&workgroup = WORKGROUP\n   netbios name = $HOSTNAME/' /etc/samba/smb.conf
				# sudo sed -i 's/netbios name = $HOSTNAME$/&netbios name = $HOSTNAME\n		wins support = yes/' /etc/samba/smb.conf
				# sudo sed -i '/\#   wins support = no/ c\   wins support = yes' /etc/samba/smb.conf
			fi
			echo
			if [ "$samba_choice" == "1" ]; then
				sudo chmod 777 $option_loc_1 -R
			echo "
[$current_username - Public]
	comment = $current_username Public Shared Folder
	path = $option_loc_1
	guest ok = yes
	browsable = yes
	read only = no
	create mask = 0777
	directory mask = 0777" >> /etc/samba/smb.conf
				sudo chmod 641 /etc/samba/smb.conf
				if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
					sudo systemctl restart smbd
					wait $!
					sudo systemctl restart nmbd
					wait $!
					sudo samba restart
					wait $!
				fi
				if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
					sudo systemctl enable smb --now
					wait $!
					sudo systemctl restart smb
					wait $!
				fi
				echo 'Read more on Samba --> http://tinyurl.com/y9t5qxbv'
				#Read more on Samba --> https://www.daedtech.com/create-a-windows-share-on-your-raspberry-pi/
				echo
			elif [ "$samba_choice" == "2" ]; then
				sudo chmod 777 $option_loc_1 -R
				sudo chmod 777 $option_loc_10 -R
				sudo chmod 777 $option_loc_4 -R
				sudo chmod 777 $option_loc_11 -R
				echo "
[$current_username - Public]
	comment = $current_username Public Shared Folder
	path = $option_loc_1
	guest ok = yes
	browsable = yes
	read only = no
	create mask = 0777
	directory mask = 0777
	force user = root

[$current_username - Music]
	comment = $current_username Music Shared Folder
	path = $option_loc_10
	guest ok = yes
	browsable = yes
	read only = no
	create mask = 0777
	directory mask = 0777
	force user = root

[$current_username - Pictures]
	comment = $current_username Pictures Shared Folder
	path = $option_loc_4
	guest ok = yes
	browsable = yes
	read only = no
	create mask = 0777
	directory mask = 0777
	force user = root

[$current_username - Videos]
	comment = $current_username Videos Shared Folder
	path = $option_loc_11
	guest ok = yes
	browsable = yes
	read only = no
	create mask = 0777
	directory mask = 0777
	force user = root" >> /etc/samba/smb.conf
				sudo chmod 641 /etc/samba/smb.conf
				if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
					sudo systemctl restart smbd
					wait $!
					sudo systemctl restart nmbd
					wait $!
					sudo samba restart
					wait $!
				fi
				if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
					sudo systemctl enable smb --now
					wait $!
					sudo systemctl restart smb
					wait $!
				fi
				echo 'Read more on Samba --> http://tinyurl.com/y9t5qxbv'
				#Read more on Samba --> https://www.daedtech.com/create-a-windows-share-on-your-raspberry-pi/
			elif [ "$samba_choice" == "3" ]; then
				if [ -z "$dp_install_loc_9_custom" ]; then
					sudo chmod 777 "$dp_install_loc/Programs/Drawpile-Srv-Files/" -R
					echo "
[$HOSTNAME - Drawpile-Server]
	comment = $HOSTNAME Drawpile Server
	path = \"$dp_install_loc/Programs/Drawpile-Srv-Files\"
	guest ok = yes
	browsable = yes
	read only = no
	create mask = 0777
	directory mask = 0777
	force user = root" >> /etc/samba/smb.conf
				else	
					sudo chmod 777 "$dp_install_loc_9_custom/Programs/Drawpile-Srv-Files/" -R
					echo "
[$HOSTNAME - Drawpile-Server]
	comment = $HOSTNAME Drawpile Server
	path = \"$dp_install_loc_9_custom/Programs/Drawpile-Srv-Files\"
	guest ok = yes
	browsable = yes
	read only = no
	create mask = 0777
	directory mask = 0777
	force user = root" >> /etc/samba/smb.conf
				fi
			sudo chmod 641 /etc/samba/smb.conf
				if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
					sudo systemctl restart smbd
					wait $!
					sudo systemctl restart nmbd
					wait $!
					sudo samba restart
					wait $!
				fi
				if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
					sudo systemctl enable smb --now
					wait $!
					sudo systemctl restart smb
					wait $!
				fi
			echo 'Read more on Samba --> http://tinyurl.com/y9t5qxbv'
				#Read more on Samba --> https://www.daedtech.com/create-a-windows-share-on-your-raspberry-pi/
			else
				echo 'Invalid option selected. No Windows file sharing to be'
				echo 'set up! Moving on . . .'
				samba_choice=4
			fi
		else
			if [ "$samba_choice" == "4" ]; then
				echo 'No Windows file sharing to be set up. Moving on . . .'
			else
				echo 'Invalid option selected. No Windows file sharing to be'
				echo 'set up! Moving on . . .'
				samba_choice=4
			fi	
		fi
		sudo sed -i '\!^samba_choice =!{h;s!=.*!= '"$samba_choice"'!};${x;\!^$!{s!!samba_choice = '"$samba_choice"'!;H};x}' $drawpile_configuration_values_file
		#---------------------------------------------------------------------------------------------------------------------------------
		#---------------------------------------------------------------------------------------------------------------------------------
		# This section checks for SELinux and firewall-cmd blocks against Samba, and removes them accordingly.
		# https://docs.fedoraproject.org/en-US/quick-docs/samba/
		
		if [[ "$selinux_available_check" -ne "127" || "$firewall_cmd_available_check" -ne "1" ]] && (( "$samba_choice" >= "1" && "$samba_choice" <= "3" )); then
			# https://docs.fedoraproject.org/en-US/quick-docs/samba/
		<<comment_EOF_delete
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
			echo
			echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "
			echo
			echo "${bold}${cyan}Set password for connecting to Samba share.${normal}"
			echo "${bold}${cyan}If you mistype the password, it will continue${normal}"
			echo "${bold}${cyan}on. Copy the commands below to set a password ${normal}"
			echo "${bold}${cyan}after the script has completed. ${normal}"
			echo
			echo "${bold}${cyan}This will use the following commands:${normal}"
			echo "     sudo smbpasswd -a $current_username"
			echo "     sudo systemctl restart smb"
			echo
			echo "Enter the password now to connect to the machine over the network:"
			echo
			sudo smbpasswd -a $current_username
			echo
			sudo systemctl restart smb
		fi
comment_EOF_delete
			#---------------------------------------------------------------------------------------------------------------------------------
			function selinux_samba_adjustments_function () {
				if [ "$samba_choice" == "1" ]; then
					echo "sudo semanage fcontext --add --type \"samba_share_t\" \"$option_loc_1(/.*)?\""
					sudo semanage fcontext --add --type "samba_share_t" "$option_loc_1(/.*)?"
					echo
					echo "sudo restorecon -R \"$option_loc_1\""
					sudo restorecon -R "$option_loc_1"
				elif [ "$samba_choice" == "2" ]; then
					echo "sudo semanage fcontext --add --type \"samba_share_t\" \"$option_loc_1(/.*)?\""
					sudo semanage fcontext --add --type "samba_share_t" "$option_loc_1(/.*)?"
					echo
					echo "sudo semanage fcontext --add --type \"samba_share_t\" \"$option_loc_10(/.*)?\""
					sudo semanage fcontext --add --type "samba_share_t" "$option_loc_10(/.*)?"
					echo
					echo "sudo semanage fcontext --add --type \"samba_share_t\" \"$option_loc_4(/.*)?\""
					sudo semanage fcontext --add --type "samba_share_t" "$option_loc_4(/.*)?"
					echo
					echo "sudo semanage fcontext --add --type \"samba_share_t\" \"$option_loc_11(/.*)?\""
					sudo semanage fcontext --add --type "samba_share_t" "$option_loc_11(/.*)?"
					echo
					sudo "restorecon -R \"$option_loc_1\""
					sudo restorecon -R "$option_loc_1"
					echo
					sudo "restorecon -R \"$option_loc_10\""
					sudo restorecon -R "$option_loc_10"
					echo
					sudo "restorecon -R \"$option_loc_4\""
					sudo restorecon -R "$option_loc_4"
					echo
					sudo "restorecon -R \"$option_loc_11\""
					sudo restorecon -R "$option_loc_11"
				elif [ "$samba_choice" == "3" ]; then
					if [ -z "$dp_install_loc_9_custom" ]; then
						echo "sudo semanage fcontext --add --type \"samba_share_t\" \"$dp_install_loc/Programs/Drawpile-Srv-Files(/.*)?\""
						sudo semanage fcontext --add --type "samba_share_t" "$dp_install_loc/Programs/Drawpile-Srv-Files(/.*)?"
						echo
						echo "sudo restorecon -R \"$dp_install_loc/Programs/Drawpile-Srv-Files\""
						sudo restorecon -R "$dp_install_loc/Programs/Drawpile-Srv-Files"
					else	
						echo "sudo semanage fcontext --add --type \"samba_share_t\" \"$dp_install_loc_9_custom/Programs/Drawpile-Srv-Files(/.*)?\""
						sudo semanage fcontext --add --type "samba_share_t" "$dp_install_loc_9_custom/Programs/Drawpile-Srv-Files(/.*)?"
						echo
						echo "sudo restorecon -R \"$dp_install_loc_9_custom/Programs/Drawpile-Srv-Files\""
						sudo restorecon -R "$dp_install_loc_9_custom/Programs/Drawpile-Srv-Files"
					fi
				else
					echo "${bold}${red}This message for SELinux Samba check should not be visible.${normal}"
					echo
					sleep 10
				fi
			}
			selinux_status=$( getenforce 2>/dev/null )
			selinux_available_check=$?
			echo
			echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "
			echo
			if [ "$selinux_available_check" -eq "0" ]; then
				# SELinux installed.
				if [ "$selinux_status" == "Disabled" ]; then
					echo "${bold}${green}SELinux status is: Disabled.${normal}"
					echo "No action is required. However, if you enable it in the future,"
					echo "it will cause samba to not function as intended."
					echo
					sleep 10
				else
					selinux_config_status=$( sestatus 2>/dev/null | grep -i "Mode from config file:" | awk '{ print $5 }' )
					# echo "SELinux Config Status:	$selinux_config_status"
					# echo
					if [ "${selinux_status,,}" == "${selinux_config_status,,}" ]; then
						echo "${bold}${green}SELinux status is not temporarily changed.${normal}"
						if [ "$selinux_status" == "Enforcing" ]; then
							echo "${bold}${yellow}SELinux status is: Enforcing${normal}"
							echo
							echo "${bold}${yellow}Action required to ensure samba works.${normal}"
							echo
							echo '-------------------------------------------'				
							echo 
							selinux_samba_adjustments_function
							echo
							sleep 10
						elif [ "$selinux_status" == "Permissive" ]; then
							echo "${bold}${green}SELinux status is: Permissive.${normal}"
							echo
							echo "No action is required."
							echo
							sleep 10
						else
							echo "${bold}${red}This message for SELinux status Samba (1) should not be visible.${normal}"
						fi
					elif [ "${selinux_status,,}" != "${selinux_config_status,,}" ]; then
						echo "${bold}${yellow}SELinux status is temporarily changed."
						if [ "$selinux_status" == "Enforcing" ] && [ "$selinux_config_status" == "permissive" ]; then
							echo "${bold}${yellow}SELinux status is: Enforcing${normal}"
							echo
							echo "However, on system reboot the status will return to permissive."
							echo "No action is required. It is recommended that you reboot when"
							echo "the script is completed or turn it back to permissive mode with"
							echo "the following command:"
							echo "     sudo setenforce 0"
							echo
							pause
							echo
						elif [ "$selinux_status" == "Permissive" ] && [ "$selinux_config_status" == "enforcing" ]; then
							echo "${bold}${yellow}SELinux status is: Permissive.${normal}"
							echo
							echo "However, on system reboot the status will return to enforcing."
							echo "Action required to ensure samba works on reboot."
							echo
							echo '-------------------------------------------'				
							echo
							selinux_samba_adjustments_function
							echo
							sleep 10
						else
							echo "${bold}${red}This message for SELinux status Samba (2) should not be visible.${normal}"
							echo
							sleep 10
						fi
					else
						echo "${bold}${red}This message for SELinux temporary status should not be visible.${normal}"
						echo
						sleep 10
					fi
				fi
			elif [ "$selinux_available_check" -eq "127" ]; then
				echo "${bold}${green}SELinux is not available. No action required.${normal}"
				echo
				sleep 10
			else
				echo "${bold}${red}This message for SELinux check should not be visible.${normal}"
				echo
				sleep 10
			fi
			#---------------------------------------------------------------------------------------------------------------------------------
			function firewall_cmd_samba_adjustments_function () {
				firewall_zone_name=$( sudo firewall-cmd --list-all | sed -n '1 p' | awk '{ print $1 }' )
				
				echo "sudo firewall-cmd --permanent --zone=$firewall_zone_name --add-service=samba"
				sudo firewall-cmd --permanent --zone=$firewall_zone_name --add-service=samba
				echo
				echo "sudo firewall-cmd --reload"
				sudo firewall-cmd --reload
			}

			firewall_cmd_status=$( sudo firewall-cmd --state 2>/dev/null )
			firewall_cmd_available_check=$?
			# echo Check: $firewall_cmd_available_check
			echo
			echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "
			echo
			if [ "$firewall_cmd_available_check" -eq "0" ] || [ "$firewall_cmd_available_check" -eq "252" ] || [ "$firewall_cmd_available_check" -ne "1" ]; then
				# 0 is running, 252 is not running.
				# echo State: $firewall_cmd_status
				echo "${bold}${yellow}Firewall-cmd installed.${normal}"
				if [ "$firewall_cmd_status" == "running" ]; then
					echo "${bold}${yellow}Firewall-cmd is running currently.${normal}"
					echo
					echo "${bold}${yellow}Action required to ensure samba works.${normal}"
					echo
					echo '-------------------------------------------'				
					echo
					firewall_cmd_samba_adjustments_function
					echo
					sleep 10
				elif [ "$firewall_cmd_status" == "not running" ]; then
					echo "${bold}${green}Firewall-cmd is not running currently.${normal}"
					echo
					echo "${bold}${yellow}Action required to ensure samba works.${normal}"
					echo
					echo '-------------------------------------------'				
					echo
					firewall_cmd_samba_adjustments_function
					echo
					sleep 10
				else
					echo "${bold}${red}This message should not be visible for firewall-cmd status.${normal}"
					echo
					sleep 10
				fi
			elif [ "$firewall_cmd_available_check" -eq "1" ]; then
				echo "${bold}${green}Firewall_cmd is not available. No action required.${normal}"
				echo
				sleep 10
			else
				echo "${bold}${red}This message for Firewall_cmd check should not be visible.${normal}"
				echo
				sleep 10
			fi
		fi
		#---------------------------------------------------------------------------------------------------------------------------------
		#---------------------------------------------------------------------------------------------------------------------------------
	else
		echo "This message should not be visible."
	fi
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo

if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	is_apache_2_installed=$( apt-cache policy apache2 | grep "Installed:" | cut -c 14-40 )
	package_name=apache2
fi
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	# https://www.liquidweb.com/kb/how-to-install-apache-on-fedora-21/
	is_apache_2_installed=$( dnf info -q httpd | grep -i "Version" | tail -1 | tr -s " " | awk '{ print $3 }' )
	installation_status_apache2=$( dnf info -q httpd | sed -n '2 p' )
	package_name=httpd
	# Installed Packages
	# Available Packages
	# Error: No matching Packages to list
	if [[ "${installation_status_apache2,,}" == "installed packages" || "${installation_status_apache2,,}" == "available packages" ]]; then
		# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
		:
	else
		installation_status_apache2=$( dnf info -q httpd | sed -n '1 p' )
		if [[ "${installation_status_apache2,,}" == "installed packages" || "${installation_status_apache2,,}" == "available packages" ]]; then
			# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
			:
		else
			installation_status_apache2="error"
		fi
	fi
fi

# Apache check
if [[ "$is_apache_2_installed" != "(none)" && "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" && "$port_80_listening" == "LISTEN" && "$port_80_listening_app" != "nginx" ]] || [[ "$is_apache_2_installed" != "(none)" && "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$port_443_listening" == "LISTEN" && "$port_443_listening_app" != "nginx" ]] || [[ "$installation_status_apache2" == "Installed Packages" && "$port_80_listening" == "LISTEN" && "$port_80_listening_app" != "nginx" ]] || [[ "$installation_status_apache2" == "Installed Packages" && "$port_443_listening" == "LISTEN" && "$port_443_listening_app" != "nginx" ]] || [[ "$port_80_listening" == "LISTEN" && "$port_80_listening_app" != "nginx" ]] || [[ "$port_443_listening" == "LISTEN" && "$port_443_listening_app" != "nginx" ]]; then
	# Checks if apache is installed and active in non-Fedora with apt-cache, installed and active in Fedora with dnf, or if some generic service using port 80 or port 443.
	if [[ "$is_apache_2_installed" != "(none)" && "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" && "$port_80_listening" == "LISTEN" ]] || [[ "$is_apache_2_installed" != "(none)" && "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$port_443_listening" == "LISTEN" ]]; then
		# Checks if apache is installed and active in non-Fedora with apt-cache
		sudo sed -i '\!^apache =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache = '"yes"'!;H};x}' $app_installation_status_file
		echo "${red}${bold}Apache2 is installed, version $is_apache_2_installed${normal}"
		if [[ "$is_apache_2_installed" != "(none)" && "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" && "$port_80_listening" == "LISTEN" && "$port_443_listening" != "LISTEN" ]]; then
			echo "Port 80 in use, port 443 is not in use."
			sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_80 = '"yes"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_443 = '"no"'!;H};x}' $app_installation_status_file
		elif [[ "$is_apache_2_installed" != "(none)" && "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" && "$port_80_listening" != "LISTEN" && "$port_443_listening" == "LISTEN" ]]; then
			echo "Port 80 is not in use, port 443 in use."
			sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_80 = '"no"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_443 = '"yes"'!;H};x}' $app_installation_status_file
		elif [[ "$is_apache_2_installed" != "(none)" && "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" && "$port_80_listening" == "LISTEN" && "$port_443_listening" == "LISTEN" ]]; then
			echo "Port 80 and port 443 are in use."
			sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_80 = '"yes"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_443 = '"yes"'!;H};x}' $app_installation_status_file
		else
			echo "${yellow}This message should not be visible, regarding port 80 and 443.${normal}"
		fi		
	elif [[ "$installation_status_apache2" == "Installed Packages" && "$port_80_listening" == "LISTEN" ]] || [[ "$installation_status_apache2" == "Installed Packages" && "$port_443_listening" == "LISTEN" ]]; then
		# Checks if apache is installed and active in Fedora with dnf
		sudo sed -i '\!^apache =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache = '"yes"'!;H};x}' $app_installation_status_file
		echo "${red}${bold}Apache2 is installed, version $is_apache_2_installed${normal}"
		if [[ "$installation_status_apache2" == "Installed Packages" && "$port_80_listening" == "LISTEN" && "$port_443_listening" != "LISTEN" ]]; then
			echo "Port 80 in use, port 443 is not in use."
			sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_80 = '"yes"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_443 = '"no"'!;H};x}' $app_installation_status_file
		elif [[ "$installation_status_apache2" == "Installed Packages" && "$port_80_listening" != "LISTEN" && "$port_443_listening" == "LISTEN" ]]; then
			echo "Port 80 is not in use, port 443 in use."
			sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_80 = '"no"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_443 = '"yes"'!;H};x}' $app_installation_status_file
		elif [[ "$installation_status_apache2" == "Installed Packages" && "$port_80_listening" == "LISTEN" && "$port_443_listening" == "LISTEN" ]]; then
			echo "Port 80 and port 443 are in use."
			sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_80 = '"yes"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_443 = '"yes"'!;H};x}' $app_installation_status_file
		else
			echo "${yellow}This message should not be visible, regarding port 80 and 443.${normal}"
		fi		
	elif [[ "$port_80_listening" == "LISTEN" ]] || [[ "$port_443_listening" == "LISTEN" ]]; then
		# Checks for some generic service using port 80 or port 443.
		sudo sed -i '\!^apache =!{h;s!=.*!= '"other"'!};${x;\!^$!{s!!apache = '"other"'!;H};x}' $app_installation_status_file
		echo "${red}${bold}Some other website hosting service detected."${normal}
		if [[ "$port_80_listening" == "LISTEN" && "$port_443_listening" != "LISTEN" ]]; then
			echo "Port 80 in use, port 443 is not in use."
			sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_80 = '"yes"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_443 = '"no"'!;H};x}' $app_installation_status_file
		elif [[ "$port_80_listening" != "LISTEN" && "$port_443_listening" == "LISTEN" ]]; then
			echo "Port 80 is not in use, port 443 in use."
			sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_80 = '"no"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_443 = '"yes"'!;H};x}' $app_installation_status_file
		elif [[ "$port_80_listening" == "LISTEN" && "$port_443_listening" == "LISTEN" ]]; then
			echo "Port 80 and port 443 are in use."
			sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_80 = '"yes"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_443 = '"yes"'!;H};x}' $app_installation_status_file
		else
			echo "${yellow}This message should not be visible, regarding port 80 and 443.${normal}"
		fi
	else
		echo "${yellow}Some error occurred in the script.${normal}"
		echo "${yellow}This message should not be visible.${normal}"
	fi
	echo 
	echo "${red}${bold}This will conflict with the existing installation of NGINX.${normal}"
	echo
	echo "In order to avoid a conflict, it is suggested that one of the"
	echo "following actions is taken:"
	echo
	echo "     * The default web page in NGINX is disabled and only to use "
	echo "       the reverse proxy for administrating the drawpile server."
	echo "       You CANNOT use web admin or list server if you do this."
	echo
	echo "     * Leave it enabled and migrate your web configuration to NGINX."
	echo
	echo "     * Migrate the configuration manually over to Apache or other"
	echo "       software."
	echo
	echo "${bold}Please make your selection.${normal}"
	echo "1 - Disable Default Web Page"
	echo "        (Command -- sudo rm /etc/nginx/sites-enabled/default)"
	echo "2 - Do nothing (advanced users only)"
	echo
	while :; do
		read -r -p "${bold}${cyan}Enter a number and hit enter to continue${normal}: " nginx_default_config
		[[ $nginx_default_config =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $nginx_default_config >= 1 && $nginx_default_config <= 2)); then
			break
		else
			echo
			echo "${red}${bold}Invalid number selection, try again.${normal}"
			echo
		fi
	done
	echo
	if [ "$nginx_default_config" == "1" ]; then
		sudo rm /etc/nginx/sites-enabled/default
		echo
		echo "Default NGINX website disabled."
	else
		echo "${red}${bold}Doing nothing regarding conflicting installation.${normal}"
	fi
elif [[ "$is_apache_2_installed" = "(none)" && "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	sudo sed -i '\!^apache =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache = '"no"'!;H};x}' $app_installation_status_file
	sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_80 = '"no"'!;H};x}' $app_installation_status_file
	sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_443 = '"no"'!;H};x}' $app_installation_status_file
	echo "${green}Apache2 or other website hosting service is not installed.${normal}"
	echo "${green}No conflict detected with NGINX web server.${normal}"
elif [[ "$installation_status_apache2" == "Available Packages" && "$port_80_listening" != "LISTEN" && "$port_443_listening" != "LISTEN" ]]; then
	sudo sed -i '\!^apache =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache = '"no"'!;H};x}' $app_installation_status_file
	sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_80 = '"no"'!;H};x}' $app_installation_status_file
	sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_443 = '"no"'!;H};x}' $app_installation_status_file
	echo "${green}Apache HTTP server (httpd apparently in Fedora, aka Apache2) or other${normal}"
	echo "${green}website hosting service is not installed. No conflict detected with${normal}"
	echo "${green}NGINX web server.${normal}"
elif [[ "$installation_status_apache2" == "Installed Packages" && "$port_80_listening" != "LISTEN" && "$port_443_listening" != "LISTEN" ]]; then
	sudo sed -i '\!^apache =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache = '"yes"'!;H};x}' $app_installation_status_file
	sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_80 = '"no"'!;H};x}' $app_installation_status_file
	sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_443 = '"no"'!;H};x}' $app_installation_status_file
	echo "${green}Apache HTTP server (httpd apparently in Fedora, aka Apache2) is installed${normal}"
	echo "${green}but not currently active. No conflict detected with NGINX web server.${normal}"
else
	echo "${yellow}${bold}Cannot determine if Apache2 or other website hosting${normal}"
	echo "${yellow}${bold}service is installed, moving on.${normal}"
fi
echo
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}*****Drawpile Server Database Prep . . . *****${normal}"
echo

if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	# Wrapped in if-statement in order to avoid error message on Fedora:
	#	nginx: [error] open() "/run/nginx.pid" failed (2: No such file or directory)
	
	# sudo /etc/init.d/nginx restart
	# sudo nginx -s reload
	# sudo /etc/init.d/nginx restart

	sudo systemctl restart nginx
	wait $!
fi


if [ "$drawpile_abuse_report_installation_status" == "y" ] || [ "$drawpile_abuse_report_installation_status" == "Y" ] || [ "$drawpile_abuse_report_installation_status" == "yes" ] || [ "$drawpile_abuse_report_installation_status" == "YES" ] || [ "$drawpile_abuse_report_installation_status" == "Yes" ]; then
	
	abuse_report_token_inserted=$( grep -m 1 "abuse_report_token_inserted = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
	
	if [ "$abuse_report_token_inserted" != "yes" ]; then
		# Abuse Report String
		echo "Inserting value into server database file so report mechanism works."
		echo
		if ! echo "insert into settings values ('reporttoken', '$abuse_report_auth_token'), ('abusereport', 'true');" | sudo sqlite3 /home/drawpileuser/server.db ; then
			sudo sed -i '\!^abuse_report_token_inserted =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!abuse_report_token_inserted = '"no"'!;H};x}' $drawpile_configuration_values_file
			command_die "${bold}${red}Command 'Failed to insert auth token into server database.${normal}"
		else
			echo "${bold}${green}Successful insertion of value into server database.${normal}"
			sudo sed -i '\!^abuse_report_token_inserted =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!abuse_report_token_inserted = '"yes"'!;H};x}' $drawpile_configuration_values_file
		fi
	else
		echo "${bold}${green}Report Auth token already inserted into server settings database file.${normal}"
	fi

	# if grep 'abuse_report_token_inserted = yes' $drawpile_configuration_values_file > /dev/null; then
	# 	echo "Report Auth token already inserted into server settings database file."
	# else
	# 	echo "Inserting value into server database file so report mechanism works."
	# 	echo "insert into settings values ('reporttoken', '$abuse_report_auth_token'), ('abusereport', 'true');" | sudo sqlite3 /home/drawpileuser/server.db
	# 	sudo sed -i '\!^abuse_report_token_inserted =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!abuse_report_token_inserted = '"yes"'!;H};x}' $drawpile_configuration_values_file
	# fi
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo  

if [[ "$ssl_encryption_config" == "3" ]]; then
	# echo 'Press 3 for no SSL security.'
	:
	# Do nothing as no error was detected.
	# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
elif [[ "$ssl_encryption_config" == "1" ]] || [[ "$ssl_encryption_config" == "2" ]] || [[ "$ssl_encryption_config" != "3" ]] ; then
	# echo 'Press 1 for Self Signed Certificates'
	# echo 'Press 2 for Lets Encrypt'
	# The options below configured the server to use SSL, so restarting Drawpile systemd services would be necessary.
	
	echo "${bold}${cyan}*****Preparing setup for Drawpile List Server . . . *****${normal}"
	echo
	
	if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
		version_golang=$( apt-cache policy golang | grep "Installed:" | cut -c 14-21 )
	fi
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		version_golang=$( dnf info -q golang | grep -i "Version" | tail -1 | tr -s " " | awk '{ print $3 }' )
		
		installation_status_golang=$( dnf info -q golang | sed -n '2 p' )
		# Installed Packages
		# Available Packages
		# Error: No matching Packages to list
		if [[ "${installation_status_golang,,}" == "installed packages" || "${installation_status_golang,,}" == "available packages" ]]; then
			# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
			:
		else
			installation_status_golang=$( dnf info -q golang | sed -n '1 p' )
			if [[ "${installation_status_golang,,}" == "installed packages" || "${installation_status_golang,,}" == "available packages" ]]; then
				# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
				:
			else
				installation_status_golang="error"
			fi
		fi
	fi
	minimum_version_golang=2:1.15~1
	if 
	[[ "$version_golang" == "(none)" && "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]] && [[ "$version_golang" == "(none)" && "$what_linux_name" != "NAME=Fedora" ]] || [[ "${installation_status_golang,,}" == "available packages" ]]; then
		echo "Installing package golang . . ."
		echo
		app_does_not_exist=0
		app_installed=0
		app_not_installed=0
		if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
			progs=(golang);
			package_install_status_check_function
			sudo $package_install_program golang # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
		elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
			progs=(golang gcc-go golang-bin);
			package_install_status_check_function
			sudo $package_install_program golang gcc-go golang-bin # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
		else
			:
		fi
	else
		echo "Package golang already installed."
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	# Type the following to get a list of Go variables/info: go env
	go_path=$( go env GOPATH )
	echo "${bold}${cyan}***** Installing Drawpile List Server . . . *****${normal}"
	echo
	if [[ -e "/etc/systemd/system/drawpile-listserver.service" ]]; then
		echo "${bold}${cyan}***** If Drawpile Listserver Running, Stopping Process . . . *****${normal}"
		echo
	fi
	# The number ordering chosen is based on the order in which they appear in RPi-Monitor. Not the order in which they are used in the script.
	service_name_to_check_03=drawpile-listserver.service
	if [ -e "/etc/systemd/system/drawpile-listserver.service" ]; then
		drawpile_listserver_loaded=$( systemctl status $service_name_to_check_03 | grep "Loaded: " | sed -nEr "s/.*$service_name_to_check_03; (.*); vendor.*/\1/p" )
		# ------------------------------------------------------------------------------------------------------------------------------------------------------------
		# Check to ensure output is not blank and find it in an alternate way
		# echo Value: $drawpile_listserver_loaded
		# echo
		if [ -z "$drawpile_listserver_loaded" ]; then
			# echo Oops. Blank!
			drawpile_listserver_loaded=$( systemctl status $service_name_to_check_03 | grep "Loaded: " | sed -nEr "s/.*$service_name_to_check_03; (.*); preset:.*/\1/p" )
			# echo
		fi
		# echo Value: $drawpile_listserver_loaded
		# echo
		if [ -z "$drawpile_listserver_loaded" ]; then
			drawpile_listserver_loaded=error
		fi
		# ------------------------------------------------------------------------------------------------------------------------------------------------------------
		drawpile_listserver_status=$( systemctl status $service_name_to_check_03 | grep "Active: " | sed -nEr 's/.*(\(.*\)).*/\1/p' )
		if [ -z "$drawpile_listserver_status" ]; then
			drawpile_listserver_status=error
		fi		
		echo "Service name : $service_name_to_check_03"
		echo "Start on boot: $drawpile_listserver_loaded"
		echo "Loaded Status: $drawpile_listserver_status"
		sudo systemctl stop --now $service_name_to_check_03
		echo
	else
		drawpile_listserver_loaded="not_loaded"
		drawpile_listserver_status="not_loaded"
		echo "The $service_name_to_check_03 is not yet loaded. No action required."
		echo
	fi
	echo "This step may take a while, please be patient."
	echo
	# The -a being passed to install or get makes the install take longer, but also rebuilds everything...
	# So hopefully the recompile process works every time. Otherwise it appears you can build a bad binary.
	if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
		# Version check provided by askmeaboutloom
		if go version | perl -0777 -ne 'exit(/\bgo([0-9]+\.[0-9]+)\./ && $1 >= 1.16 ? 0 : 1)'; then
			go install -a 'github.com/drawpile/listserver@latest'
		else
			# go get github.com/drawpile/listserver
			GO111MODULE=on go get -a 'github.com/drawpile/listserver@latest'
		fi
	fi
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		package_name=golang
		version_test_by_distro_function
		
		if go version | perl -0777 -ne 'exit(/\bgo([0-9]+\.[0-9]+)\.?/ && $1 >= 1.16 ? 0 : 1)'; then
			go install -a 'github.com/drawpile/listserver@latest'
		else
			# go get github.com/drawpile/listserver
			GO111MODULE=on go get -a 'github.com/drawpile/listserver@latest'
		fi
		echo "Go Version: $test_version_simple"
		# if [[ "$test_version_simple" = "1.16" ]] || [[ "$test_version_simple" > "1.16" ]]; then
		# 	go install 'github.com/drawpile/listserver@latest'
		# elif [[ "$test_version_simple" < "1.16" ]]; then
		# 	GO111MODULE=on go get 'github.com/drawpile/listserver@latest'
		# else
		# 	echo "This message for golang's version ($test_version_simple) should not be visible."
		# fi
	fi
	# package_name=golang
	# version_test_by_distro_function
	# if [ "$test_version_simple" = "1.16" ] || [ "$test_version_simple" > "1.16" ]; then
	# 	go install 'github.com/drawpile/listserver@latest'
	# elif [ "$test_version_simple" < "1.16" ]; then
	# 	GO111MODULE=on go get 'github.com/drawpile/listserver@latest'
	# else
	# 	echo "This message for golang's version ($test_version_simple) should not be visible."
	# fi
	
	if [[ ! -e  "/usr/local/bin/listserver" ]]; then
		sudo cp $go_path/bin/listserver /usr/local/bin
	elif [ "$go_path/bin/listserver" -nt "/usr/local/bin/listserver" ]; then
		sudo cp $go_path/bin/listserver /usr/local/bin
	else
		echo "List server in /usr/local/bin is up to date ..."
	fi
	
	if [[ -e  "$go_path/bin/listserver" ]]; then
		echo "Located ListServer: $go_path/bin/listserver"
		go_path_manual=$go_path/bin/listserver
	elif [[ -e  "/home/$current_username/go/bin/listserver" ]]; then
		go_path_manual=/home/$current_username/go
		echo "Located ListServer: $go_path/bin/listserver"
	elif [[ -e  "/home/pi/go/bin/listserver" ]]; then
		go_path_manual=/home/pi/go
		echo "Located ListServer: $go_path/bin/listserver"
	else
		echo "${bold}${red}Was unable to determine location of listserver.${normal}"
		echo "${bold}${red}This will cause issues with the script.${normal}"
		echo
		sudo free -m
		echo
		echo "Please copy output from terminal for diagnostic purposes."
		echo "Clearing 'go' cache of files, this sometimes causes failure."
		echo
		# https://www.adityathebe.com/how-to-clean-go-build-cache/
		go clean -cache
		echo
		echo "${bold}${red}Script will exit in 30 seconds.${normal}"
		echo
		sleep 30
		exit
	fi

	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	list_server_address_listen=127.0.0.1
	list_server_port=8080
	list_server_config_filename=listserverconfig.cfg
	list_server_config_file_location=/home/drawpileuser/$list_server_config_filename

	function invalid_list_server_database_connection_string () {
		echo
		echo "${red}${bold}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
		echo "${red}${bold}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!${normal}"
		echo "${red}${bold}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
		echo
		echo "${red}${bold}Invalid number selected, try again. ${normal}"
		echo
		echo "${red}${bold}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
		echo "${red}${bold}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!${normal}"
		echo "${red}${bold}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
		echo 
	}

	# --------------------------------------------------------------------------------
	# --------------------------------------------------------------------------------

	function generate_list_server_config_filename () {
		echo "${bold}${cyan}***** Configuring settings for List Server . . . *****${normal}"
		echo
		if [[ "$list_server_config_read_values_completed" == "yes" && "$list_server_config_read_values_completed_02" == "yes" ]]; then
			# This is because I recorded some list server values and not others. To ensure all are recorded, this test must pass to check previously stored data.
			variable_to_read_1=list_server_database_connection_string_num
			variable_to_read_2=listserver_database_connection_string
			variable_to_read_3=""

			value_description_1="This is the list server operation mode."
			value_description_2=" "
			value_description_3="1 - none      - listserver will be in read-only mode (includeservers must be set by script)"
			value_description_4="                This means other servers cannot list their session on your server."
			value_description_5="2 - memory    - sessions will be lost if server is restarted, but no database needed."
			value_description_6="3 - filename  - keep sessions in a SQLite database. You will be prompted to enter name."

			read_stored_config_value_query_function
		else
			maybe_use_config_value=n
		fi
		if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
			echo "Storing value and moving on."
			list_server_database_connection_string_num=$read_stored_config_value_query_1
			listserver_database_connection_string=$read_stored_config_value_query_2
		elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
			echo "${bold}${yellow}Setting 1 of 11${normal}"
			echo
			echo "Please configure how you want the list server to function by selecting the number desired ..."
			echo
			echo Possible values:
			echo "1 - none      - listserver will be in read-only mode (includeservers is set by script)."
			echo "                This means other servers cannot list their session on your server."
			echo "                     "
			echo "                     https://$hostname/admin_ui/"
			echo "                     "
			echo "                     This page will not allow login, as the 'new web admin'"
			echo "                     username and password will work to load the page, but"
			echo "                     you'll receive a 404 error with the 'web admin' username"
			echo "                     and password. This is by design since a read only list"
			echo "                     server has nothing to administrate. This is being left"
			echo "                     here as eventually it will be used for administrating"
			echo "                     Drawpile-srv and list server."
			echo "2 - memory    - sessions will be lost if server is restarted, but no database needed."
			echo "3 - filename  - keep sessions in a SQLite database. You will be prompted to enter name."
			echo

			while :; do
				read -r -p "${bold}${cyan}Enter a number and hit enter to continue${normal}: " list_server_database_connection_string_num
				[[ $list_server_database_connection_string_num =~ ^[1-3]+$ ]] || { invalid_list_server_database_connection_string; continue; }
				if (( "$list_server_database_connection_string_num" >= "1" && "$list_server_database_connection_string_num" <= "3" )) ; then
					if [ "$list_server_database_connection_string_num" == "1" ]; then
						listserver_database_connection_string="none"
					elif [ "$list_server_database_connection_string_num" == "2" ]; then
						listserver_database_connection_string="memory"
					elif [ "$list_server_database_connection_string_num" == "3" ]; then
						echo
						echo "${bold}${cyan} Please select an appropriate database name. ${normal}"
						echo "${bold}${cyan} Do not use spaces or include file extension.  ${normal}"
						echo "${bold}${cyan} Leaving blank will default database to this: ListServerDB  ${normal}"
						echo
						read -r -p "${bold}${cyan}Enter database name now ${normal}: " list_server_database_connection_string_name
						echo
						if [ "$list_server_database_connection_string_name" = "" ]; then
							listserver_database_connection_string="/home/drawpileuser/ListServerDB.db"
							echo "${bold}${cyan}Selected:${normal} $listserver_database_connection_string"
						else
							listserver_database_connection_string=/home/drawpileuser/$list_server_database_connection_string_name.db
							echo "${bold}${cyan}Selected:${normal} $listserver_database_connection_string"
						fi
					else
						echo
						echo "This message should not be visible as an invalid option was provided."
						echo
						invalid_list_server_database_connection_string
					fi
					break
				else
					invalid_list_server_database_connection_string
				fi
			done
			# sudo sed -i '\!^list_server_database_connection_string_num =!{h;s!=.*!= '"$list_server_database_connection_string_num"'!};${x;\!^$!{s!!list_server_database_connection_string_num = '"$list_server_database_connection_string_num"'!;H};x}' $drawpile_configuration_values_file
			# sudo sed -i '\!^listserver_database_connection_string =!{h;s!=.*!= '"$listserver_database_connection_string"'!};${x;\!^$!{s!!listserver_database_connection_string = '"$listserver_database_connection_string"'!;H};x}' $drawpile_configuration_values_file
			# wait $!
		else
			echo "This message should not be visible."
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		if [[ "$list_server_config_read_values_completed" == "yes" && "$list_server_config_read_values_completed_02" == "yes" ]]; then
			# This is because I recorded some list server values and not others. To ensure all are recorded, this test must pass to check previously stored data.
			variable_to_read_1=list_server_favicon_location_entry
			variable_to_read_2=list_server_favicon_toggle
			variable_to_read_3=list_server_favicon_location

			value_description_1="${bold}${yellow}Optional setting:${normal} Use the default location by typing 1 and hitting enter, leave"
			value_description_2="blank to disable the favicon, or Advanced Users may enter a local location for"
			value_description_3="the favicon file."
			value_description_4=""
			value_description_5=""

			read_stored_config_value_query_function
		else
			maybe_use_config_value=n
		fi
		if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
			echo "Storing value and moving on."
			list_server_favicon_location_entry=$read_stored_config_value_query_1
			list_server_favicon_toggle=$read_stored_config_value_query_2
			list_server_favicon_location=$read_stored_config_value_query_3
		elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
			echo "${bold}${yellow}Setting 2 of 11${normal}"
			echo
			echo "${bold}${yellow}Optional setting:${normal} Use the default location by typing 1 and hitting enter, leave"
			echo "blank to disable the favicon, or Advanced Users may enter a local location for"
			echo "the favicon file. The default location will be the the following location:"
			echo "     https://$hostname/128.png"
			echo
			function favicon_instructions_function () {
				echo "Please prepare for images in the PNG file type with the filenames listed below."
				echo "Think of this as a logo to represent your server community and show up in the"
				echo "Session, Browse menu (for the beta client)."
				echo
				[[ "$dp_install_loc" == "$script_directory" && ! -d "$list_server_favicon_location_entry" ]] && echo "Once prepared, please place them here: "
				[[ "$dp_install_loc" == "$script_directory" && ! -d "$list_server_favicon_location_entry" ]] && echo "     $dp_install_loc"
				[[ "$dp_install_loc" != "$script_directory" && ! -d "$list_server_favicon_location_entry" ]] && echo "Once prepared, please place in one of these two locations below: "
				[[ "$dp_install_loc" != "$script_directory" && ! -d "$list_server_favicon_location_entry" ]] && echo "     $script_directory"
				[[ "$dp_install_loc" != "$script_directory" && ! -d "$list_server_favicon_location_entry" ]] && echo "     $dp_install_loc"
				[[ "$dp_install_loc" == "$script_directory" && -d "$list_server_favicon_location_entry" ]] && echo "Once prepared, please place in one of these two locations below: "
				[[ "$dp_install_loc" == "$script_directory" && -d "$list_server_favicon_location_entry" ]] && echo "     $dp_install_loc"
				[[ "$dp_install_loc" == "$script_directory" && -d "$list_server_favicon_location_entry" ]] && echo "     $list_server_favicon_location_entry"
				[[ "$dp_install_loc" != "$script_directory" && -d "$list_server_favicon_location_entry" ]] && echo "Once prepared, please place in one of these three locations below: "
				[[ "$dp_install_loc" != "$script_directory" && -d "$list_server_favicon_location_entry" ]] && echo "     $script_directory"
				[[ "$dp_install_loc" != "$script_directory" && -d "$list_server_favicon_location_entry" ]] && echo "     $dp_install_loc"
				[[ "$dp_install_loc" != "$script_directory" && -d "$list_server_favicon_location_entry" ]] && echo "     $list_server_favicon_location_entry"
				echo
				echo "The script will handle the rest of the required configuration."
				echo "Using other configurations is not recommended except for advanced users."
				echo
				echo 'Resolution / Filename'
				echo '16x16      / 16.png'
				echo '32x32      / 32.png'
				echo '48x48      / 48.png'
				echo '64x64      / 64.png'
				echo '128x128    / 128.png (maximum size used by DP client)'
			}
			favicon_instructions_function
			echo
			echo "Leaving the field blank will assume there is no icon to be used."
			echo
			# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			while :; do
				read -r -p "${bold}${cyan}Enter a location for the favicon${normal}: " list_server_favicon_location_entry
				echo
				if [ "$list_server_favicon_location_entry" = "" ]; then
					list_server_favicon_location_entry="disabled"
					list_server_favicon_toggle="# favicon"
					list_server_favicon_location="\"\""
					echo "${bold}${cyan}Left blank, favicon will not be used.${normal}"
					break
				elif [ "$list_server_favicon_location_entry" = "1" ]; then
					if [ "$ssl_encryption_config" == "1" ]; then
						# echo 'Press 1 for Self Signed Certificates'
						list_server_favicon_toggle="favicon"
						list_server_favicon_location="\"http://$hostname/128.png\""
						break
					elif [ "$ssl_encryption_config" == "2" ] || [ "$ssl_encryption_config" != "1" || "$ssl_encryption_config" != "3" ]; then
						# echo 'Press 2 for Lets Encrypt'
						# echo Invalid option selected. Assuming option 2 intended.
						list_server_favicon_toggle="favicon"
						list_server_favicon_location="\"https://$hostname/128.png\""
						break
					else
						# echo 'Press 3 for no SSL security.' This option should not be available for list server so continue
						:
						# Do nothing as no error was detected.
						# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
						continue
					fi
					echo "${bold}${cyan}Selected 1, favicon will use default value to be configured in script.${normal}"
				elif [[ -d "$list_server_favicon_location_entry" ]]; then
					list_server_favicon_toggle="favicon"
					list_server_favicon_location="\"$list_server_favicon_location_entry\""
					echo "${bold}${cyan}Selected:${normal} $list_server_favicon_location"
					break
				else
					echo
					echo "Invalid input selection, try again."
					echo
					continue
				fi
			done
			# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			echo
			if [ "$list_server_favicon_location_entry" = "" ]; then
				list_server_favicon_toggle="# favicon"
				list_server_favicon_location="\"\""
				echo "${bold}${cyan}Left blank, favicon will not be used.${normal}"
			elif [ "$list_server_favicon_location_entry" = "1" ]; then
				if [ "$ssl_encryption_config" == "1" ]; then
					# echo 'Press 1 for Self Signed Certificates'
					list_server_favicon_toggle="favicon"
					list_server_favicon_location="\"http://$hostname/128.png\""
				elif [ "$ssl_encryption_config" == "2" ] || [ "$ssl_encryption_config" != "1" || "$ssl_encryption_config" != "3" ]; then
					# echo 'Press 2 for Lets Encrypt'
					# echo Invalid option selected. Assuming option 2 intended.
					list_server_favicon_toggle="favicon"
					list_server_favicon_location="\"https://$hostname/128.png\""
				else
					:
					# Do nothing as no error was detected.
					# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
				fi
				echo "${bold}${cyan}Selected 1, favicon will use default value to be configured in script.${normal}"
			else
				list_server_favicon_toggle="favicon"
				list_server_favicon_location="\"$list_server_favicon_location_entry\""
				echo "${bold}${cyan}Selected:${normal} $list_server_favicon_location"
			fi
			# sudo sed -i '\!^list_server_favicon_location_entry =!{h;s!=.*!= '"$list_server_favicon_location_entry"'!};${x;\!^$!{s!!list_server_favicon_location_entry = '"$list_server_favicon_location_entry"'!;H};x}' $drawpile_configuration_values_file
			# sudo sed -i '\!^list_server_favicon_toggle =!{h;s!=.*!= '"$list_server_favicon_toggle"'!};${x;\!^$!{s!!list_server_favicon_toggle = '"$list_server_favicon_toggle"'!;H};x}' $drawpile_configuration_values_file
			# sudo sed -i '\!^list_server_favicon_location =!{h;s!=.*!= '"$list_server_favicon_location"'!};${x;\!^$!{s!!list_server_favicon_location = '"$list_server_favicon_location"'!;H};x}' $drawpile_configuration_values_file
		else
			echo "This message should not be visible."
		fi
		# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		if [[ "$list_server_config_read_values_completed" == "yes" && "$list_server_config_read_values_completed_02" == "yes" ]]; then
			# This is because I recorded some list server values and not others. To ensure all are recorded, this test must pass to check previously stored data.
			variable_to_read_1=list_server_short_name
			variable_to_read_2=""
			variable_to_read_3=""

			value_description_1="A short name for this server, which a user will see when they choose their"
			value_description_2="list server option when hosting their session."
			value_description_3=""
			value_description_4=""
			value_description_5=""

			read_stored_config_value_query_function
		else
			maybe_use_config_value=n
		fi
		if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
			echo "Storing value and moving on."
			list_server_short_name=$read_stored_config_value_query_1
		elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
			echo "${bold}${yellow}Setting 3 of 11${normal}"
			echo
			echo "Enter short name for this server, which a user will see when they choose their"
			echo "list server option when hosting their session."
			echo
			echo "If your server name was example.hostwebsite.com, consider using just: example"
			echo
			echo "Your hostname: $hostname"
			echo
			echo "Leaving the field blank will auto select the following: $hostname"
			echo
			read -r -p "${bold}${cyan}Enter a server short name${normal}: " list_server_short_name
			echo
			if [ "$list_server_short_name" = "" ]; then
				list_server_short_name="$hostname"
				echo "${bold}${cyan}Left blank, automatically selected:${normal} $hostname"
			else
				echo "${bold}${cyan}Selected:${normal} $list_server_short_name"
			fi
			sudo sed -i '\!^list_server_short_name =!{h;s!=.*!= '"$list_server_short_name"'!};${x;\!^$!{s!!list_server_short_name = '"$list_server_short_name"'!;H};x}' $drawpile_configuration_values_file
		else
			echo "This message should not be visible."
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		if [[ "$list_server_config_read_values_completed" == "yes" && "$list_server_config_read_values_completed_02" == "yes" ]]; then
			# This is because I recorded some list server values and not others. To ensure all are recorded, this test must pass to check previously stored data.
			variable_to_read_1=list_server_description
			variable_to_read_2=""
			variable_to_read_3=""

			value_description_1="This is a description for the server a user will see when joining the server"
			value_description_2="directly in the Drawpile client, by typing the server name at the bottom"
			value_description_3="of the menu at Session, settings."
			value_description_4=""
			value_description_5=""

			read_stored_config_value_query_function
		else
			maybe_use_config_value=n
		fi
		if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
			echo "Storing value and moving on."
			list_server_description=$read_stored_config_value_query_1
		elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
			echo "${bold}${yellow}Setting 4 of 11${normal}"
			echo
			echo "Enter a description for the server a user will see when joining the server"
			echo "directly in the Drawpile client, by typing the server name at the bottom"
			echo "of the menu at Session, settings. Examples below:"
			echo
			echo "Serberus Drawpile Community Network"
			echo "Public Drawpile Server"
			echo "CloudyWave"
			echo "SyntheticDreams"
			echo
			echo "Leaving the field blank will auto select the following: Drawpile Server for $hostname"
			echo
			read -r -p "${bold}${cyan}Enter a server description${normal}: " list_server_description
			echo
			if [ "$list_server_description" = "" ]; then
				list_server_description="Drawpile Server for $hostname"
				echo "${bold}${cyan}Left blank, automatically selected:${normal} Drawpile Server for $hostname"
			else
				echo "${bold}${cyan}Selected:${normal} $list_server_description"
			fi
			# sudo sed -i '\!^list_server_description =!{h;s!=.*!= '"$list_server_description"'!};${x;\!^$!{s!!list_server_description = '"$list_server_description"'!;H};x}' $drawpile_configuration_values_file
		else
			echo "This message should not be visible."
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		if [[ "$list_server_config_read_values_completed" == "yes" && "$list_server_config_read_values_completed_02" == "yes" ]]; then
			# This is because I recorded some list server values and not others. To ensure all are recorded, this test must pass to check previously stored data.
			variable_to_read_1=list_server_welcome_msg
			variable_to_read_2=""
			variable_to_read_3=""

			value_description_1="${bold}${yellow}Optional setting:${normal} Enter a welcome message for listing the session"
			value_description_2=""
			value_description_3=""
			value_description_4=""
			value_description_5=""

			read_stored_config_value_query_function
		else
			maybe_use_config_value=n
		fi
		if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
			echo "Storing value and moving on."
			list_server_welcome_msg=$read_stored_config_value_query_1
		elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
			echo "${bold}${yellow}Setting 5 of 11${normal}"
			echo
			echo "${bold}${yellow}Optional setting:${normal} Enter a welcome message for listing the session"
			echo
			echo "Leaving the field blank will assume there is no welcome message to be used."
			echo
			read -r -p "${bold}${cyan}Enter a welcome message ${normal}: " list_server_welcome_msg
			echo
			if [ "$list_server_welcome_msg" = "" ]; then
				list_server_welcome_msg=""
				echo "${bold}${cyan}Left blank, welcome message will not be used.${normal}"
			else
				echo "${bold}${cyan}Selected:${normal} $list_server_welcome_msg"
			fi
			# sudo sed -i '\!^list_server_welcome_msg =!{h;s!=.*!= '"$list_server_welcome_msg"'!};${x;\!^$!{s!!list_server_welcome_msg = '"$list_server_welcome_msg"'!;H};x}' $drawpile_configuration_values_file
		else
			echo "This message should not be visible."
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		if [[ "$list_server_config_read_values_completed" == "yes" && "$list_server_config_read_values_completed_02" == "yes" ]]; then
			# This is because I recorded some list server values and not others. To ensure all are recorded, this test must pass to check previously stored data.
			variable_to_read_1=list_server_nsfm_words_list
			variable_to_read_2=""
			variable_to_read_3=""

			value_description_1="${bold}${yellow}Optional setting:${normal} Configure not safe for work auto-flag sessions."
			value_description_2=""
			value_description_3=""
			value_description_4=""
			value_description_5=""

			read_stored_config_value_query_function
		else
			maybe_use_config_value=n
		fi
		if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
			echo "Storing value and moving on."
			list_server_nsfm_words_list=$read_stored_config_value_query_1
		elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
			echo "${bold}${yellow}Setting 6 of 11${normal}"
			echo
			echo "${bold}${yellow}Optional setting:${normal} Configure not safe for work auto-flag sessions"
			echo
			echo "Default list is as follows:"
			echo "     \"NSFW\", \"NSFM\", \"18+\", \"18 +\", \"+18\", \"+ 18\", \"R18\","
			echo "     \"R-18\", \"K18\", \"K-18\", \"ERP\", \"DRP\" "
			echo
			echo "Format entries as displayed above. Leaving the field blank will"
			echo "assume to use the default list above."
			echo		
			while :; do
				read -r -p "${bold}${cyan} Enter list of NSFW, using the formatting listed above ${normal}: " list_server_nsfm_words_list
				echo
				if [[ "$list_server_nsfm_words_list" = "" ]]; then
					list_server_nsfm_words_list="\"NSFW\", \"NSFM\", \"18+\", \"18 +\", \"+18\", \"+ 18\", \"R18\", \"R-18\", \"K18\", \"K-18\", \"ERP\", \"DRP\""
					echo "${bold}${cyan}Left blank, default NSFM words list used.${normal}"
					break
				elif echo "$list_server_nsfm_words_list" | perl -0777 -ne 'exit(/\A\s*(?:"[^"]*"\s*(?:,\s*"[^"]*")*\s*)?\z/ ? 0 : 1)'; then
					echo "${bold}${cyan}Selected:${normal} $list_server_nsfm_words_list"
					break
				else
					echo "${bold}${red}Invalid formatting. Try again.${normal}"
					echo
				fi
			done
			# sudo sed -i '\!^list_server_nsfm_words_list =!{h;s!=.*!= '"$list_server_nsfm_words_list"'!};${x;\!^$!{s!!list_server_nsfm_words_list = '"$list_server_nsfm_words_list"'!;H};x}' $drawpile_configuration_values_file
		else
			echo "This message should not be visible."
		fi	
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		if [[ "$list_server_database_connection_string_num" == "1" ]]; then
			echo "${bold}${cyan} Configured in read only mode, skipping setting for max listings per ${normal} "
			echo "${bold}${cyan}  external host. ${normal} "
			list_server_max_sessions_per_host_toggle="# maxSessionsPerHost"
		else
			if [[ "$list_server_config_read_values_completed" == "yes" && "$list_server_config_read_values_completed_02" == "yes" ]]; then
				# This is because I recorded some list server values and not others. To ensure all are recorded, this test must pass to check previously stored data.
				variable_to_read_1=list_server_max_sessions_per_host
				variable_to_read_2=list_server_max_sessions_per_host_toggle
				variable_to_read_3=""

				value_description_1="${bold}${yellow}Optional setting:${normal} Configure the max number of listings for other unspecified servers."
				value_description_2=" "
				value_description_3="If first value indicates '0' and the value of query 2 states"
				value_description_4=" '# maxSessionsPerHost', other unspecified servers cannot"
				value_description_5=" use your list server."

				read_stored_config_value_query_function
			else
				maybe_use_config_value=n
			fi
			if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
				echo "Storing value and moving on."
				list_server_max_sessions_per_host=$read_stored_config_value_query_1
				list_server_max_sessions_per_host_toggle=$read_stored_config_value_query_2
			elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
				echo "${bold}${yellow}Setting 7 of 11${normal}"
				echo
				echo "${bold}${yellow}Optional setting:${normal} Configure the max number of listings for other unspecified servers."
				echo
				echo "For example, server abc could list 3 sessions by default on your $hostname"
				echo "listing server. Leaving the field blank will assume other unspecified servers"
				echo "cannot use your list server. Acceptable inputs (without commas) 1, 6, 10, ..."
				echo			
				while :; do
					read -r -p "${bold}${cyan} Enter max number of listings for named servers ${normal}: " list_server_max_sessions_per_host
					[[ $list_server_max_sessions_per_host =~ ^[0-9]+$ ]] || [[ "$list_server_max_sessions_per_host" == "" ]] || { echo; echo "Enter a valid number."; echo; continue; }
					if [[ "$list_server_max_sessions_per_host" = "" ]] || (( $list_server_max_sessions_per_host >= 0 && $list_server_max_sessions_per_host <= 9999)); then
						break
					else
						echo
						echo "${bold}${red}Invalid number selection, try again.${normal}"
						echo
					fi
				done
				echo
				if [ "$list_server_max_sessions_per_host" = "" ]; then
					list_server_max_sessions_per_host="0"
					list_server_max_sessions_per_host_toggle="# maxSessionsPerHost"
					echo "${bold}${cyan}Left blank, unspecified servers not allowed to list.${normal}"
				else
					list_server_max_sessions_per_host_toggle="maxSessionsPerHost"
					echo "${bold}${cyan}Selected:${normal} $list_server_max_sessions_per_host"
				fi
				# sudo sed -i '\!^list_server_max_sessions_per_host =!{h;s!=.*!= '"$list_server_max_sessions_per_host"'!};${x;\!^$!{s!!list_server_max_sessions_per_host = '"$list_server_max_sessions_per_host"'!;H};x}' $drawpile_configuration_values_file
				# sudo sed -i '\!^list_server_max_sessions_per_host_toggle =!{h;s!=.*!= '"$list_server_max_sessions_per_host_toggle"'!};${x;\!^$!{s!!list_server_max_sessions_per_host_toggle = '"$list_server_max_sessions_per_host_toggle"'!;H};x}' $drawpile_configuration_values_file
			
			else
				echo "This message should not be visible."
			fi
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		if [[ "$list_server_database_connection_string_num" == "1" ]]; then
			echo "${bold}${cyan} Configured in read only mode, skipping setting for max listings per named host. ${normal} "
			max_sessions_per_named_host_toggle="# maxSessionsPerNamedHost"
		else
			if [[ "$list_server_config_read_values_completed" == "yes" && "$list_server_config_read_values_completed_02" == "yes" ]]; then
				# This is because I recorded some list server values and not others. To ensure all are recorded, this test must pass to check previously stored data.
				variable_to_read_1=max_sessions_per_named_host
				variable_to_read_2=max_sessions_per_named_host_toggle
				variable_to_read_3=""

				value_description_1="${bold}${yellow}Optional setting:${normal} Configure the max number of listings for other named servers."
				value_description_2=" "
				value_description_3="If first value indicates '0' and the value of query 2 states"
				value_description_4=" '# maxSessionsPerNamedHost', other specifically allowed"
				value_description_5=" servers cannot use your list server."

				read_stored_config_value_query_function
			else
				maybe_use_config_value=n
			fi
			if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
				echo "Storing value and moving on."
				max_sessions_per_named_host=$read_stored_config_value_query_1
				max_sessions_per_named_host_toggle=$read_stored_config_value_query_2
			elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
				echo "${bold}${yellow}Setting 8 of 11${normal}"
				echo
				echo "${bold}${yellow}Optional setting:${normal} Configure the max number of listings for other named servers."
				echo
				echo "For example, server abc could list 3 sessions by default on your $hostname"
				echo "listing server. Leaving the field blank will assume other specifically allowed"
				echo "servers cannot use your list server. Acceptable inputs (without commas) 1, 6, 10, ..."
				echo
				while :; do
					read -r -p "${bold}${cyan} Enter max number of listings for named servers ${normal}: " max_sessions_per_named_host
					[[ $max_sessions_per_named_host =~ ^[0-9]+$ ]] || [[ "$max_sessions_per_named_host" == "" ]] || { echo; echo "Enter a valid number."; echo; continue; }
					if [[ "$max_sessions_per_named_host" = "" ]] || (( $max_sessions_per_named_host >= 0 && $max_sessions_per_named_host <= 9999)); then
						break
					else
						echo
						echo "${bold}${red}Invalid number selection, try again.${normal}"
						echo
					fi
				done
				echo
				if [ "$max_sessions_per_named_host" = "" ]; then
					max_sessions_per_named_host="0"
					max_sessions_per_named_host_toggle="# maxSessionsPerNamedHost"
					echo "${bold}${cyan}Left blank, named servers not allowed to list.${normal}"
				else
					max_sessions_per_named_host_toggle="maxSessionsPerNamedHost"
					echo "${bold}${cyan}Selected:${normal} $max_sessions_per_named_host"
				fi
				# sudo sed -i '\!^max_sessions_per_named_host =!{h;s!=.*!= '"$max_sessions_per_named_host"'!};${x;\!^$!{s!!max_sessions_per_named_host = '"$max_sessions_per_named_host"'!;H};x}' $drawpile_configuration_values_file
				# sudo sed -i '\!^max_sessions_per_named_host_toggle =!{h;s!=.*!= '"$max_sessions_per_named_host_toggle"'!};${x;\!^$!{s!!max_sessions_per_named_host_toggle = '"$max_sessions_per_named_host_toggle"'!;H};x}' $drawpile_configuration_values_file
			else
				echo "This message should not be visible."
			fi
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		if [[ "$list_server_database_connection_string_num" == "1" ]]; then
			echo "${bold}${cyan} Configured in read only mode, skipping setting for server listing limitation. ${normal} "
			trusted_list_hosts_toggle="# trustedHosts"
		else
			if [[ "$list_server_config_read_values_completed" == "yes" && "$list_server_config_read_values_completed_02" == "yes" ]]; then
				# This is because I recorded some list server values and not others. To ensure all are recorded, this test must pass to check previously stored data.
				variable_to_read_1=trusted_list_hosts
				variable_to_read_2=trusted_list_hosts_toggle
				variable_to_read_3=""

				value_description_1="${bold}${yellow}Optional setting:${normal} Configure servers which are exempt from listing limitations"
				value_description_2=" "
				value_description_3="If first value indicates 'disabled' and the value of query 2 states"
				value_description_4=" '# trustedHosts', no servers are configured for listing limitations"
				value_description_5=""

				read_stored_config_value_query_function
			else
				maybe_use_config_value=n
			fi
			if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
				echo "Storing value and moving on."
				trusted_list_hosts=$read_stored_config_value_query_1
				trusted_list_hosts_toggle=$read_stored_config_value_query_2
			elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
				echo "${bold}${yellow}Setting 9 of 11${normal}"
				echo
				echo "${bold}${yellow}Optional setting:${normal} Configure servers which are exempt from listing limitations"
				echo
				echo "For example:"
				echo "     \"pub.drawpile.net\", \"example.hostwebsite.com\" "
				echo
				echo "Leaving it blank will assume you do not wish to exempt any servers."
				echo
				echo
				while :; do
					read -r -p "${bold}${cyan} Enter list servers you wish to exempt from listing limitations ${normal}: " trusted_list_hosts 
					echo
					if [[ "$trusted_list_hosts" = "" ]]; then
						trusted_list_hosts_toggle="# trustedHosts"
						trusted_list_hosts="disabled"
						echo "${bold}${cyan}Left blank, no external servers will be exempt.${normal}"
						break
					elif echo "$trusted_list_hosts" | perl -0777 -ne 'exit(/\A\s*(?:"[^"]*"\s*(?:,\s*"[^"]*")*\s*)?\z/ ? 0 : 1)'; then
						trusted_list_hosts_toggle="trustedHosts"
						echo "${bold}${cyan}Selected:${normal} $trusted_list_hosts"
						break
					else
						echo "${bold}${red}Invalid formatting. Try again${normal}"
						echo
						echo '--------------------------------------------------------------------------------'
						echo
					fi
				done
				# sudo sed -i '\!^trusted_list_hosts =!{h;s!=.*!= '"$trusted_list_hosts"'!};${x;\!^$!{s!!trusted_list_hosts = '"$trusted_list_hosts"'!;H};x}' $drawpile_configuration_values_file
				# sudo sed -i '\!^trusted_list_hosts_toggle =!{h;s!=.*!= '"$trusted_list_hosts_toggle"'!};${x;\!^$!{s!!trusted_list_hosts_toggle = '"$trusted_list_hosts_toggle"'!;H};x}' $drawpile_configuration_values_file
			else
				echo "This message should not be visible."
			fi
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		if [[ "$list_server_database_connection_string_num" == "1" ]]; then
			echo "${bold}${cyan} Configured in read only mode, skipping setting for servers banned from listing. ${normal} "
			list_server_banned_hosts_toggle="# bannedHosts"
		else
			if [[ "$list_server_config_read_values_completed" == "yes" && "$list_server_config_read_values_completed_02" == "yes" ]]; then
				# This is because I recorded some list server values and not others. To ensure all are recorded, this test must pass to check previously stored data.
				variable_to_read_1=banned_list_hosts
				variable_to_read_2=list_server_banned_hosts_toggle
				variable_to_read_3=""

				value_description_1="${bold}${yellow}Optional setting:${normal} Configure servers that are banned from listing sessions"
				value_description_2=" "
				value_description_3="If first value indicates 'disabled' and the value of query 2 states "
				value_description_4=" '# bannedHosts', no servers are configured to be banned from listing"
				value_description_5=" limitations."

				read_stored_config_value_query_function
			else
				maybe_use_config_value=n
			fi			
			if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
				echo "Storing value and moving on."
				banned_list_hosts=$read_stored_config_value_query_1
				list_server_banned_hosts_toggle=$read_stored_config_value_query_2
			elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
				echo "${bold}${yellow}Setting 10 of 11${normal}"
				echo
				echo "${bold}${yellow}Optional setting:${normal} Configure servers that are banned from listing sessions"
				echo
				echo "For example (Not real servers):"
				echo "     \"trollserver.example.com\", \"drawpile.4chan.com\" "
				echo
				echo "Leaving it blank will assume you do not wish to block any servers from listing."
				echo
				while :; do
					read -r -p "${bold}${cyan} Enter list servers you wish to ban from listing limitations ${normal}: " banned_list_hosts
					echo
					if [[ "$banned_list_hosts" = "" ]]; then
						list_server_banned_hosts_toggle="# bannedHosts"
						banned_list_hosts="disabled"
						echo "${bold}${cyan}Left blank, no external servers banned from listing limitations.${normal}"
						break
					elif echo "$banned_list_hosts" | perl -0777 -ne 'exit(/\A\s*(?:"[^"]*"\s*(?:,\s*"[^"]*")*\s*)?\z/ ? 0 : 1)'; then
						list_server_banned_hosts_toggle="bannedHosts"
						echo "${bold}${cyan}Selected:${normal} $banned_list_hosts"
						break
					else
						echo "${bold}${red}Invalid formatting. Try again${normal}"
						echo
						echo '--------------------------------------------------------------------------------'
						echo
					fi
				done
				# sudo sed -i '\!^banned_list_hosts =!{h;s!=.*!= '"$banned_list_hosts"'!};${x;\!^$!{s!!banned_list_hosts = '"$banned_list_hosts"'!;H};x}' $drawpile_configuration_values_file
				# sudo sed -i '\!^list_server_banned_hosts_toggle =!{h;s!=.*!= '"$list_server_banned_hosts_toggle"'!};${x;\!^$!{s!!list_server_banned_hosts_toggle = '"$list_server_banned_hosts_toggle"'!;H};x}' $drawpile_configuration_values_file
			else
				echo "This message should not be visible."
			fi
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		if [[ "$list_server_database_connection_string_num" == "1" ]]; then
			echo "${bold}${cyan} Configured in read only mode, skipping setting for minutes passed before ${normal}"
			echo "${bold}${cyan}  session de-listed and use default. ${normal}"
			list_server_delist_time="10"
		else
			if [[ "$list_server_config_read_values_completed" == "yes" && "$list_server_config_read_values_completed_02" == "yes" ]]; then
				# This is because I recorded some list server values and not others. To ensure all are recorded, this test must pass to check previously stored data.
				variable_to_read_1=list_server_delist_time
				variable_to_read_2=""
				variable_to_read_3=""

				value_description_1="Number of minutes after which a session is automatically de-listed unless refreshed"
				value_description_2="A good example is that a server went offline due to loss of power or internet connection. Or that all"
				value_description_3="users left the session and it closed. Do not select a value under 10 minutes!"
				value_description_4=""
				value_description_5=""

				read_stored_config_value_query_function
			else
				maybe_use_config_value=n
			fi				
			if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
				echo "Storing value and moving on."
				list_server_delist_time=$read_stored_config_value_query_1
			elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
				echo "${bold}${yellow}Setting 11 of 11${normal}"
				echo
				echo "${bold}${yellow}Optional setting:${normal} Number of minutes after which a session is automatically de-listed unless refreshed"
				echo "A good example is that a server went offline due to loss of power or internet connection. Or that all"
				echo "users left the session and it closed. Do not select a value under 10 minutes!"
				echo
				echo "For example: 10"
				echo
				echo "Leaving it blank will assume default value of 10 minutes"
				echo
				echo "${bold}${yellow}Note: ${normal}"
				echo "The value can be set to 2 minutes (but not lower), however, drawpile-srv updates the list server every"
				echo "10 minutes. Which means this value should not be under 10, as it will cause issues with people listing"
				echo "sessions on the server that keep disappearing and re-appearing."
				echo
				while :; do
					read -r -p "${bold}${cyan} Enter minutes after which session is automatically de-listed ${normal}: " list_server_delist_time
					echo
					[[ "$list_server_delist_time" = "" || $list_server_delist_time =~ ^[0-9]+$ ]] || { echo "Enter a valid number, 10 or above."; echo; echo '--------------------------------------------------------------------------------'; echo; continue; }
					if [ "$list_server_delist_time" = "" ]; then
						echo "${bold}${cyan}Left blank, assuming default time of 10 minutes.${normal}"
						list_server_delist_time="10"
						break
					elif (( $list_server_delist_time >= 10 && $list_server_delist_time <= 1440 )); then
						echo "${bold}${cyan}Selected:${normal} $list_server_delist_time"
						break
					else
						echo
						echo "Invalid number selection, try again. Selecting a value under 10 minutes"
						echo "will result in list server issues."
						echo
						echo '--------------------------------------------------------------------------------'
						echo
					fi
				done
				# sudo sed -i '\!^list_server_delist_time =!{h;s!=.*!= '"$list_server_delist_time"'!};${x;\!^$!{s!!list_server_delist_time = '"$list_server_delist_time"'!;H};x}' $drawpile_configuration_values_file
			else
				echo "This message should not be visible."
			fi
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${cyan}***** Creating List Server Configuration . . . *****${normal}"
		echo
		echo "No messages should show up in this section."
		echo		
		# --------------------------------------------------------------------------------
		sudo sed -i '\!^list_server_database_connection_string_num =!{h;s!=.*!= '"$list_server_database_connection_string_num"'!};${x;\!^$!{s!!list_server_database_connection_string_num = '"$list_server_database_connection_string_num"'!;H};x}' $drawpile_configuration_values_file
		sudo sed -i '\!^listserver_database_connection_string =!{h;s!=.*!= '"$listserver_database_connection_string"'!};${x;\!^$!{s!!listserver_database_connection_string = '"$listserver_database_connection_string"'!;H};x}' $drawpile_configuration_values_file
		# --------------------------------------------------------------------------------
		sudo sed -i '\!^list_server_favicon_location_entry =!{h;s!=.*!= '"$list_server_favicon_location_entry"'!};${x;\!^$!{s!!list_server_favicon_location_entry = '"$list_server_favicon_location_entry"'!;H};x}' $drawpile_configuration_values_file
		sudo sed -i '\!^list_server_favicon_toggle =!{h;s!=.*!= '"$list_server_favicon_toggle"'!};${x;\!^$!{s!!list_server_favicon_toggle = '"$list_server_favicon_toggle"'!;H};x}' $drawpile_configuration_values_file
		sudo sed -i '\!^list_server_favicon_location =!{h;s!=.*!= '"$list_server_favicon_location"'!};${x;\!^$!{s!!list_server_favicon_location = '"$list_server_favicon_location"'!;H};x}' $drawpile_configuration_values_file
		# --------------------------------------------------------------------------------
		# sudo sed -i '\!^list_server_description =!{h;s!=.*!= '"$list_server_description"'!};${x;\!^$!{s!!list_server_description = '"$list_server_description"'!;H};x}' $drawpile_configuration_values_file
		sudo sed -i '\|^list_server_description =|{h;s|=.*|= '"$list_server_description"'|};${x;\|^$|{s||list_server_description = '"$list_server_welcome_msg"'|;H};x}' $drawpile_configuration_values_file
		# --------------------------------------------------------------------------------
		# Enter a welcome message for listing the session
		# sudo sed -i '\!^list_server_welcome_msg =!{h;s!=.*!= '"$list_server_welcome_msg"'!};${x;\!^$!{s!!list_server_welcome_msg = '"$list_server_welcome_msg"'!;H};x}' $drawpile_configuration_values_file
		sudo sed -i '\|^list_server_welcome_msg =|{h;s|=.*|= '"$list_server_welcome_msg"'|};${x;\|^$|{s||list_server_welcome_msg = '"$list_server_welcome_msg"'|;H};x}' $drawpile_configuration_values_file
		# --------------------------------------------------------------------------------
		# Configure not safe for work auto-flag sessions.
		sudo sed -i '\!^list_server_nsfm_words_list =!{h;s!=.*!= '"$list_server_nsfm_words_list"'!};${x;\!^$!{s!!list_server_nsfm_words_list = '"$list_server_nsfm_words_list"'!;H};x}' $drawpile_configuration_values_file
		# --------------------------------------------------------------------------------
		if [[ "$list_server_database_connection_string_num" != "1" ]]; then
			# If list_server_database_connection_string_num = 1, skip settings because these wouldn't be recorded/entered by user. 
			# If list_server_database_connection_string_num != 1, record manually entered settings.
			# --------------------------------------------------------------------------------
			# Configure the max number of listings for other unspecified servers.
			sudo sed -i '\!^list_server_max_sessions_per_host =!{h;s!=.*!= '"$list_server_max_sessions_per_host"'!};${x;\!^$!{s!!list_server_max_sessions_per_host = '"$list_server_max_sessions_per_host"'!;H};x}' $drawpile_configuration_values_file
			sudo sed -i '\!^list_server_max_sessions_per_host_toggle =!{h;s!=.*!= '"$list_server_max_sessions_per_host_toggle"'!};${x;\!^$!{s!!list_server_max_sessions_per_host_toggle = '"$list_server_max_sessions_per_host_toggle"'!;H};x}' $drawpile_configuration_values_file
			# --------------------------------------------------------------------------------
			# Configure the max number of listings for other named servers.
			sudo sed -i '\!^max_sessions_per_named_host =!{h;s!=.*!= '"$max_sessions_per_named_host"'!};${x;\!^$!{s!!max_sessions_per_named_host = '"$max_sessions_per_named_host"'!;H};x}' $drawpile_configuration_values_file
			sudo sed -i '\!^max_sessions_per_named_host_toggle =!{h;s!=.*!= '"$max_sessions_per_named_host_toggle"'!};${x;\!^$!{s!!max_sessions_per_named_host_toggle = '"$max_sessions_per_named_host_toggle"'!;H};x}' $drawpile_configuration_values_file
			# --------------------------------------------------------------------------------
			# Configure servers which are exempt from listing limitations
			sudo sed -i '\!^trusted_list_hosts =!{h;s!=.*!= '"$trusted_list_hosts"'!};${x;\!^$!{s!!trusted_list_hosts = '"$trusted_list_hosts"'!;H};x}' $drawpile_configuration_values_file
			sudo sed -i '\!^trusted_list_hosts_toggle =!{h;s!=.*!= '"$trusted_list_hosts_toggle"'!};${x;\!^$!{s!!trusted_list_hosts_toggle = '"$trusted_list_hosts_toggle"'!;H};x}' $drawpile_configuration_values_file
			# --------------------------------------------------------------------------------
			# Configure servers that are banned from listing sessions
			sudo sed -i '\!^banned_list_hosts =!{h;s!=.*!= '"$banned_list_hosts"'!};${x;\!^$!{s!!banned_list_hosts = '"$banned_list_hosts"'!;H};x}' $drawpile_configuration_values_file
			sudo sed -i '\!^list_server_banned_hosts_toggle =!{h;s!=.*!= '"$list_server_banned_hosts_toggle"'!};${x;\!^$!{s!!list_server_banned_hosts_toggle = '"$list_server_banned_hosts_toggle"'!;H};x}' $drawpile_configuration_values_file
			# --------------------------------------------------------------------------------
			# Number of minutes after which a session is automatically de-listed unless refreshed
			sudo sed -i '\!^list_server_delist_time =!{h;s!=.*!= '"$list_server_delist_time"'!};${x;\!^$!{s!!list_server_delist_time = '"$list_server_delist_time"'!;H};x}' $drawpile_configuration_values_file
		fi
		# --------------------------------------------------------------------------------
		# --------------------------------------------------------------------------------
		sudo sed -i '\!^list_server_config_read_values_completed =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!list_server_config_read_values_completed = '"yes"'!;H};x}' $drawpile_configuration_values_file
		sudo sed -i '\!^list_server_config_read_values_completed_02 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!list_server_config_read_values_completed_02 = '"yes"'!;H};x}' $drawpile_configuration_values_file
		# --------------------------------------------------------------------------------
		# --------------------------------------------------------------------------------
		list_server_include_servers_username_and_pass="includeservers=[\"http://$nginx_username_encoded_1:$nginx_htpasswd_encoded_1@localhost:27780/api/\"]"
		# list_server_include_servers_username_and_pass="$nginx_username_1:$nginx_htpasswd_1"

		# Example configuration file, TOML format ( https://toml.io/en/ )
		# https://github.com/drawpile/listserver/blob/master/example.cfg
		cat <<EOF | sudo tee "$script_directory/$list_server_config_filename" >/dev/null
# This is a sample List Server settings file.
# When creating your own site specific configuration,
# set at least the settings in the "important" section.

#### Important settings #####

# HTTP server listening address port
# listen = "127.0.0.1:8080"
listen = "$list_server_address_listen:$list_server_port"

# The database connection string
# Possible values:
# "none"     - listserver will be in read-only mode (includeservers must be set)
# "memory"   - sessions will be lost if server is restarted, but no database needed
# "filename" - keep sessions in a SQLite database
# database="demo.db"
database="$listserver_database_connection_string"

# Include sessions fetched from a drawpile server's admin API (optional)
# includeservers=["http://username:password@localhost:27780/api/"]
$list_server_include_servers_username_and_pass

# How long to cache responses from the included servers above, in seconds.
includecachettl=30

# How long to cache the hostname and port of the included servers above, in
# seconds. Should be a pretty large value, since that stuff virtually never
# changes. Won't have an effect if includecachettl is zero or greater than this.
includestatuscachettl=86400

# Timeout for requests to the included servers above, in seconds.
includetimeout=10

#
# Note. You should set at least one of database or includeserver settings.
# Otherwise, listserver will do nothing.
#

# The short name of this server (shown in the selection dropdown box)
# name="demo server"
name="$list_server_short_name"

# A longer description of this server
# description="this is a demo listing server"
description="$list_server_description"

# Set this if you're using a reverse proxy like nginx or apache
proxyheaders = true

##### Optional settings #####

# By default, all origins are allowed to fetch the session list.
# Setting this to an empty list disallows all cross-origin requests.
# If you want to limit this, you may want to at least allow "drawpile.net"
# so the session list can be shown on the community page.
# alloworigins=[]

# URL of an icon that will be shown next to the server name
# favicon = ""
$list_server_favicon_toggle = $list_server_favicon_location

# A message that is sent to the users of the session that was just announced
# welcome = "this session was just announced at the demo list server!"
welcome = "$list_server_welcome_msg"

# Any of these words in the title autotags the session as NSFM
# nsfmWords = [ "NSFW", "18+", "NSFM" ]
nsfmWords = [ $list_server_nsfm_words_list ]

# Allow listed servers using ports < 1024
allowWellKnownPorts = false

# Allow only these protocol version to be listed
# https://docs.drawpile.net/help/development/versioncompatibility
# Protocol	Version of Drawpile
# 4.24.0	2.2 to ???
# 4.21.2	2.1 to 2.1.20
# 4.20.1	2.0 to 2.0.11
# 15.6		1.0 to 1.6
# protocolWhiteList = [ "dp:4.20.1", "dp:4.21.2", "dp:4.24.0" ]

# Allow only this many active listings per host address
# maxSessionsPerHost = 3
$list_server_max_sessions_per_host_toggle = $list_server_max_sessions_per_host

# Allow this many active listings per named host address (this is never less than maxSessionsPerNamedHost)
# maxSessionsPerNamedHost = 10
$max_sessions_per_named_host_toggle = $max_sessions_per_named_host

# Trusted hosts are exempt from limits and bans
# trustedHosts = [ "drawpile.net" ]
$trusted_list_hosts_toggle = [ $trusted_list_hosts ]

# Banned hosts can't list here at all
# bannedHosts = [ "trolls.example.com" ]
$list_server_banned_hosts_toggle = [ $banned_list_hosts ]

# Notify users if their host address is an IPv6 address
# This is not necessarily a bad thing, but many people
# still don't have IPv6 capable Internet connections.
# warnIpv6 = true
warnIpv6 = true

# Allow public session listings 
# Notes -- It doesn't show the server if public listings is off. So that means list servers have to turn that always on to be compatible.
#          Used for room codes kinda thing, the client won't show that room list if set to false.
public = true

# Enable room code generation (private sessions)
# roomcodes = true

# Check that there really is a Drawpile server at the announced address
checkServer = true

# Number of minutes after which a session is automatically delisted unless refreshed
# sessionTimeout = 10
sessionTimeout = $list_server_delist_time

# Number of seconds to wait while connections are still open before shutting down
# Used for testing the list server for development reasons, not needed. 
# shutdownTimeout = 1

# Log requests?
logRequests = false

# Enable administration API?
# Set the environment variable DRAWPILE_LISTSERVER_USER to the username and
# DRAWPILE_LISTSERVER_PASS to the password to allow connecting as an admin user.
# You can create additional accounts from there.
# Not available in read-only mode, there's nothing to administer in it.
enableAdminApi = true
EOF

		sudo mv "$script_directory/$list_server_config_filename" "$list_server_config_file_location"
	}
	# --------------------------------------------------------------------------------
	# --------------------------------------------------------------------------------

	if [[ -e  "$list_server_config_file_location" ]]; then
		list_server_config_read_values_completed=$( grep -m 1 "list_server_config_read_values_completed = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
		wait $!
		if [ -z "$list_server_config_read_values_completed" ] || [ "$list_server_config_read_values_completed" = "=" ]; then
			list_server_config_read_values_completed="no"
		fi
		
		list_server_config_read_values_completed_02=$( grep -m 1 "list_server_config_read_values_completed_02 = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
		wait $!
		if [ -z "$list_server_config_read_values_completed_02" ] || [ "$list_server_config_read_values_completed_02" = "=" ]; then
			list_server_config_read_values_completed_02="no"
		fi
		
		
		function regenerate_list_server_config_entry_function () {
			while :; do
				read -r -p "${bold}${cyan}Enter a number and hit enter to continue:${normal} " list_server_config
				echo
				if [ "$list_server_config" == "1" ] || [ "$list_server_config" == "2" ]; then
					break
				else
					echo
					echo "${bold}${red}Invalid input selection, try again.${normal}"
					echo
					echo ----------------------------------------------------------------------------------
					echo
				fi
			done
		}
		
		echo "${bold}${cyan}*****List server configuration file exists . . . *****${normal}"
		echo
		echo 'You should regenerate the configuration if you set up a'
		echo 'different username or password for web admin.'
		echo
		if [[ "$list_server_config_read_values_completed" == "yes" && "$list_server_config_read_values_completed_02" == "yes" && "$nginx_username_and_password_reuse" != "2" ]]; then
			# Choose to change or update it, no problems detected.
			echo "Press 1 to use this existing configuration"
			echo "Press 2 to re-generate configuration for List Server"
		elif [[ "$list_server_config_read_values_completed" == "yes" && "$list_server_config_read_values_completed_02" == "yes" && "$nginx_username_and_password_reuse" == "2" ]]; then
			# Change it because otherwise the includeservers value will not work and auto-list sessions.
			echo "Press 1 to use this existing configuration"
			echo "Press 2 to re-generate configuration for List Server ${bold}${cyan}(Recommended)${normal}"
			echo "     ${bold}${cyan}Note:${normal} List server won't include sessions if not updated."
		elif [[ "$list_server_config_read_values_completed" == "no" || "$list_server_config_read_values_completed_02" == "no" ]]; then
			# Assume not completed, regenerating list server config is highly recommended. 
			echo "Press 1 to use this existing configuration"
			echo "Press 2 to re-generate configuration for List Server ${bold}${cyan}(Recommended)${normal}"
			echo "     ${bold}${cyan}Note:${normal} This is because list server may not be working properly,"
			echo "           since some of it was done incorrectly in error."
		else
			echo "Press 1 to use this existing configuration"
			echo "Press 2 to re-generate configuration for List Server"
		fi
		echo
		if [[ "$list_server_config_read_values_completed" == "yes" && "$list_server_config_read_values_completed_02" == "yes" && "$nginx_username_and_password_reuse" != "2" ]]; then
			# Choose to change or update it, no problems detected.
			regenerate_list_server_config_entry_function
		elif [[ "$list_server_config_read_values_completed" == "yes" && "$list_server_config_read_values_completed_02" == "yes" && "$nginx_username_and_password_reuse" == "2" ]]; then
			# Change it because otherwise the includeservers value will not work and auto-list sessions.
			echo "${bold}${red}Change is required to ensure the ListServer works as intended.${normal}"
			echo
			list_server_config=2
		elif [[ "$list_server_config_read_values_completed" == "no" || "$list_server_config_read_values_completed_02" == "no" ]]; then
			# Assume not completed, regenerating list server config is highly recommended. 
			echo "${bold}${red}Change is required to ensure the ListServer works as intended.${normal}"
			echo
			list_server_config=2
		else
			regenerate_list_server_config_entry_function
		fi
		
		
		if [ "$list_server_config" == "1" ]; then
			echo "List server configuration file exists, skipping . . ."
			
			list_server_favicon_location_entry=$( grep -m 1 "list_server_favicon_location_entry = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
			if [ -z "$list_server_favicon_location_entry" ] || [ "$list_server_favicon_location_entry" = "=" ]; then
				list_server_favicon_location_entry=""
			fi
		elif [ "$list_server_config" == "2" ]; then
			echo
			echo 'Before removing the configuration file, would you like to view'
			echo 'the content of the file? This is a fairly large document to read.'
			echo
			echo 'Press 1 for yes'
			echo 'Press 2 for no'
			echo
			while :; do
				read -r -p "${bold}${cyan}Enter 1 or 2 to continue:${normal} " list_server_config_contents
				echo
				if [ "$list_server_config_contents" == "1" ] || [ "$list_server_config_contents" == "2" ]; then
					break
				else
					echo
					echo "${bold}${red}Invalid input selection, try again.${normal}"
					echo
					echo ----------------------------------------------------------------------------------
					echo
				fi
			done
			
			if [ "$list_server_config_contents" == "1" ]; then
				echo Reading contents of "$list_server_config_file_location"
				echo
				sudo cat "$list_server_config_file_location"
			elif [ "$list_server_config_contents" == "2" ]; then
				echo Not reading file contents in Bash Terminal. Removing file.
			else
				echo Invalid option selected.
				echo Not reading file contents in Bash Terminal. Removing file.
			fi
			echo
			sudo systemctl stop --now drawpile-listserver.service
			wait $!
			sudo rm -r -f "$list_server_config_file_location"
			generate_list_server_config_filename
			sudo systemctl start --now drawpile-listserver.service
			wait $!
		else
			echo Invalid option selected.
			echo List server configuration file exists, skipping . . .
		fi
	else
		list_server_config_read_values_completed="no"
		generate_list_server_config_filename
	fi
	
	list_server_database_connection_string_num=$( grep -m 1 "list_server_database_connection_string_num = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
	listserver_database_connection_string=$( grep -m 1 "listserver_database_connection_string = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
		
<<comment_EOF_delete
	if [[ ( -z "$list_server_database_connection_string_num" || "$list_server_database_connection_string_num" = "=" ) || ( -z "$listserver_database_connection_string" || "$listserver_database_connection_string" = "=" ) ]]; then
		# echo 
		# echo "list_server_database_connection_string_num = $list_server_database_connection_string_num <-- Blah"
		# echo "listserver_database_connection_string      = $listserver_database_connection_string <-- Blah"
		# echo
		# echo "Variables 'list_server_database_connection_string_num' and/or 'listserver_database_connection_string'"
		# echo "are null or the '=' sign. Reading from file to make sure data is populated."
		echo
		echo "${invis}This message is here to validate if it works. No action needed.${normal}"
		list_server_database_connection_string_num=$( grep -m 1 "list_server_database_connection_string_num = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
		listserver_database_connection_string=$( grep -m 1 "listserver_database_connection_string = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
		echo 
		echo "${invis}list_server_database_connection_string_num = $list_server_database_connection_string_num ${normal}"
		echo "${invis}listserver_database_connection_string      = $listserver_database_connection_string ${normal}"
	fi
comment_EOF_delete
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Running SystemD configuration for List Server . . .*****${normal}"

	cat <<EOF | sudo tee /etc/systemd/system/drawpile-listserver.service >/dev/null
[Unit]
Description=Drawpile statistics proxy
After=network.target

[Service]
Environment="DRAWPILE_LISTSERVER_USER=$nginx_username_1"
Environment="DRAWPILE_LISTSERVER_PASS=$nginx_htpasswd_1"
ExecStart=/usr/local/bin/listserver -c $list_server_config_file_location
# ExecStart=$go_path_manual/bin/listserver -c $list_server_config_file_location
User=drawpileuser

[Install]
WantedBy=multi-user.target
EOF

	sudo systemctl enable --now drawpile-listserver.service
	wait $!
	echo
	echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
	echo
	echo "${bold}${cyan}*****Displaying Drawpile List Server Status . . .*****${normal}"
	echo
	systemctl status drawpile-listserver.service --no-pager -l
	wait $!
	echo
	pause
	echo
	echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'

	function favicon_copy_function () {
		if [[ -e  "$dp_install_loc/16.png" ]]; then
			sudo cp $dp_install_loc/16.png /var/www/html/drawpile/16.png
		elif [[ -e  "$script_directory/16.png" ]]; then
			sudo cp $script_directory/16.png /var/www/html/drawpile/16.png
		elif [[ -d "$list_server_favicon_location_entry/16.png" ]]; then
			sudo cp $list_server_favicon_location_entry/16.png /var/www/html/drawpile/16.png
		else
			favicon_instructions_function
			echo
			echo "Once ready with the file below, press any key to continue."
			echo '16x16      / 16.png'
			echo
			pause
			if [[ -e  "$dp_install_loc/16.png" ]]; then
				sudo cp $dp_install_loc/16.png /var/www/html/drawpile/16.png
			elif [[ -e  "$script_directory/16.png" ]]; then
				sudo cp $script_directory/16.png /var/www/html/drawpile/16.png
			elif [[ -d "$list_server_favicon_location_entry/16.png" ]]; then
				sudo cp "$list_server_favicon_location_entry/16.png" /var/www/html/drawpile/16.png
			else
				echo "Ok, fine, find out what happens when you don't read instructions."
				echo "Exiting script."
				pause
				exit
			fi
		fi
		if [[ -e  "$dp_install_loc/32.png" ]]; then
			sudo cp $dp_install_loc/32.png /var/www/html/drawpile/32.png
		elif [[ -e  "$script_directory/32.png" ]]; then
			sudo cp $script_directory/32.png /var/www/html/drawpile/32.png
		elif [[ -d "$list_server_favicon_location_entry/32.png" ]]; then
			sudo cp "$list_server_favicon_location_entry/32.png" /var/www/html/drawpile/32.png
		else
			favicon_instructions_function
			echo
			echo "Once ready with the file below, press any key to continue."
			echo '32x32      / 32.png'
			echo
			pause
			if [[ -e  "$dp_install_loc/32.png" ]]; then
				sudo cp $dp_install_loc/32.png /var/www/html/drawpile/32.png
			elif [[ -e  "$script_directory/32.png" ]]; then
				sudo cp $script_directory/32.png /var/www/html/drawpile/32.png
			elif [[ -d "$list_server_favicon_location_entry/32.png" ]]; then
				sudo cp "$list_server_favicon_location_entry/32.png" /var/www/html/drawpile/32.png
			else
				echo "Ok, fine, find out what happens when you don't read instructions."
				echo "Exiting script."
				pause
				exit
			fi
		fi
		if [[ -e  "$dp_install_loc/48.png" ]]; then
			sudo cp $dp_install_loc/48.png /var/www/html/drawpile/48.png
		elif [[ -e  "$script_directory/48.png" ]]; then
			sudo cp $script_directory/48.png /var/www/html/drawpile/48.png
		elif [[ -d "$list_server_favicon_location_entry/48.png" ]]; then
				sudo cp "$list_server_favicon_location_entry/48.png" /var/www/html/drawpile/48.png
		else
			favicon_instructions_function
			echo
			echo "Once ready with the file below, press any key to continue."
			echo '48x48      / 48.png'
			echo
			pause
			if [[ -e  "$dp_install_loc/48.png" ]]; then
				sudo cp $dp_install_loc/48.png /var/www/html/drawpile/48.png
			elif [[ -e  "$script_directory/48.png" ]]; then
				sudo cp $script_directory/48.png /var/www/html/drawpile/48.png
			elif [[ -d "$list_server_favicon_location_entry/48.png" ]]; then
				sudo cp "$list_server_favicon_location_entry/48.png" /var/www/html/drawpile/48.png
			else
				echo "Ok, fine, find out what happens when you don't read instructions."
				echo "Exiting script."
				pause
				exit
			fi
		fi
		if [[ -e  "$dp_install_loc/64.png" ]]; then
			sudo cp $dp_install_loc/64.png /var/www/html/drawpile/64.png
		elif [[ -e  "$script_directory/64.png" ]]; then
			sudo cp $script_directory/64.png /var/www/html/drawpile/64.png
		elif [[ -d "$list_server_favicon_location_entry/64.png" ]]; then
			sudo cp "$list_server_favicon_location_entry/64.png" /var/www/html/drawpile/64.png
		else
			favicon_instructions_function
			echo
			echo "Once ready with the file below, press any key to continue."
			echo '64x64      / 64.png'
			echo
			pause
			if [[ -e  "$dp_install_loc/64.png" ]]; then
				sudo cp $dp_install_loc/64.png /var/www/html/drawpile/64.png
			elif [[ -e  "$script_directory/64.png" ]]; then
				sudo cp $script_directory/64.png /var/www/html/drawpile/64.png
			elif [[ -d "$list_server_favicon_location_entry/64.png" ]]; then
				sudo cp "$list_server_favicon_location_entry/64.png" /var/www/html/drawpile/64.png
			else
				echo "Ok, fine, find out what happens when you don't read instructions."
				echo "Exiting script."
				pause
				exit
			fi
		fi
		if [[ -e  "$dp_install_loc/128.png" ]]; then
			sudo cp $dp_install_loc/128.png /var/www/html/drawpile/128.png
		elif [[ -e  "$script_directory/128.png" ]]; then
			sudo cp $script_directory/128.png /var/www/html/drawpile/128.png
		elif [[ -d "$list_server_favicon_location_entry/128.png" ]]; then
			sudo cp "$list_server_favicon_location_entry/128.png" /var/www/html/drawpile/128.png
		else
			favicon_instructions_function
			echo
			echo "Once ready with the file below, press any key to continue."
			echo '128x128    / 128.png (maximum size used by DP client)'
			echo
			pause
			if [[ -e  "$dp_install_loc/128.png" ]]; then
				sudo cp $dp_install_loc/128.png /var/www/html/drawpile/128.png
			elif [[ -e  "$script_directory/128.png" ]]; then
				sudo cp $script_directory/128.png /var/www/html/drawpile/128.png
			elif [[ -d "$list_server_favicon_location_entry/128.png" ]]; then
				sudo cp "$list_server_favicon_location_entry/128.png" /var/www/html/drawpile/128.png
			else
				echo "Ok, fine, find out what happens when you don't read instructions."
				echo "Exiting script."
				pause
				exit
			fi
		fi
		
		if [[ -e  "$dp_install_loc/favicon.ico" ]]; then
			sudo cp $dp_install_loc/favicon.ico /var/www/html/drawpile/favicon.ico
		elif [[ -e  "$script_directory/favicon.ico" ]]; then
			sudo cp $script_directory/favicon.ico /var/www/html/drawpile/favicon.ico
		elif [[ -d "$list_server_favicon_location_entry/favicon.ico" ]]; then
			sudo cp "$list_server_favicon_location_entry/favicon.ico" /var/www/html/drawpile/favicon.ico
		else
			echo "No favicon.ico file detected, skipping copying to web directory."
			# favicon_instructions_function
			# echo
			# echo "Once ready with the file below, press any key to continue."
			# echo '64x64      / favicon.ico'
			# echo
			# pause
			# if [[ -e  "$dp_install_loc/favicon.ico" ]]; then
			# 	sudo cp $dp_install_loc/favicon.ico /var/www/html/drawpile/favicon.ico
			# elif [[ -e  "$script_directory/favicon.ico" ]]; then
			# 	sudo cp $script_directory/favicon.ico /var/www/html/drawpile/favicon.ico
			# elif [[ -d "$list_server_favicon_location_entry/favicon.ico" ]]; then
			# 	sudo cp "$list_server_favicon_location_entry/favicon.ico" /var/www/html/drawpile/favicon.ico
			# else
			# 	echo "Ok, fine, find out what happens when you don't read instructions."
			# 	echo "Exiting script."
			# 	pause
			# 	exit
			# fi
		fi
		
		sudo chmod 754 /var/www/html/drawpile/16.png
		sudo chmod 754 /var/www/html/drawpile/32.png
		sudo chmod 754 /var/www/html/drawpile/48.png
		sudo chmod 754 /var/www/html/drawpile/64.png
		sudo chmod 754 /var/www/html/drawpile/128.png
	}
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Running NGINX Configuration for List Server . . .*****${normal}"
	echo
	function community_server_extra_rules_insertion_function () {
		# hostname=test.sofurrydrawpile.net
		if [[ $hostname == "dp.morrowshore.com" ]]; then
			community=valid
			community_slug=academy
			community_rules_page=https://drawpile.net/communities/academy/
		elif [[ $hostname == "ahaven.net" ]]; then
			community=valid
			community_slug=ahaven
			community_rules_page=https://drawpile.net/communities/ahaven/
		elif [[ $hostname == "cloudywave.net" ]]; then
			community=valid
			community_slug=cloudywave
			community_rules_page=https://drawpile.net/communities/cloudywave/
		elif [[ $hostname == "list.dp.foxdice.cn" || $hostname == "bj.dp.foxdice.cn" || $hostname == "bj2.dp.foxdice.cn" || $hostname == "gz.dp.foxdice.cn" || $hostname == "osa.dp.foxdice.cn" || $hostname == "hk.dp.foxdice.cn" ]]; then
			community=valid
			community_slug=foxdice
			community_rules_page=https://drawpile.net/communities/foxdice/
		elif [[ $hostname = "serber.us" ]]; then
			community=valid
			community_slug=serberus
			community_rules_page=https://drawpile.net/communities/serberus/
		elif [[ $hostname = "sofurrydrawpile.net" ]]; then
			community=valid
			community_slug=SoFurryDrawpile
			community_rules_page=https://drawpile.net/communities/SoFurryDrawpile/
		# elif [[ $hostname = "test.sofurrydrawpile.net" ]]; then
		#  	community=valid
		#  	community_slug=drawpile
		#  	community_rules_page=https://drawpile.net/communities/drawpile/
		elif [[ $hostname = "dp.sugarandspice.art" ]]; then
			community=valid
			community_slug=sugar-and-spice
			community_rules_page=https://drawpile.net/communities/sugar-and-spice/
		elif [[ $hostname = ".net" ]]; then
			community=valid
			community_slug=syntheticdreams.net
			community_rules_page=https://drawpile.net/communities/synth/
		else
			community=invalid
			# echo "${bold}${yellow}Not a community server, skipping extra rules setup part 1.${normal}"
		fi
		# --------------------------------------------------------------------------------
		if [[ $community == "valid" ]]; then
			echo "${bold}${yellow}Is a community server, configuring list web page with extra rules...${normal}"
			sudo sed -i -e "s/<p>Sessions hosted (or just listed) here should abide by the <a href=\"https:\/\/drawpile.net\/communities\/drawpile.net\/ccg\/\">common community guidelines<\/a>.<\/p>/<p>Sessions hosted (or just listed) here should abide by the <a href=\"https:\/\/drawpile.net\/communities\/drawpile.net\/ccg\/\">common community guidelines<\/a>.<\/p>\n\n<p>Also, this server has <a href=\"https:\/\/drawpile.net\/communities\/$community_slug\/\">additional rules that can be found here<\/a>.<\/p>/g" /var/www/html/drawpile/index.html
			nginx -s reload
			echo
		elif [[ $community == "invalid" ]]; then
			# echo "${bold}${yellow}Not a community server, skipping extra rules setup part 2.${normal}"
			# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
			:
		else
			echo "${bold}${red}This message should not be visible for community or non community status.${normal}"
			echo
		fi
	}
	
	if [ "$ssl_encryption_config" == "1" ]; then
		# echo 'Press 1 for Self Signed Certificates'
		
		# LISTEVER CONFIG - NEED TO CHANGE FAVICON FROM HTTPS TO HTTP

		sudo mkdir -p /var/www/html/drawpile && cd "$_"
		curl -s -L https://github.com/drawpile/dpserver/tarball/master | sudo tar xz --strip-components 2 --wildcards "*/public_html"
		# sudo mv /var/www/html/drawpile/js/SessionList.js /var/www/html/drawpile/js/SessionList_old.js
		# sudo wget -q --show-progress https://raw.githubusercontent.com/drawpile/website/master/static/js/SessionList.js -O /var/www/html/drawpile/js/SessionList.js
		
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${cyan}*****Editing index.html file for list server . . . *****${normal}"
		echo
		# --------------------------------------------------------------------------------
		# This section below set to modify List server page with server specific information.
		sudo sed -i -e "s/<title>Drawpile Public Community<\/title>/<title>$hostname Server<\/title>/g" /var/www/html/drawpile/index.html
		# sudo sed -i -e 's/<title>Drawpile Public Community<\/title>/<title>example.hostwebsite.com Community Server<\/title>/g' /var/www/html/drawpile/index.html

		sudo sed -i -e "s/https:\/\/__DOMAIN__\/listing\//http:\/\/$hostname\/listing\//g" /var/www/html/drawpile/index.html
		# sudo sed -i -e 's/https:\/\/__DOMAIN__\/listing\//http:\/\/example.hostwebsite.com\/listing\//g' /home/pi/Public/index.html
		
		sudo sed -i -e "s/<a href=\"https:\/\/drawpile.net\/help\/hosting\/\">/<a href=\"https:\/\/docs.drawpile.net\/help\/common\/hosting\">/g" /var/www/html/drawpile/index.html
		
		sudo sed -i -e "s/<code>pub.drawpile.net<\/code>/<code>$hostname<\/code>/g" /var/www/html/drawpile/index.html
		
		# sudo sed -i -e 's/<code>pub.drawpile.net<\/code> /<code>example.hostwebsite.com<\/code>/g' /var/www/html/drawpile/index.html
		
		if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]]; then
			sudo sed -i -e "s/try not to monopolize the available space./try not to monopolize the available space. To connect to a session via the web, you must first manually install the certificate from the server (which is good for 1 year). Once installed, <a href=\"https:\/\/web.drawpile.net\/?host=$hostname\" target=\"web-client\">click here to load the web client from the official Drawpile website.<\/a> If you don't want to draw with anyone else online, <a href=\"https:\/\/web.drawpile.net\" target=\"web-client\">click here to load the web client in stand alone mode from the official Drawpile website.<\/a>/g" /var/www/html/drawpile/index.html
			
			# sudo sed -i -e "s/try not to monopolize the available space./try not to monopolize the available space. To connect to a session via the web, <a href=\"https:\/\/web.drawpile.net\/?host=pub.drawpile.net\" target=\"web-client\">click here to load the web client from the official Drawpile website.<\/a>/g" /var/www/html/drawpile/index.html
			
			# sudo sed -i -e "s/common community guidelines<\/a>.<\/p>/common community guidelines<\/a>.<\/p>\n\n<p>To install a cert in Chrome, click the 'Not Secure' message in the address bar, click 'Certificate is not valid', go to 'Details', and select 'Export...'. Once you have saved it to your computer, go to your browser menu in the upper right, go to 'Settings' and search for 'Certificates'. You should find something called 'Manage Certificates - Manage HTTPS\/SSL certificates and settings', select that, click 'Import...', 'Next', and 'Browse...'. Navigate to your file you downloaded earlier (note that you may have to change the drop down type to 'All Files(\*.\*)'), leave it on the default option 'Place all certificates in the following store' which should be 'Personal'. Click 'Next' and then 'Finish', close those windows and the settings tab. You should be able to use the web version of Drawpile now on this server.<\/p>/g" /var/www/html/drawpile/index.html

			sudo sed -i -e "s/common community guidelines<\/a>.<\/p>/common community guidelines<\/a>.<\/p>\n\n<details>\n<summary>\nInstall Certificate for Windows Edge\/CCleaner Browser\/Chrome\n  <\/summary>\n<p>To install a cert in Chrome, first make sure that you are on this web page ( <a href=\"https:\/\/$hostname\" target=\"web-client\">https:\/\/$hostname<\/a> ) and then click the 'Not Secure' message in the address bar, click 'Certificate is not valid', go to 'Details', and select 'Export...'. Once you have saved it to your computer, go to your browser menu in the upper right, go to 'Settings' and search for 'Certificates'. You should find something called 'Manage Certificates - Manage HTTPS\/SSL certificates and settings', select that, click 'Import...', 'Next', and 'Browse...'. Navigate to your file you downloaded earlier (note that you may have to change the drop down type to 'All Files (\*.\*)'), leave it on the default option 'Place all certificates in the following store' which should be 'Personal'. Click 'Next' and then 'Finish', close those windows and the settings tab. You should be able to use the web version of Drawpile now on this server.<\/p>\n<\/details>\n<br>\n<details>\n<summary>\nInstall Certificate for Windows Firefox\n  <\/summary>\n<p>To install a cert in Firefox, first make sure that you are on this web page ( <a href=\"https:\/\/$hostname\">https:\/\/$hostname<\/a> ). Click 'Advanced...' and select 'Accept the Risk and Continue.' You should be able to use the web version of Drawpile now on this server.<\/p>\n<\/details>\n<br>\n<details>\n<summary>\nInstall Certificate for iOS Safari or Firefox\n  <\/summary>\n<p>To install a cert in iOS Safari, first make sure that you are on this web page ( <a href=\"https:\/\/$hostname\">https:\/\/$hostname<\/a> ). Click 'Show Details' and select 'visit this website'. You should be able to use the web version of Drawpile now on this server.<br><br>\n\nIn Firefox, you may need to confirm the certificate by dragging the certificate to the Keychain Access App ( <a href=\"https:\/\/support.apple.com\/guide\/keychain-access\/add-certificates-to-a-keychain-kyca2431\/mac\" target=\"mac-keychain\">Add certificates to a keychain using Keychain Access on Mac<\/a> ). To do this you will need to visit the website and accept the risk to continue, you can go into the keychain to find the certificate under \"All items\", \"Local items\". Find the website, double click it and enter your keychain password. Reload the web page, you should be able to use the web version of Drawpile now on this server.<\/p>\n<\/details>\n<br>/g" /var/www/html/drawpile/index.html
		fi
		
		community_server_extra_rules_insertion_function		
		
		echo "Would you like NSFM sessions to show up on the web page for the list server?"
		echo "Leaving this blank will default to (N)o."
		echo
		echo " (Y)es - Show NSFM sessions on the web page for list server."
		echo " (N)o  - Do not show NSFM sessions on the web page for list server."
		echo
		while :; do
			read -r -p "${bold}${red}Type (y)es to allow NSFM listings, or (n)o to hide:${normal} " toggle_nsfm_on_list_server_web_page
			echo
			if [ "$toggle_nsfm_on_list_server_web_page" == "y" ] || [ "$toggle_nsfm_on_list_server_web_page" == "Y" ] || [ "$toggle_nsfm_on_list_server_web_page" == "yes" ] || [ "$toggle_nsfm_on_list_server_web_page" == "YES" ] || [ "$toggle_nsfm_on_list_server_web_page" == "Yes" ] || [ "$toggle_nsfm_on_list_server_web_page" == "n" ] || [ "$toggle_nsfm_on_list_server_web_page" == "N" ] || [ "$toggle_nsfm_on_list_server_web_page" == "no" ] || [ "$toggle_nsfm_on_list_server_web_page" == "NO" ] || [ "$toggle_nsfm_on_list_server_web_page" == "No" ] || [ "$toggle_nsfm_on_list_server_web_page" == "" ]; then
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done
		if [ "$toggle_nsfm_on_list_server_web_page" == "y" ] || [ "$toggle_nsfm_on_list_server_web_page" == "Y" ] || [ "$toggle_nsfm_on_list_server_web_page" == "yes" ] || [ "$toggle_nsfm_on_list_server_web_page" == "YES" ] || [ "$toggle_nsfm_on_list_server_web_page" == "Yes" ]; then
			echo "${bold}${red}Show NSFM sessions on list server web page.${normal}"
			# sudo sed -i -e "s/list-url=\"\/listing\/sessions\/\"/list-url=\"\/listing\/sessions\/?nsfm=true\"/g" /var/www/html/drawpile/index.html
			# No action required, NSFM is now enabled by default.
		elif [ "$toggle_nsfm_on_list_server_web_page" == "n" ] || [ "$toggle_nsfm_on_list_server_web_page" == "N" ] || [ "$toggle_nsfm_on_list_server_web_page" == "no" ] || [ "$toggle_nsfm_on_list_server_web_page" == "NO" ] || [ "$toggle_nsfm_on_list_server_web_page" == "No" ]; then
			echo "${bold}${cyan}Do not show NSFM sessions on list server web page.${normal}"
			sudo sed -i -e "s/list-url=\"\/listing\/sessions\/?nsfm=true\"/list-url=\"\/listing\/sessions\/\"/g" /var/www/html/drawpile/index.html
		else
			echo "${bold}${cyan}Left blank. Will not show NSFM sessions on list server web page.${normal}"
			sudo sed -i -e "s/list-url=\"\/listing\/sessions\/?nsfm=true\"/list-url=\"\/listing\/sessions\/\"/g" /var/www/html/drawpile/index.html
		fi
		# Previous version before I realized I didn't need to specify the website name....
		# sudo sed -i -e "s/list-url=\"\/listing\/sessions\/\"/list-url=\"https:\/\/$hostname\/listing\/sessions\/\"/g" /var/www/html/drawpile/index.html
		# Original
		# sudo sed -i -e 's/list-url="\/listing\/sessions\/"/list-url="http:\/\/example.hostwebsite.com\/listing\/sessions\/"/g' /home/pi/Public/index.html
		# --------------------------------------------------------------------------------
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${cyan} *****Preparing Favicon Setup . . .***** ${normal}"
		echo
		if [ -z "$list_server_favicon_location_entry" ] || [ "$list_server_favicon_location_entry" = "" ]; then
			echo "${bold}${cyan}Selected nothing, favicon will not be used. Skipping.${normal}"
			# Do nothing as no error was detected.
			# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
			:
		elif [ "$list_server_favicon_location_entry" = "1" ] || [[ -d "$list_server_favicon_location_entry" ]]; then
			if [ "$list_server_favicon_location_entry" = "1" ]; then
				echo "${bold}${cyan}Selected 1, favicon will use default value to be configured in script.${normal}"
			elif [[ -d "$list_server_favicon_location_entry" ]]; then
				echo "${bold}${cyan}Selected custom location which passed verification.${normal}"
				echo "${bold}${cyan}Will copy from designated location.${normal}"
			else
				echo "This message should not be visible for: Preparing Favicon Setup"
			fi
			favicon_copy_function
			sudo sed -i '\!<link rel="stylesheet" href="/css/styles.css">!{x;\!^$!{s!!	<link rel="icon" type="image/png" href="/16.png" sizes="16x16">!;H};x}' /var/www/html/drawpile/index.html
			sudo sed -i '\!	<link rel="icon" type="image/png" href="/16.png" sizes="16x16">!{x;\!^$!{s!!	<link rel="icon" type="image/png" href="/32.png" sizes="32x32">!;H};x}' /var/www/html/drawpile/index.html
			sudo sed -i '\!	<link rel="icon" type="image/png" href="/32.png" sizes="32x32">!{x;\!^$!{s!!	<link rel="icon" type="image/png" href="/48.png" sizes="48x48">!;H};x}' /var/www/html/drawpile/index.html
			sudo sed -i '\!	<link rel="icon" type="image/png" href="/48.png" sizes="48x48">!{x;\!^$!{s!!	<link rel="icon" type="image/png" href="/64.png" sizes="64x64">!;H};x}' /var/www/html/drawpile/index.html
			sudo sed -i '\!	<link rel="icon" type="image/png" href="/64.png" sizes="64x64">!{x;\!^$!{s!!	<link rel="icon" type="image/png" href="/128.png" sizes="128x128">!;H};x}' /var/www/html/drawpile/index.html
			sleep 5
		else
			echo "${bold}${cyan}Selected Custom location:${normal} $list_server_favicon_location"
			echo
			echo Edit the index.html file located: /var/www/html/drawpile
			echo You can do so with this command : sudo nano /var/www/html/drawpile/index.html
			echo
			echo Edit the values noted below, editing the filename for "href=" to 
			echo match the filenames and path you decided to use earlier that
			echo is noted above. 
			echo
			echo '<link rel="icon" type="image/png" href="/16.png" sizes="16x16">'
			echo '<link rel="icon" type="image/png" href="/32.png" sizes="32x32">'
			echo '<link rel="icon" type="image/png" href="/48.png" sizes="48x48">'
			echo '<link rel="icon" type="image/png" href="/64.png" sizes="64x64">'
			echo '<link rel="icon" type="image/png" href="/128.png" sizes="128x128">'
			echo
			echo No further guidance will be provided. When you are ready to continue...
		fi
		# echo 'Press 1 for Self Signed Certificates'
		if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]]; then
			cat <<EOF | sudo tee /etc/nginx/conf.d/localsite.conf >/dev/null
server {
	listen *:80;
	listen [::]:80;
	
	server_name $hostname;
	root /var/www/html/drawpile;
	
	error_log /var/log/nginx/localsite.error_log info;
	
	location / {
		try_files \$uri \$uri/ =404;
		# This has to remain available, or the client will refuse to add the list server.
	}
	
	location /listing/ {
		proxy_pass http://127.0.0.1:8080/;
		proxy_redirect default;
		proxy_set_header X-Real-IP \$remote_addr;
	}
	
	location /admin/ {
		return 301 https://\$server_name\$request_uri;
	}
	
	location /admin_ui/ {
		return 301 https://\$server_name\$request_uri;
	}
}

server {
	listen *:443 ssl;
	listen [::]:443 ssl;
	
	server_name $hostname;
	root /var/www/html/drawpile;
	
	ssl_certificate $ssl_certificate;
	ssl_certificate_key $ssl_private_cert_key;

	location / {
		try_files \$uri \$uri/ =404;
		# Otherwise users can't access HTTPS page to download cert and manually install it to use web version of Drawpile.
		# return 301 http://\$server_name\$request_uri;
	}

	location /admin/ {
		auth_basic "admin";
		auth_basic_user_file /etc/nginx/passwords;
		try_files \$uri /admin/index.html =404;
		
		location /admin/api/ {
			proxy_pass http://127.0.0.1:27780/api/;
			proxy_redirect default;
		}
	}
	
	location /admin_ui/ {
		auth_basic "admin_ui";
		auth_basic_user_file /etc/nginx/passwords-admin-ui;
		try_files \$uri /admin_ui/index.html =404;
	}
	
	location /drawpile-web/ws {
		# Old Line
		# if (\$http_origin != "https://web.drawpile.net") {
		
		# New line.
		if (\$http_origin !~ "^(https://web\.(drawpile\.net|foxdice\.cn))?\$") {
			return 403;
		}
		proxy_pass http://127.0.0.1:27751;
		proxy_http_version 1.1;
		proxy_set_header Upgrade \$http_upgrade;
		proxy_set_header Connection "upgrade";
		proxy_set_header X-Real-IP \$remote_addr;
	}

	location /listing/ {
		return 301 http://\$server_name\$request_uri;
	}
	
	location /listing/admin/ {
		proxy_pass http://127.0.0.1:8080/admin/;
		proxy_redirect default;
	}

	location /listing/sessions/ {
		proxy_pass http://127.0.0.1:8080/sessions/;
		proxy_redirect default;
		proxy_set_header X-Real-IP \$remote_addr;
	}
}

# Use this block if you want to redirect old website name ($hostname_old) to the new ($hostname_new)
# Simply remove the first pound (hashtag) symbol in front of the lines below and edit accordingly.
#
#server {
#	server_name \$hostname_old;
#	return 301 \$scheme://\$hostname_new\$request_uri;
#
#	# For pre-0.8.42 installations:
#	# rewrite ^ \$scheme://a.example.com\$request_uri? permanent;
#	# https://stackoverflow.com/questions/10531975/how-to-configure-nginx-to-auto-redirect-to-the-main-hostname
#}
EOF
		else
			cat <<EOF | sudo tee /etc/nginx/conf.d/localsite.conf >/dev/null
server {
	listen *:80;
	listen [::]:80;
	
	server_name $hostname;
	root /var/www/html/drawpile;
	
	error_log /var/log/nginx/localsite.error_log info;
	
	location / {
		try_files \$uri \$uri/ =404;
	}
	
	location /listing/ {
		proxy_pass http://127.0.0.1:8080/;
		proxy_redirect default;
		proxy_set_header X-Real-IP \$remote_addr;
	}
	
	location /admin/ {
		return 301 https://\$server_name\$request_uri;
	}
	
	location /admin_ui/ {
		return 301 https://\$server_name\$request_uri;
	}
}

server {
	listen *:443 ssl;
	listen [::]:443 ssl;
	
	server_name $hostname;
	root /var/www/html/drawpile;
	
	ssl_certificate $ssl_certificate;
	ssl_certificate_key $ssl_private_cert_key;

	location / {
		return 301 http://\$server_name\$request_uri;
	}

	location /admin/ {
		auth_basic "admin";
		auth_basic_user_file /etc/nginx/passwords;
		try_files \$uri /admin/index.html =404;
		
		location /admin/api/ {
			proxy_pass http://127.0.0.1:27780/api/;
			proxy_redirect default;
		}
	}
	
	location /admin_ui/ {
		auth_basic "admin_ui";
		auth_basic_user_file /etc/nginx/passwords-admin-ui;
		try_files \$uri /admin_ui/index.html =404;
	}

	location /listing/ {
		return 301 http://\$server_name\$request_uri;
	}
	
	location /listing/admin/ {
		proxy_pass http://127.0.0.1:8080/admin/;
		proxy_redirect default;
	}

	location /listing/sessions/ {
		proxy_pass http://127.0.0.1:8080/sessions/;
		proxy_redirect default;
		proxy_set_header X-Real-IP \$remote_addr;
	}
}

# Use this block if you want to redirect old website name ($hostname_old) to the new ($hostname_new)
# Simply remove the first pound (hashtag) symbol in front of the lines below and edit accordingly.
#
#server {
#	server_name \$hostname_old;
#	return 301 \$scheme://\$hostname_new\$request_uri;
#
#	# For pre-0.8.42 installations:
#	# rewrite ^ \$scheme://a.example.com\$request_uri? permanent;
#	# https://stackoverflow.com/questions/10531975/how-to-configure-nginx-to-auto-redirect-to-the-main-hostname
#}
EOF
		fi
	elif [ "$ssl_encryption_config" == "2" ] || [ "$ssl_encryption_config" != "1" || "$ssl_encryption_config" != "3" ]; then
		# echo 'Press 2 for Lets Encrypt'
		# echo Invalid option selected. Assuming option 2 intended.
		echo
		sudo mkdir -p /var/www/html/drawpile && cd "$_"
		curl -s -L https://github.com/drawpile/dpserver/tarball/master | sudo tar xz --strip-components 2 --wildcards "*/public_html"
		# sudo mv /var/www/html/drawpile/js/SessionList.js /var/www/html/drawpile/js/SessionList_old.js
		# sudo wget -q --show-progress https://raw.githubusercontent.com/drawpile/website/master/static/js/SessionList.js -O /var/www/html/drawpile/js/SessionList.js
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${cyan}*****Editing index.html file for list server . . .*****${normal}"
		echo
		# --------------------------------------------------------------------------------
		# This section below set to modify List server page with server specific information.
		sudo sed -i -e "s/<title>Drawpile Public Community<\/title>/<title>$hostname Server<\/title>/g" /var/www/html/drawpile/index.html
		# sudo sed -i -e 's/<title>Drawpile Public Community<\/title>/<title>example.hostwebsite.com Community Server<\/title>/g' /var/www/html/drawpile/index.html

		sudo sed -i -e "s/https:\/\/__DOMAIN__\/listing\//https:\/\/$hostname\/listing\//g" /var/www/html/drawpile/index.html
		# sudo sed -i -e 's/https:\/\/__DOMAIN__\/listing\//https:\/\/example.hostwebsite.com\/listing\//g' /home/pi/Public/index.html
		
		sudo sed -i -e "s/<a href=\"https:\/\/drawpile.net\/help\/hosting\/\">/<a href=\"https:\/\/docs.drawpile.net\/help\/common\/hosting\">/g" /var/www/html/drawpile/index.html
		
		sudo sed -i -e "s/<code>pub.drawpile.net<\/code>/<code>$hostname<\/code>/g" /var/www/html/drawpile/index.html
		# sudo sed -i -e 's/<code>pub.drawpile.net<\/code> /<code>example.hostwebsite.com<\/code>/g' /var/www/html/drawpile/index.html

		sudo sed -i -e "s/list-url=\"\/listing\/sessions\/\"/list-url=\"https:\/\/$hostname\/listing\/sessions\/\"/g" /var/www/html/drawpile/index.html
		# sudo sed -i -e 's/list-url="\/listing\/sessions\/"/list-url="https:\/\/example.hostwebsite.com\/listing\/sessions\/"/g' /home/pi/Public/index.html
		
		if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]]; then
			sudo sed -i -e "s/try not to monopolize the available space./try not to monopolize the available space. To connect to a session via the web, <a href=\"https:\/\/web.drawpile.net\/?host=$hostname\" target=\"web-client\">click here to load the web client from the official Drawpile website.<\/a> If you don't want to draw with anyone else online, <a href=\"https:\/\/web.drawpile.net\" target=\"web-client\">click here to load the web client in stand alone mode from the official Drawpile website.<\/a>/g" /var/www/html/drawpile/index.html
			# sudo sed -i -e "s/try not to monopolize the available space./try not to monopolize the available space. To connect to a session via the web, <a href=\"https:\/\/web.drawpile.net\/?host=pub.drawpile.net\" target=\"web-client\">click here to load the web client from the official Drawpile website.<\/a>/g" /var/www/html/drawpile/index.html
		fi
		
		community_server_extra_rules_insertion_function
		
		echo "Would you like NSFM sessions to show up on the web page for the list server?"
		echo "Leaving this blank will default to (N)o."
		echo
		echo " (Y)es - Show NSFM sessions on the web page for list server."
		echo " (N)o  - Do not show NSFM sessions on the web page for list server."
		echo
		while :; do
			read -r -p "${bold}${red}Type (y)es to allow NSFM listings, or (n)o to hide:${normal} " toggle_nsfm_on_list_server_web_page
			echo
			if [ "$toggle_nsfm_on_list_server_web_page" == "y" ] || [ "$toggle_nsfm_on_list_server_web_page" == "Y" ] || [ "$toggle_nsfm_on_list_server_web_page" == "yes" ] || [ "$toggle_nsfm_on_list_server_web_page" == "YES" ] || [ "$toggle_nsfm_on_list_server_web_page" == "Yes" ] || [ "$toggle_nsfm_on_list_server_web_page" == "n" ] || [ "$toggle_nsfm_on_list_server_web_page" == "N" ] || [ "$toggle_nsfm_on_list_server_web_page" == "no" ] || [ "$toggle_nsfm_on_list_server_web_page" == "NO" ] || [ "$toggle_nsfm_on_list_server_web_page" == "No" ] || [ "$toggle_nsfm_on_list_server_web_page" == "" ]; then
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done
		if [ "$toggle_nsfm_on_list_server_web_page" == "y" ] || [ "$toggle_nsfm_on_list_server_web_page" == "Y" ] || [ "$toggle_nsfm_on_list_server_web_page" == "yes" ] || [ "$toggle_nsfm_on_list_server_web_page" == "YES" ] || [ "$toggle_nsfm_on_list_server_web_page" == "Yes" ]; then
			echo "${bold}${red}Show NSFM sessions on list server web page.${normal}"
			# sudo sed -i -e "s/list-url=\"\/listing\/sessions\/\"/list-url=\"\/listing\/sessions\/?nsfm=true\"/g" /var/www/html/drawpile/index.html
			# No action required, NSFM is now enabled by default.
		elif [ "$toggle_nsfm_on_list_server_web_page" == "n" ] || [ "$toggle_nsfm_on_list_server_web_page" == "N" ] || [ "$toggle_nsfm_on_list_server_web_page" == "no" ] || [ "$toggle_nsfm_on_list_server_web_page" == "NO" ] || [ "$toggle_nsfm_on_list_server_web_page" == "No" ]; then
			echo "${bold}${cyan}Do not show NSFM sessions on list server web page.${normal}"
			sudo sed -i -e "s/list-url=\"\/listing\/sessions\/?nsfm=true\"/list-url=\"\/listing\/sessions\/\"/g" /var/www/html/drawpile/index.html
		else
			echo "${bold}${cyan}Left blank. Will not show NSFM sessions on list server web page.${normal}"
			sudo sed -i -e "s/list-url=\"\/listing\/sessions\/?nsfm=true\"/list-url=\"\/listing\/sessions\/\"/g" /var/www/html/drawpile/index.html
		fi
		# Previous version before I realized I didn't need to specify the website name....
		# sudo sed -i -e "s/list-url=\"\/listing\/sessions\/\"/list-url=\"https:\/\/$hostname\/listing\/sessions\/\"/g" /var/www/html/drawpile/index.html
		# Original
		# sudo sed -i -e 's/list-url="\/listing\/sessions\/"/list-url="http:\/\/example.hostwebsite.com\/listing\/sessions\/"/g' /home/pi/Public/index.html
		# --------------------------------------------------------------------------------
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "*****${bold}${cyan}Preparing Favicon Setup . . .${normal}*****"
		echo
		if [ "$list_server_favicon_location_entry" = "" ]; then
			echo "${bold}${cyan}Selected nothing, favicon will not be used. Skipping.${normal}"
			# Do nothing as no error was detected.
			# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
			:
		elif [ "$list_server_favicon_location_entry" = "1" ]; then
			echo "${bold}${cyan}Selected 1, favicon will use default value to be configured in script.${normal}"
			echo
			favicon_copy_function
			sudo sed -i '\!<link rel="stylesheet" href="/css/styles.css">!{x;\!^$!{s!!	<link rel="icon" type="image/png" href="/16.png" sizes="16x16">!;H};x}' /var/www/html/drawpile/index.html
			sudo sed -i '\!	<link rel="icon" type="image/png" href="/16.png" sizes="16x16">!{x;\!^$!{s!!	<link rel="icon" type="image/png" href="/32.png" sizes="32x32">!;H};x}' /var/www/html/drawpile/index.html
			sudo sed -i '\!	<link rel="icon" type="image/png" href="/32.png" sizes="32x32">!{x;\!^$!{s!!	<link rel="icon" type="image/png" href="/48.png" sizes="48x48">!;H};x}' /var/www/html/drawpile/index.html
			sudo sed -i '\!	<link rel="icon" type="image/png" href="/48.png" sizes="48x48">!{x;\!^$!{s!!	<link rel="icon" type="image/png" href="/64.png" sizes="64x64">!;H};x}' /var/www/html/drawpile/index.html
			sudo sed -i '\!	<link rel="icon" type="image/png" href="/64.png" sizes="64x64">!{x;\!^$!{s!!	<link rel="icon" type="image/png" href="/128.png" sizes="128x128">!;H};x}' /var/www/html/drawpile/index.html
			sleep 5
		else
			echo "${bold}${cyan}Selected Custom location:${normal} $list_server_favicon_location"
			echo
			echo Edit the index.html file located: /var/www/html/drawpile
			echo You can do so with this command : sudo nano /var/www/html/drawpile/index.html
			echo
			echo Edit the values noted below, editing the filename for "href=" to 
			echo match the filenames and path you decided to use earlier that
			echo is noted above. 
			echo
			echo '<link rel="icon" type="image/png" href="/16.png" sizes="16x16">'
			echo '<link rel="icon" type="image/png" href="/32.png" sizes="32x32">'
			echo '<link rel="icon" type="image/png" href="/48.png" sizes="48x48">'
			echo '<link rel="icon" type="image/png" href="/64.png" sizes="64x64">'
			echo '<link rel="icon" type="image/png" href="/128.png" sizes="128x128">'
			echo
			echo No further guidance will be provided. When you are ready to continue...
			echo
			pause
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "*****${bold}${cyan}Generating systemd configuration for list server and web admin. . .${normal}*****"
		echo
		# echo 'Press 2 for Lets Encrypt'
		if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]]; then
			cat <<EOF | sudo tee /etc/nginx/conf.d/localsite.conf >/dev/null                                                                      
server {
        listen *:80;
        listen [::]:80;

		server_name $hostname;
        root /var/www/html/drawpile;

        location / {
			 return 307 https://\$server_name/\$request_uri;
			# return 307 https://\$host:443\$request_uri;
			# return 307 https://\$request_uri;
			# try_files \$uri \$uri/ =404;
        }

        location /.well-known/acme-challenge/ {
			# root /var/www/certbot;
			root /etc/letsencrypt/renewal;
        }
}

server {
	# listen *:80;
	# listen [::]:80;
	listen *:443 ssl;
	listen [::]:443 ssl;
	
	server_name $hostname;
	root /var/www/html/drawpile;
	
	ssl_certificate $ssl_certificate;
	ssl_certificate_key $ssl_private_cert_key;
	
	location / {
			try_files \$uri \$uri/ =404;
	}
	
	location /admin/ {
			auth_basic "admin";
			auth_basic_user_file /etc/nginx/passwords;
			try_files \$uri /admin/index.html =404;
			location /admin/api/ {
					proxy_pass http://127.0.0.1:27780/api/;
					proxy_redirect default;
			}
	}
	
	location /admin_ui/ {
		auth_basic "admin_ui";
		auth_basic_user_file /etc/nginx/passwords-admin-ui;
		try_files \$uri /admin_ui/index.html =404;
	}
	
	location /drawpile-web/ws {
		# Old Line
		# if (\$http_origin != "https://web.drawpile.net") {
		
		# New line.
		if (\$http_origin !~ "^(https://web\.(drawpile\.net|foxdice\.cn))?\$") {
			return 403;
		}
		proxy_pass http://127.0.0.1:27751;
		proxy_http_version 1.1;
		proxy_set_header Upgrade \$http_upgrade;
		proxy_set_header Connection "upgrade";
		proxy_set_header X-Real-IP \$remote_addr;
	}

	location /listing/ {
			proxy_pass http://127.0.0.1:8080/;
			proxy_redirect default;
			proxy_set_header X-Real-IP \$remote_addr;
	}
	
	location /listing/admin/ {
		proxy_pass http://127.0.0.1:8080/admin/;
		proxy_redirect default;
	}
}

# Use this block if you want to redirect old website name ($hostname_old) to the new ($hostname_new)
# Simply remove the first pound (hashtag) symbol in front of the lines below and edit accordingly.
#
#server {
#	server_name \$hostname_old;
#	return 301 \$scheme://\$hostname_new\$request_uri;
#
#	# For pre-0.8.42 installations:
#	# rewrite ^ \$scheme://a.example.com\$request_uri? permanent;
#	# https://stackoverflow.com/questions/10531975/how-to-configure-nginx-to-auto-redirect-to-the-main-hostname
#}
EOF
		else
			cat <<EOF | sudo tee /etc/nginx/conf.d/localsite.conf >/dev/null                                                                      
server {
        listen *:80;
        listen [::]:80;

		server_name $hostname;
        root /var/www/html/drawpile;

        location / {
			 return 307 https://\$server_name/\$request_uri;
			# return 307 https://\$host:443\$request_uri;
			# return 307 https://\$request_uri;
			# try_files \$uri \$uri/ =404;
        }

        location /.well-known/acme-challenge/ {
			# root /var/www/certbot;
			root /etc/letsencrypt/renewal;
        }
}

server {
	# listen *:80;
	# listen [::]:80;
	listen *:443 ssl;
	listen [::]:443 ssl;
	
	server_name $hostname;
	root /var/www/html/drawpile;
	
	ssl_certificate $ssl_certificate;
	ssl_certificate_key $ssl_private_cert_key;
	
	location / {
			try_files \$uri \$uri/ =404;
	}
	
	location /admin/ {
			auth_basic "admin";
			auth_basic_user_file /etc/nginx/passwords;
			try_files \$uri /admin/index.html =404;
			location /admin/api/ {
					proxy_pass http://127.0.0.1:27780/api/;
					proxy_redirect default;
			}
	}
	
	location /admin_ui/ {
		auth_basic "admin_ui";
		auth_basic_user_file /etc/nginx/passwords-admin-ui;
		try_files \$uri /admin_ui/index.html =404;
	}
	
	location /listing/ {
			proxy_pass http://127.0.0.1:8080/;
			proxy_redirect default;
			proxy_set_header X-Real-IP \$remote_addr;
	}
	
	location /listing/admin/ {
		proxy_pass http://127.0.0.1:8080/admin/;
		proxy_redirect default;
	}
}

# Use this block if you want to redirect old website name ($hostname_old) to the new ($hostname_new)
# Simply remove the first pound (hashtag) symbol in front of the lines below and edit accordingly.
#
#server {
#	server_name \$hostname_old;
#	return 301 \$scheme://\$hostname_new\$request_uri;
#
#	# For pre-0.8.42 installations:
#	# rewrite ^ \$scheme://a.example.com\$request_uri? permanent;
#	# https://stackoverflow.com/questions/10531975/how-to-configure-nginx-to-auto-redirect-to-the-main-hostname
#}
EOF
		fi
		# sudo systemctl enable --now nginx
		# nginx -t -c /etc/nginx/nginx.conf

		# echo Create a password to access the admin panel under http://$hostname/admin/api
		# sudo sh -c "openssl passwd -apr1" | sudo tee -a /etc/nginx/passwords
		# sudo sed -i -e 's/^/admin:/' /etc/nginx/passwords
	else
		:
		# Do nothing as no error was detected.
		# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
	fi

	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	# sudo systemctl restart drawpile-listserver.service && systemctl status drawpile-listserver.service --no-pager -l
	sudo systemctl restart drawpile-listserver.service
	systemctl status drawpile-listserver.service --no-pager -l
	wait $!
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && [ "`systemctl is-enabled nginx.service`" = "enabled" ]; then
		echo "${bold}${cyan}NGINX is enabled in Fedora, no action required.${normal}"
	elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && [ "`systemctl is-enabled nginx.service`" = "disabled" ]; then
		echo "${bold}${cyan}Skipping starting NGINX until server has completed web admin setup.${normal}"
	else
		# sudo systemctl daemon-reload && sudo systemctl restart systemd-modules-load && sudo nginx -s reload && sudo systemctl restart nginx.service && systemctl status nginx.service --no-pager -l
		sudo systemctl daemon-reload
		sudo systemctl restart systemd-modules-load
		sudo nginx -s reload
		sudo systemctl restart nginx.service
		systemctl status nginx.service --no-pager -l
		wait $!
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Configuring Web Admin interface . . .*****${normal}"
	echo
	echo "You can choose to build the web admin interface yourself"
	echo "or use a pre-built configuration."
	echo
	echo "${bold}${cyan}Option 1 --> Use Pre-built:${normal}"
	echo "${bold}${cyan}Pros:${normal}    Fast to download and set up."
	echo "${bold}${cyan}Cons:${normal}    May not be the most up to date."
	echo
	echo "${bold}${cyan}Option 2 --> Build it${normal}"
	echo "${bold}${cyan}Pros:${normal}    Latest version, may be more up to date."
	echo "${bold}${cyan}Cons:${normal}    Slow, requires installation of additional software"
	echo
	while :; do
		read -r -p "${bold}${cyan}Please make your selection now by entering 1 or 2:${normal} " select_web_build_or_prebuilt
		if [ "$select_web_build_or_prebuilt" == "1" ] || [ "$select_web_build_or_prebuilt" == "2" ]; then
			break
		else
			echo
			echo "${bold}${red}Invalid input selection, try again.${normal}"
			echo
			continue
		fi
	done
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	function nginx_reload_function () {
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && [ "`systemctl is-enabled nginx.service`" = "disabled" ]; then
			sudo systemctl enable nginx.service
		fi
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && [ "`systemctl is-enabled nginx.service`" = "enabled" ]; then
			sudo systemctl stop --now nginx.service
		fi
		# sudo systemctl daemon-reload && sudo systemctl restart systemd-modules-load && sudo nginx -s reload && sudo systemctl restart nginx.service && systemctl status nginx.service --no-pager -l
		sudo systemctl daemon-reload
		sudo systemctl restart systemd-modules-load
		sudo systemctl restart nginx.service
		systemctl status nginx.service --no-pager -l
		wait $!
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && [ "`systemctl is-failed nginx.service`" = "failed" ]; then
			echo
			echo "${bold}${yellow}Oops, NGINX is unhappy. Killing processes and restarting.${normal}"
			echo "${bold}${yellow}Hoping this fixes it! I'm not sure what causes this state,${normal}"
			echo "${bold}${yellow}so until then, this should work.${normal}"
			echo
			sudo pkill -f nginx & wait $!
			sudo systemctl start nginx
			systemctl status nginx.service
		fi
	}
	
	if [ "$select_web_build_or_prebuilt" == "1" ]; then
		# Pre-built web admin
		# Link --> https://github.com/drawpile/dpwebadmin/releases/download/0.5.1/dpwebadmin-0.5.1.tar.gz
		
		web_admin_release_test=$( grep -m 1 "web_admin_release = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
		web_admin_release=0.11.0
		web_admin_release_filename=dpwebadmin-0.11.0.tar.gz
		
		if [[ "$web_admin_release_test" == "$web_admin_release" ]]; then
			echo "Skipping download and setup, web admin is up to date."
		elif [ -z "$web_admin_release_test" ] || [ "$web_admin_release_test" = "=" ] || [[ "$web_admin_release_test" != "$web_admin_release" ]]; then
			echo "${bold}${cyan}*****Downloading Web Admin interface . . . (Step 1 of 3) *****${normal}"
			echo
			# For use with the WIP drawpile-srv for the web client of Drawpile. This is a development release. It may be unstable, gets updated in-place and will go away eventually.
			# 
			# The attached binary is built with the following parameters in .env.local:
			# 
			# REACT_APP_APIROOT=/admin/api
			# REACT_APP_BASENAME=/admin
			# PUBLIC_URL=/admin
			# If you want to use other paths, you must build this yourself.
			pwd
			cd "$dp_install_loc/Programs"
			pwd
			# Old Releases
			# 	web_admin_release=wip-webclient
			#	web_admin_release_filename=dpwebadmin-wip-webclient.tar.gz
			
			sudo $wget_or_wget2_quiet_progress https://github.com/drawpile/dpwebadmin/releases/download/$web_admin_release/$web_admin_release_filename
			sudo sed -i '\!^web_admin_release =!{h;s!=.*!= '"$web_admin_release"'!};${x;\!^$!{s!!web_admin_release = '"$web_admin_release"'!;H};x}' $drawpile_configuration_values_file
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			echo "${bold}${cyan}*****Extracting Web Admin interface . . . (Step 2 of 3) *****${normal}"
			echo
			sudo tar vzxf $web_admin_release_filename
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			echo "${bold}${cyan}*****Editing Title and Moving to root web directory . . . (Step 3 of 3)*****${normal}"
			echo
			sudo sed -i -e "s/<title>Drawpile Server Admin<\/title>/<title>Drawpile Server Admin - $hostname<\/title>/g" "$dp_install_loc/Programs/dpwebadmin-$web_admin_release/index.html"
			if [[ -d "/var/www/html/drawpile/admin-old" ]]; then
				sudo rm -rf /var/www/html/drawpile/admin-old
				if [[ -d "/var/www/html/drawpile/admin" ]]; then
					sudo mv /var/www/html/drawpile/admin /var/www/html/drawpile/admin-old
				fi
			elif [[ -d "/var/www/html/drawpile/admin" ]]; then
				sudo mv /var/www/html/drawpile/admin /var/www/html/drawpile/admin-old
			else
				:
				# Do nothing as no error was detected.
				# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
			fi
			sudo mv "dpwebadmin-$web_admin_release" /var/www/html/drawpile/admin
			sudo restorecon -R /var/www/html/drawpile/
			echo
			echo "Will reload NGINX after the New Web Admin interface is downloaded."
		else
			echo "This message should not be visible web admin prebuilt check."
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo '--------------------------------------------------------------------------------'
		echo
		web_and_web_and_list_server_admin_release_test=$( grep -m 1 "web_and_list_server_admin_release = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
		web_and_list_server_admin_release=1.0.0
		web_and_list_server_admin_release_filename=drawpile-admin-webui-1.0.0.tar.gz
		
		if [[ "$web_and_web_and_list_server_admin_release_test" == "$web_and_list_server_admin_release" ]]; then
			echo "Skipping download and setup, new web admin is up to date."
			echo
		elif [ -z "$web_and_web_and_list_server_admin_release_test" ] || [ "$web_and_web_and_list_server_admin_release_test" = "=" ] || [[ "$web_and_web_and_list_server_admin_release_test" != "$web_and_list_server_admin_release" ]]; then
			echo "${bold}${cyan}*****Downloading New Web Admin interface . . . (Step 1 of 4) *****${normal}"
			echo
			# The prebuilt version uses /listing/admin as the root for the list server admin API. If you put it somewhere else, edit index.html to point it at the correct path.
			pwd
			sudo $wget_or_wget2_quiet_progress https://github.com/drawpile/drawpile-admin-webui/releases/download/$web_and_list_server_admin_release/$web_and_list_server_admin_release_filename
			sudo sed -i '\!^web_and_list_server_admin_release =!{h;s!=.*!= '"$web_and_list_server_admin_release"'!};${x;\!^$!{s!!web_and_list_server_admin_release = '"$web_and_list_server_admin_release"'!;H};x}' $drawpile_configuration_values_file
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			echo "${bold}${cyan}*****Extracting New Web Admin interface . . . (Step 2 of 4) *****${normal}"
			echo
			sudo tar vzxf $web_and_list_server_admin_release_filename
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			echo "${bold}${cyan}*****Moving to NGINX web directory . . . (Step 3 of 4)*****${normal}"
			echo
			if [[ -d "/var/www/html/drawpile/admin_ui_old" ]]; then
				sudo rm -rf /var/www/html/drawpile/admin_ui_old
				if [[ -d "/var/www/html/drawpile/admin_ui" ]]; then
					sudo mv /var/www/html/drawpile/admin_ui /var/www/html/drawpile/admin_ui_old
				fi
			elif [[ -d "/var/www/html/drawpile/admin_ui" ]]; then
				sudo mv /var/www/html/drawpile/admin_ui /var/www/html/drawpile/admin_ui_old
			else
				:
				# Do nothing as no error was detected.
				# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
			fi
			sudo mv "drawpile-admin-webui-$web_and_list_server_admin_release" /var/www/html/drawpile/admin_ui
			sudo restorecon -R /var/www/html/drawpile/
			echo
			echo '--------------------------------------------------------------------------------'
			echo
		else
			echo "This message should not be visible for new web admin prebuilt download check."
		fi

		if [[ "$web_admin_release_test" == "$web_admin_release" ]] && [[ -z "$web_and_web_and_list_server_admin_release_test" || "$web_and_web_and_list_server_admin_release_test" = "=" || "$web_and_web_and_list_server_admin_release_test" != "$web_and_list_server_admin_release" ]]; then
			echo "${bold}${cyan}*****Reloading NGINX to see new data files . . . (Step 4 of 4)*****${normal}"
			echo
			nginx_reload_function
		elif [[ -z "$web_admin_release_test" || "$web_admin_release_test" = "=" || "$web_admin_release_test" != "$web_admin_release" ]] && [[ "$web_and_web_and_list_server_admin_release_test" == "$web_and_list_server_admin_release" ]]; then
			echo "${bold}${cyan}*****Reloading NGINX to see new data files . . . *****${normal}"
			echo
			nginx_reload_function
		elif [[ -z "$web_admin_release_test" || "$web_admin_release_test" = "=" || "$web_admin_release_test" != "$web_admin_release" ]] && [[ -z "$web_and_web_and_list_server_admin_release_test" || "$web_and_web_and_list_server_admin_release_test" = "=" || "$web_and_web_and_list_server_admin_release_test" != "$web_and_list_server_admin_release" ]]; then
			echo "${bold}${cyan}*****Reloading NGINX to see new data files . . . (Step 4 of 4)*****${normal}"
			echo
			nginx_reload_function
		elif [[ "$web_admin_release_test" == "$web_admin_release" ]] && [[ "$web_and_web_and_list_server_admin_release_test" == "$web_and_list_server_admin_release" ]]; then
			echo "Do not need to reload NGINX."
		else
			echo "This message shouldn't be visible for restarting NGINX to see web admin and new wed admin changes."
		fi
		
	elif [ "$select_web_build_or_prebuilt" == "2" ]; then
		# Build web admin
		echo "${bold}${cyan}*****Checking for Node.JS installation and version . . . (Install 1 of 2) *****${normal}"
		echo
		function nodejs_warning_raspbian_for_desktop_x86_64_only () {
			echo "**********************************************************************************"
			echo
			echo "${bold}${red}### WARNING ###"
			echo "${bold}${red}DO NOT EXPOSE NODE-RED TO THE OPEN INTERNET WITHOUT SECURING IT FIRST${normal}"
			echo 
			echo "${bold}${red}Even if your Node-RED does not have anything valuable, (automated) attacks will${normal}"
			echo "${bold}${red}happen and could provide a foothold in your local network"
			echo 
			echo "${bold}${red}Follow the guide at https://nodered.org/docs/user-guide/runtime/securing-node-red${normal}"
			echo "${bold}${red}to setup security.${normal}"
			echo 
			echo "### ADDITIONAL RECOMMENDATIONS ###"
			echo " - Remove the /etc/sudoers.d/010_pi-nopasswd file to require entering your password"
			echo "   when performing any sudo/root commands:"
			echo 
			echo "sudo rm -f /etc/sudoers.d/010_pi-nopasswd"
			echo 
			echo " - You can customise the initial settings by running:"
			echo 
			echo "  node-red admin init"
			echo 
			echo " - After running Node-RED for the first time, change the ownership of the settings"
			echo "   file to 'root' to prevent unauthorised changes:"
			echo 
			echo "	  sudo chown root:root ~/.node-red/settings.js"
			echo
			**********************************************************************************
		}

		function install_or_update_nodejs () {
			echo
			echo "Running package update and upgrade"
			echo
			# Node must be version 14 or higher, has version 12 by default on latest version of Rasbpian...
			# https://pimylifeup.com/raspberry-pi-nodejs/
			# node --version
			sudo $packages_update_program
			sudo $packages_system_upgrade
			echo
			app_does_not_exist=0
			app_installed=0
			app_not_installed=0
			progs=(nodejs);
			package_install_status_check_function
			echo
			
			package_name=nodejs
			minimum_versionnodejs=14.0.0
			if [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" || "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ]] && [[ "$what_architecture" == "Architecture: arm64" || "$what_architecture" == "Architecture: arm" ]] && [ "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ] && [ "$verify_pi_model" == "Raspberry Pi Zero W" ]; then
				echo "${bold}${red}Pi Zero can only get to NodeJS version 10 by default. That's${normal}"
				echo "${bold}${red}a pretty big problem since we need at least version 14 or later.${normal}"
				echo
				echo "Would you like to try an unofficial install of NodeJS LTS?"
				echo "Note that this has not currently been tested by the maker of"
				echo "this script, this was something that someone else tried as they"
				echo "wanted to run it on a Pi Zero W. Do this at your own risk!"
				echo
				echo "Read more here --> https://gist.github.com/mandrean/71f2cbf707025a5983c0fc04d78f3e9a"
				echo 
				while :; do
					read -r -p "${bold}${red}Without quotes, type 'yes' or 'no':${normal} " pi_zero_nodejs
					if [ "$pi_zero_nodejs" == "yes" ] || [ "$pi_zero_nodejs" == "YES" ] || [ "$pi_zero_nodejs" == "Yes" ] || [ "$pi_zero_nodejs" == "no" ] || [ "$pi_zero_nodejs" == "NO" ] || [ "$pi_zero_nodejs" == "No" ]; then
						break
					else
						echo
						echo "Invalid input selection, try again."
						echo
						continue
					fi
				done
				echo
				if [ "$pi_zero_nodejs" == "yes" ] || [ "$pi_zero_nodejs" == "YES" ] || [ "$pi_zero_nodejs" == "Yes" ] ; then
					# update system
					# sudo apt update && sudo apt upgrade
					sudo $packages_update_program
					sudo $packages_system_upgrade
					#
					# uninstall old node (v10?)
					sudo apt remove nodejs npm -y
					#
					# install nvm
					curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash
					#
					# use 'unofficial builds' in nvm
					echo "export NVM_NODEJS_ORG_MIRROR=https://unofficial-builds.nodejs.org/download/release" >> ~/.bashrc
					#
					# reload bashrc
					source ~/.bashrc
					#
					# install latest LTS
					nvm install --lts
					nvm use --lts
					#
					# verify versions
					node -v
					npm -v
				elif [ "$pi_zero_nodejs" == "no" ] || [ "$pi_zero_nodejs" == "NO" ] || [ "$pi_zero_nodejs" == "No" ] ; then
					echo "Skipping Node.JS Installation for Pi Zero W . . ."
				else
					echo "Invalid selection option, skipping installation of unofficial NodeJS LTS."
					pi_zero_nodejs=no
				fi
			else
				if [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ] && [ "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ]; then
					# Raspbian for Desktop
					echo "${bold}${cyan}Installing NodeJS from Node-Red Script (need 32 bit binary)${normal}"
					echo
					# Acquired from - https://raw.githubusercontent.com/node-red/linux-installers/master/deb/update-nodejs-and-nodered
					nodered_install_log=nodered-install.log
					tgtl18=18.4.0    # need x86 latest from https://unofficial-builds.nodejs.org/download/release/
					tgtl=$tgtl18
					tgta18=18.16.1    # need armv6l latest from https://unofficial-builds.nodejs.org/download/release/
					tgta=$tgta18
					echo "Using 32bit nodejs" | sudo tee -a /var/log/$nodered_install_log >>/dev/null
					curl -sSL -o /tmp/node.tgz https://unofficial-builds.nodejs.org/download/release/v$tgtl/node-v$tgtl-linux-x86.tar.gz 2>&1 | sudo tee -a /var/log/$nodered_install_log >>/dev/null
					# unpack it into the correct places
					hd=$(head -c 9 /tmp/node.tgz)
					if [ "$hd" == "<!DOCT" ] || [ "$hd" == "<html>" ]; then
						CHAR="$CROSS File $f not downloaded";
					else
						if [[ -d /tmp/nodejs ]]; then
							sudo rm -rf /tmp/nodejs
						fi
						mkdir -p /tmp/nodejs
						sudo tar -zxof /tmp/node.tgz --strip-components=1 -C /tmp/nodejs
						sudo chown -R 0:0 /tmp/nodejs 2>&1 | sudo tee -a /var/log/$nodered_install_log>>/dev/null
						if sudo cp -PR /tmp/nodejs/* /usr/ 2>&1 | sudo tee -a /var/log/$nodered_install_log >>/dev/null; then CHAR=$TICK; else CHAR=$CROSS; fi
						sudo rm -rf /tmp/nodejs 2>&1 | sudo tee -a /var/log/$nodered_install_log>>/dev/null
						# if sudo tar -zxof /tmp/node.tgz --strip-components=1 -C /usr 2>&1 | sudo tee -a /var/log/$nodered_install_log>>/dev/null; then CHAR=$TICK; else CHAR=$CROSS; fi
					fi
					# rm /tmp/node.tgz 2>&1 | sudo tee -a /var/log/$nodered_install_log>>/dev/null
					echo "  Install Node.js for i686            $CHAR"
					echo
					echo "Installed version is . . ."
					node -v
					echo
					test_installation_status="Installed"
					test_version=$(node -v | cut -c 2-100)			
<<comment_EOF_delete
			while :; do
				read -r -p "${bold}${cyan}Would you like to try (1) Node-RED Install or just update (2) nodejs which may not work?${normal} " nodejs_or_red
				[[ $nodejs_or_red =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
				if (( $nodejs_or_red >= 1 && $nodejs_or_red <= 2)); then
					break
				else
					echo
					echo "Invalid number selection, try again."
					echo
				fi
			done
			if [ "$nodejs_or_red" == "1" ]; then
				echo "Adding Node.JS repository to get latest version . . ."
				echo
				# sudo curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
				bash <(curl -sL https://raw.githubusercontent.com/node-red/linux-installers/master/deb/update-nodejs-and-nodered) --node18
				# Search for the line below for cleanup.
				# echo "${bold}${cyan}*****Cleanup on Raspbian for Desktop . . . (Final Step)*****${normal}"
				test_installation_status="Installed"
				test_version=$(node -v | cut -c 2-100)
			else
				# Acquired from - https://raw.githubusercontent.com/node-red/linux-installers/master/deb/update-nodejs-and-nodered
				nodered_install_log=nodered-install.log
				tgtl18=18.4.0    # need x86 latest from https://unofficial-builds.nodejs.org/download/release/
                tgtl=$tgtl18
				tgta18=18.16.1    # need armv6l latest from https://unofficial-builds.nodejs.org/download/release/
                tgta=$tgta18
				echo "Using 32bit nodejs" | sudo tee -a /var/log/$nodered_install_log >>/dev/null
				curl -sSL -o /tmp/node.tgz https://unofficial-builds.nodejs.org/download/release/v$tgtl/node-v$tgtl-linux-x86.tar.gz 2>&1 | sudo tee -a /var/log/$nodered_install_log >>/dev/null
				# unpack it into the correct places
				hd=$(head -c 9 /tmp/node.tgz)
				if [ "$hd" == "<!DOCT" ] || [ "$hd" == "<html>" ]; then
					CHAR="$CROSS File $f not downloaded";
				else
					if [[ -d /tmp/nodejs ]]; then
						sudo rm -rf /tmp/nodejs
					fi
					mkdir -p /tmp/nodejs
					sudo tar -zxof /tmp/node.tgz --strip-components=1 -C /tmp/nodejs
					sudo chown -R 0:0 /tmp/nodejs 2>&1 | sudo tee -a /var/log/$nodered_install_log>>/dev/null
					if sudo cp -PR /tmp/nodejs/* /usr/ 2>&1 | sudo tee -a /var/log/$nodered_install_log >>/dev/null; then CHAR=$TICK; else CHAR=$CROSS; fi
					sudo rm -rf /tmp/nodejs 2>&1 | sudo tee -a /var/log/$nodered_install_log>>/dev/null
					# if sudo tar -zxof /tmp/node.tgz --strip-components=1 -C /usr 2>&1 | sudo tee -a /var/log/$nodered_install_log>>/dev/null; then CHAR=$TICK; else CHAR=$CROSS; fi
				fi
				rm /tmp/node.tgz 2>&1 | sudo tee -a /var/log/$nodered_install_log>>/dev/null
				echo "  Install Node.js for i686            $CHAR"
				echo
				echo "Installed version is . . ."
				node -v
				echo
				test_installation_status="Installed"
				test_version=$(node -v | cut -c 2-100)
			fi
comment_EOF_delete
				elif [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" && "$what_architecture" == "Architecture: x86-64" && "$verify_if_this_is_raspbian_or_debian" == "" ]] || [[ ( "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" || "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ) && ( "$what_architecture" == "Architecture: arm64" || "$what_architecture" == "Architecture: arm" ) && "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ]]; then
					# Should work for Ubuntu, Debian, and Raspbian for ARM, but NOT Raspbian for Desktop. Debian systems with ARM processors are allowed in a section below.
					# Group if statements / group compound conditions https://stackoverflow.com/questions/14964805/groups-of-compound-conditions-in-bash-test
					# https://github.com/nodesource/distributions
					# https://github.com/nodesource/distributions#debian-and-ubuntu-based-distributions
					sudo apt-get update
					sudo apt-get  -q -y install ca-certificates curl gnupg
					sudo mkdir -p /etc/apt/keyrings
					curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
					NODE_MAJOR=18
					# NODE_MAJOR=20
					echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list
					sudo apt-get update
					sudo apt-get -q -y install nodejs
					version_test_by_distro_function
				elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
					# https://github.com/nodesource/distributions
					# https://github.com/nodesource/distributions#fedora-versions
					#
					# NODE_MAJOR=18 --> Label only, do not need to uncomment, can uncomment below if wishing to activate
					sudo yum install https://rpm.nodesource.com/pub_18.x/nodistro/repo/nodesource-release-nodistro-1.noarch.rpm -y
					sudo yum install nodejs -y --setopt=nodesource-nodejs.module_hotfixes=1
					#
					# NODE_MAJOR=20 --> Label only, do not need to uncomment, can uncomment below if wishing to activate
					# sudo yum install https://rpm.nodesource.com/pub_20.x/nodistro/repo/nodesource-release-nodistro-1.noarch.rpm -y
					# sudo yum install nodejs -y --setopt=nodesource-nodejs.module_hotfixes=1
					version_test_by_distro_function
				elif [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" || "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ]] && [[ "$what_architecture" == "Architecture: arm64" || "$what_architecture" == "Architecture: arm" ]]; then
					# For Debian systems with ARM processors. Not Raspbian specific. Also, see the "SCRIPT DEPRECATION WARNING" in the 'else' section below in regard to change of setup. 
					echo "Adding Node.JS repository to get latest version . . ."
					echo
					
					sudo curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
					echo
					echo "Installing/updating Node.JS . . ."
					sudo $package_install_program nodejs # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
					echo
					echo "Installed version is . . ."
					node -v
					echo
					version_test_by_distro_function
				else
					#						SCRIPT DEPRECATION WARNING                   
					#	This script, located at https://deb.nodesource.com/setup_X, used to
					#	install Node.js is deprecated now and will eventually be made inactive.
					#
					#	Please visit the NodeSource distributions Github and follow the
					#	instructions to migrate your repo.
					#	https://github.com/nodesource/distributions
					#
					#	The NodeSource Node.js Linux distributions GitHub repository contains
					#	information about which versions of Node.js and which Linux distributions
					#	are supported and how to install it.
					#	https://github.com/nodesource/distributions
					#						SCRIPT DEPRECATION WARNING
					echo "Adding Node.JS repository to get latest version . . ."
					echo
					sudo curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
					sleep 20
					echo
					echo "Installing/updating Node.JS . . ."
					sudo $package_install_program nodejs # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
					echo
					echo "Installed version is . . ."
					node -v
					echo
					version_test_by_distro_function
				fi
			fi
			if [[ "$test_installation_status" = "Not Installed" ]]; then
				echo "${bold}${red}Failed to install . . .${normal}"
				echo "${bold}${red}The web admin interface will not work!${normal}"
				sleep 30
			elif [[ "$test_version" < "$minimum_versionnodejs" ]]; then
				echo "${bold}${red}Failed to update past minimum version $minimum_versionnodejs . . .${normal}"
				echo "${bold}${red}The web admin interface will not work!${normal}"
				sleep 30
			elif [[ "$test_version" = "$minimum_versionnodejs" ]]; then
				echo "${bold}${red}Meets minimum version $minimum_versionnodejs requirements for Node . . .${normal}"
				echo "${bold}${green}The web admin interface should work!${normal}"
				sleep 5
			elif [[ "$test_version" > "$minimum_versionnodejs" ]]; then
				echo "${bold}${green}Updated successfully past minimum version $minimum_versionnodejs . . .${normal}"
				echo "${bold}${green}The web admin interface should work!${normal}"
				sleep 5
			else
				echo "This message should not be visible."
				echo
				echo "Package nodejs installed version: "
				node -v
				sleep 10
			fi
		}

		# versionnodejs=$( apt-cache policy nodejs | grep "Installed:" | cut -c 14-20 )
		package_name=nodejs
		version_test_by_distro_function
		minimum_versionnodejs=14.0.0
		if [[ "$test_installation_status" = "Not Installed" ]]; then
			echo "Preparing to install package node.js . . ."
			echo Version installed is $test_version . . .
			echo
			install_or_update_nodejs
		elif [[ "$test_version" < "$minimum_versionnodejs" ]]; then
			echo "Preparing to update package node.js . . ."
			echo Version installed is $test_version . . .
			echo
			install_or_update_nodejs
		else
			echo "Package nodejs already installed."
			echo Version installed is $test_version . . .
			echo Status: $test_installation_status
			echo
			node -v
			# install_or_update_nodejs
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		function install_or_update_npm () {
			if [ "$what_linux_name" != "NAME=\"Ubuntu\"" ]; then
				# You do not need to install npm when installing nodejs from nodesource, as it already includes npm.
				# https://askubuntu.com/questions/899756/cant-install-npm-unable-to-correct-problems-you-have-held-broken-packages
				echo "${bold}${cyan}*****Checking for NPM installation . . . (Install 2 of 2) *****${normal}"
				echo
				echo "Installing package npm . . ."
				echo
				app_does_not_exist=0
				app_installed=0
				app_not_installed=0
				if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
					progs=(npm);
					package_install_status_check_function
					sudo $package_install_program npm # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
				elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
					progs=(nodejs-npm);
					package_install_status_check_function
					sudo $package_install_program nodejs-npm # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
				else
					:
				fi
			fi
		}
		package_name=npm
		test_side_load_installation_status="Installed"
		command -v $package_name > /dev/null 2>&1 || type $package_name > /dev/null 2>&1 || hash $package_name 2>/dev/null || test_side_load_installation_status="Not Installed"
		if [[ "$test_side_load_installation_status" = "Not Installed" ]]; then
			install_or_update_npm
		elif [[ "$test_side_load_installation_status" = "Installed" ]]; then
			echo "${bold}${cyan}*****Checking for NPM installation . . . (Install 2 of 2) *****${normal}"
			echo
			echo "Skipping installation of NPM, already installed with NodeJS and gets broken "
			echo "packages message on install attempt in Ubuntu."
		else
			echo "This message should not be visible for NPM."
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${cyan}*****Downloading Web Admin interface . . . (Step 1 of 6) *****${normal}"
		echo
		cd "$dp_install_loc/Programs"
		if [[ -d  "$dp_install_loc/Programs/dpwebadmin" ]]; then
			# ---------------------------------------------------------------------------------
			# Testing new concept - commented out temporarily
				# echo "Drawpile Web Admin already pulled, changing directory..."
				# cd "$dp_install_loc/Programs/dpwebadmin/src"
			# echo Download detected of Drawpile Admin, removing content before downloading.
			# rm -f -R "$dp_install_loc/Programs/dpwebadmin"
			# ---------------------------------------------------------------------------------
			cd dpwebadmin
			
			git config --global --add safe.directory "$dp_install_loc/Programs/dpwebadmin"
			# Updates local repo
			git fetch
			
			# Checks local commit info
			git_local_commit=$( git rev-parse HEAD )
			# Checks remote commit info
			git_remote_commit=$( git rev-parse '@{u}' )
			
			if [[ "$git_local_commit" == "$git_remote_commit" ]] ; then
				git_repo_status=currently_up_to_date
			else
				# Resets any changes made to the local code so it matches the remote code. 
				git reset --hard origin/master
				git_repo_status=out_of_date
			fi
		else
			git_repo_status=out_of_date
			echo Downloading dp web admin from github.
			echo
			git clone https://github.com/drawpile/dpwebadmin.git
			cd "$dp_install_loc/Programs/dpwebadmin"
			# Doesn't work
			# drawpile_dp_webadmin_version_with_git=$( git describe )
			# sudo sed -i '\!^drawpile_dp_webadmin_version_with_git =!{h;s!=.*!= '"$drawpile_dp_webadmin_version_with_git"'!};${x;\!^$!{s!!drawpile_dp_webadmin_version_with_git = '"$drawpile_dp_webadmin_version_with_git"'!;H};x}' $drawpile_configuration_values_file
			# git describe - fatal: No names found, cannot describe anything.
		fi
		read_stored_completed_status_value_query=$( grep -m 1 "drawpile_web_admin_installation_status = " "$drawpile_completed_successfully_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
		if [[ "$git_repo_status" == "out_of_date" || ( "$read_stored_completed_status_value_query" == "no" || "$read_stored_completed_status_value_query" == "" ) ]] ; then
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			echo "${bold}${yellow}Web Admin interface is not installed yet or not up to date.${normal}"
			echo
			if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]]; then
				# git checkout -f dev-2.2
				git checkout -f feature/qtwasm
				git pull
				echo
			fi
			echo "${bold}${cyan}*****Generate .env for Web Admin interface . . . (Step 2 of 6) *****${normal}"
			echo
			if [[ $drawpile_srv_version_stripped = "2.2.0" || $drawpile_srv_version_stripped > "2.2.0" ]]; then
				cat <<EOF | tee -a .env.local >/dev/null
PUBLIC_URL=/admin
REACT_APP_BASENAME=/admin
REACT_APP_APIROOT=/admin/api
REACT_APP_AUTHMODE=basic
EOF
			else
				cat <<EOF | tee -a .env.local >/dev/null
REACT_APP_BASENAME=/admin
REACT_APP_APIROOT=/admin/api
REACT_APP_AUTHMODE=basic
EOF
			fi
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			echo "${bold}${cyan}*****Preparing package.json for Web Admin interface . . . (Step 3 of 6) *****${normal}"
			echo
			if [[ ! -e "$dp_install_loc/Programs/dpwebadmin/package-orig.json" ]]; then
				cp "$dp_install_loc/Programs/dpwebadmin/package.json" "$dp_install_loc/Programs/dpwebadmin/package-orig.json"
			fi
			sudo sed -i "s|\"proxy\": \"http://localhost:27780/\"|\"proxy\": \"http://localhost:27780/\",\n  \"homepage\": \"/admin/\"|g" "$dp_install_loc/Programs/dpwebadmin/package.json"
			# Olde commands
			# mv package.json package-orig.json
			# node -p "JSON.stringify({...require('./package-orig.json'), homepage: '/admin/'}, 0, 2)" > package.json
			#
			# node -p "JSON.stringify({...require('./package-orig.json'), homepage: '.'}, 0, 2)" > package.json
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			echo "${bold}${cyan}*****Building for Web Admin interface . . . (Step 4 of 6) *****${normal}"
			echo
			# if [ "$no_swap_available" == "true" ]; then
			if (( "$swap_total" == "0" )) || [ "$no_swap_available" == "true" ] || (( "$mem_total" <= "512" )); then
				echo This step may take about an hour to complete. Please be patient.
				echo
				echo '--------------------------------------------------------------------------------'
				echo "Running Command: NODE_OPTIONS=--max_old_space_size=1024 npm install"
				echo '--------------------------------------------------------------------------------'
				if ! NODE_OPTIONS=--max_old_space_size=1024 npm install; then
					sudo sed -i '\!^drawpile_web_admin_installation_status =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!drawpile_web_admin_installation_status = '"no"'!;H};x}' $drawpile_completed_successfully_values_file
					command_die "${bold}${red}Command 'npm install' failed (slow mode).${normal}"
				else
					sudo sed -i '\!^drawpile_web_admin_installation_status =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!drawpile_web_admin_installation_status = '"no"'!;H};x}' $drawpile_completed_successfully_values_file
				fi
			else
				# elif [ "$no_swap_available" == "false" ]; then
				echo This step may take a while to complete. Please be patient.
				echo
				echo '--------------------------------------------------------------------------------'
				echo "Running Command: npm install"
				echo '--------------------------------------------------------------------------------'
				if ! npm install; then
					sudo sed -i '\!^drawpile_web_admin_installation_status =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!drawpile_web_admin_installation_status = '"no"'!;H};x}' $drawpile_completed_successfully_values_file
					command_die "${bold}${red}Command 'npm install' failed.${normal}"
				else
					sudo sed -i '\!^drawpile_web_admin_installation_status =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!drawpile_web_admin_installation_status = '"no"'!;H};x}' $drawpile_completed_successfully_values_file
				fi
			fi
			# node_return_status_01=$?
			# echo
			# 134 - FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory
			# echo Return status of command: $node_return_status_01
			echo
			echo '--------------------------------------------------------------------------------'
			echo "Running Command: NODE_OPTIONS=--openssl-legacy-provider npm run build"
			echo '--------------------------------------------------------------------------------'
			if ! NODE_OPTIONS=--openssl-legacy-provider npm run build; then
				command_die "${bold}${red}Command 'NODE_OPTIONS=--openssl-legacy-provider npm run build' failed${normal}"
			fi
			# node_return_status_02=$?
			# echo
			# 254 - Could not read package.json: Error: ENOENT: no such file or directory, open '/home/ubuntu/package.json'
			# echo Return status of command: $node_return_status_02
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			echo "${bold}${cyan}*****Editing and Moving to root web directory . . . (Step 5 of 6)*****${normal}"
			echo
			sudo sed -i -e "s/<title>Drawpile Server Admin<\/title>/<title>Drawpile Server Admin - $hostname<\/title>/g" "$dp_install_loc/Programs/dpwebadmin/build/index.html"
			if [[ -d "/var/www/html/drawpile/admin-old" ]]; then
				sudo rm -rf /var/www/html/drawpile/admin-old
				if [[ -d "/var/www/html/drawpile/admin" ]]; then
					sudo mv /var/www/html/drawpile/admin /var/www/html/drawpile/admin-old
				fi
			elif [[ -d "/var/www/html/drawpile/admin" ]]; then
				sudo mv /var/www/html/drawpile/admin /var/www/html/drawpile/admin-old
			else
				:
				# Do nothing as no error was detected.
				# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
			fi
			sudo mv build /var/www/html/drawpile/admin
			sudo restorecon -R /var/www/html/drawpile/
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			echo "${bold}${cyan}*****Reloading NGINX to see new data files . . . (Step 6 of 6)*****${normal}"
			echo
			nginx_reload_function
		else
			echo "${bold}${green}Web Admin interface is up to date, skipping step 2 through 6.${normal}"
		fi
		# https://create-react-app.dev/
		# npx create-react-app builddpwebadmin
		# npm install -g npm@9.5.1
		# cd "$dp_install_loc/Programs/dpwebadmin/dpwebadmin"
		# npm start
<<comment_EOF_delete
	if [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ] && [ "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ] && [ "$nodejs_or_red" == "1" ]; then
		# https://nodered.org/docs/user-guide/runtime/securing-node-red
		# http://stevesnoderedguide.com/securing-node-red-ssl
		# https://flowforge.com/blog/2023/04/securing-node-red-in-production/
		echo "${bold}${cyan}*****Cleanup on Raspbian for Desktop . . . (Final Step)*****${normal}"
		echo
		sudo /usr/bin/node-red-stop
		# sudo npm remove -g node-red
		sudo npm remove -g node-red node-red-admin
		sudo rm /lib/systemd/system/nodered.service
		sudo npm uninstall node-red-dashboard
		# nodejs_warning_raspbian_for_desktop_x86_64_only
		# echo
		# pause
		# echo
		# echo "Running tool to update login info for NodeRed to better secure the default installation."
		# echo
		# node-red admin init
		echo
	fi
comment_EOF_delete
		echo
		echo '--------------------------------------------------------------------------------'
		echo	
		echo "${bold}${cyan}*****Downloading New Web Admin interface . . . (Step 1 of 4) *****${normal}"
		echo
		cd "$dp_install_loc/Programs"
		if [[ -d  "$dp_install_loc/Programs/drawpile-admin-webui" ]]; then
			# ---------------------------------------------------------------------------------
			# Testing new concept - commented out temporarily
			# echo "Drawpile Web Admin already pulled, changing directory..."
			# echo Download detected of new drawpile-admin-webui, removing content before downloading.
			# rm -f -R "$dp_install_loc/Programs/drawpile-admin-webui"
			# ---------------------------------------------------------------------------------
			cd drawpile-admin-webui
			
			git config --global --add safe.directory "$dp_install_loc/Programs/drawpile-admin-webui"
			# Updates local repo
			git fetch
			
			# Checks local commit info
			git_local_commit=$( git rev-parse HEAD )
			# Checks remote commit info
			git_remote_commit=$( git rev-parse '@{u}' )
			
			if [[ "$git_local_commit" == "$git_remote_commit" ]] ; then
				git_repo_status=currently_up_to_date
			else
				# Resets any changes made to the local code so it matches the remote code. 
				git reset --hard origin/main
				git_repo_status=out_of_date
			fi
		else
			git_repo_status=out_of_date
			echo Downloading new drawpile-admin-webui from github.
			echo
			git clone https://github.com/drawpile/drawpile-admin-webui
			cd "$dp_install_loc/Programs/drawpile-admin-webui"
		fi
		read_stored_completed_status_value_query=$( grep -m 1 "drawpile_new_web_admin_installation_status = " "$drawpile_completed_successfully_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
		if [[ "$git_repo_status" == "out_of_date" || ( "$read_stored_completed_status_value_query" == "no" || "$read_stored_completed_status_value_query" == "" ) ]] ; then
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			echo "${bold}${yellow}New Web Admin interface is not installed yet or not up to date.${normal}"
			echo
			echo "${bold}${cyan}*****Building for New Web Admin interface . . . (Step 2 of 4) *****${normal}"
			echo
			# if [ "$no_swap_available" == "true" ]; then
			if (( "$swap_total" == "0" )) || [ "$no_swap_available" == "true" ] || (( "$mem_total" <= "512" )); then
				echo This step may take about an hour to complete. Please be patient.
				echo
				echo '--------------------------------------------------------------------------------'
				echo "Running Command: NODE_OPTIONS=--max_old_space_size=1024 npm install"
				echo '--------------------------------------------------------------------------------'
				if ! NODE_OPTIONS=--max_old_space_size=1024 npm install; then
					sudo sed -i '\!^drawpile_new_web_admin_installation_status =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!drawpile_new_web_admin_installation_status = '"no"'!;H};x}' $drawpile_completed_successfully_values_file
					command_die "${bold}${red}Command 'npm install' failed (slow mode).${normal}"
				else
					sudo sed -i '\!^drawpile_new_web_admin_installation_status =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!drawpile_new_web_admin_installation_status = '"yes"'!;H};x}' $drawpile_completed_successfully_values_file
				fi
			else
				# elif [ "$no_swap_available" == "false" ]; then
				echo This step may take a while to complete. Please be patient.
				echo
				echo '--------------------------------------------------------------------------------'
				echo "Running Command: npm install"
				echo '--------------------------------------------------------------------------------'
				if ! npm install; then
					sudo sed -i '\!^drawpile_new_web_admin_installation_status =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!drawpile_new_web_admin_installation_status = '"no"'!;H};x}' $drawpile_completed_successfully_values_file
					command_die "${bold}${red}Command 'npm install' failed.${normal}"
				else
					sudo sed -i '\!^drawpile_new_web_admin_installation_status =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!drawpile_new_web_admin_installation_status = '"yes"'!;H};x}' $drawpile_completed_successfully_values_file
				fi
			fi
			echo
			echo '--------------------------------------------------------------------------------'
			echo "Running Command: npm run build -- \"https://$hostname/listing/admin/\""
			echo '--------------------------------------------------------------------------------'
			if ! npm run build -- "https://$hostname/listing/admin/"; then
				sudo sed -i '\!^drawpile_new_web_admin_installation_status =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!drawpile_new_web_admin_installation_status = '"no"'!;H};x}' $drawpile_completed_successfully_values_file
				command_die "${bold}${red}Command 'npm run build -- \"https://$hostname/listing/admin/\"' failed${normal}"
			else
				sudo sed -i '\!^drawpile_new_web_admin_installation_status =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!drawpile_new_web_admin_installation_status = '"yes"'!;H};x}' $drawpile_completed_successfully_values_file
			fi
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			echo "${bold}${cyan}*****Moving to NGINX web directory . . . (Step 3 of 4)*****${normal}"
			echo
			if [[ -d "/var/www/html/drawpile/admin_ui_old" ]]; then
				sudo rm -rf /var/www/html/drawpile/admin_ui_old
				if [[ -d "/var/www/html/drawpile/admin_ui" ]]; then
					sudo mv /var/www/html/drawpile/admin_ui /var/www/html/drawpile/admin_ui_old
				fi
			elif [[ -d "/var/www/html/drawpile/admin_ui" ]]; then
				sudo mv /var/www/html/drawpile/admin_ui /var/www/html/drawpile/admin_ui_old
			else
				:
				# Do nothing as no error was detected.
				# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
			fi
			sudo mv dist /var/www/html/drawpile/admin_ui
			sudo restorecon -R /var/www/html/drawpile/
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			echo "${bold}${cyan}*****Reloading NGINX to see new data files . . . (Step 4 of 4)*****${normal}"
			echo
			nginx_reload_function
		else
			echo "${bold}${green}New Web Admin interface is up to date, skipping step 2 through 4.${normal}"
		fi
	else
		echo "This option shouldn't be visible for web admin: prebuilt or build ..."
	fi
elif [ "$ssl_encryption_config" == "3" ]; then
	echo "${bold}${red}List server needs HTTPS in order to work.${normal}"
	echo "${bold}${red}Skipping List Server setup.${normal}"
	echo
	echo "Waiting 30 seconds before continuing."
	echo
	sleep 30
else
	echo "${bold}${red}This message should not be visible,${normal}"
	echo "${bold}${red}regarding list server and web admin.${normal}"
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'

if [[ "$ssl_encryption_config" != "3" ]]; then
	function fail2ban_nginx_http_auth_and_ssdh () {
		cat <<EOF | sudo tee /etc/fail2ban/jail.local >/dev/null
[DEFAULT]
ignoreip  = 127.0.0.1/8
action    = %(action_)s
bantime   = 10m
maxretry  = 15

[nginx-http-auth]
enabled   = true

[sshd]
enabled   = true
EOF
		wait $!
	}

	function fail2ban_nginx_http_auth () {
		cat <<EOF | sudo tee /etc/fail2ban/jail.local >/dev/null
[DEFAULT]
ignoreip  = 127.0.0.1/8
action    = %(action_)s
bantime   = 10m
maxretry  = 15

[nginx-http-auth]
enabled   = true

[sshd]
enabled   = false
EOF
		wait $!
	}

	echo
	echo "${bold}${cyan}***** Configure Fail2Ban . . . *****${normal}"
	echo 
	variable_to_read_1="fail2ban_status"
	variable_to_read_2=""
	variable_to_read_3=""

	value_description_1="Fail2Ban installation: This is intended for blocking abuse of trying to get into"
	value_description_2="web admin interface. It monitors log files and temporarily (or permanently) bans"
	value_description_3="failures to prevent brute force attacks against the server."
	value_description_4=""
	value_description_5=""

	read_stored_config_value_query_function
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing value and moving on."
		fail2ban_status=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		echo "This is intended for blocking abuse of trying to get into web admin interface."
		echo "The package description is included below, but this installation will not support"
		echo "email notification at this time."
		echo
		echo "Description: ban hosts that cause multiple authentication errors"
		echo
		echo "  Fail2ban monitors log files (e.g. /var/log/auth.log, /var/log/apache/access.log)" 
		echo "  and temporarily or persistently bans failure-prone addresses by updating "
		echo "  existing firewall rules.  Fail2ban allows easy specification of different actions"
		echo "  to be taken such as to ban an IP using iptables or hostsdeny rules, or simply to"
		echo "  send a notification email."
		echo
		echo "This is highly recommended for use. The default configuration will ban users that"
		echo "fail authentication 15 times for 10 minutes." 
		echo
		echo "${bold}${cyan}Would you like to protect your server against unauthorized access attempts?${normal}"
		while :; do
			read -r -p "${bold}${cyan}Without quotes, type 'yes' or 'no':${normal} " fail2ban_status
			echo
			if [ "$fail2ban_status" == "yes" ] || [ "$fail2ban_status" == "YES" ] || [ "$fail2ban_status" == "Yes" ] || [ "$fail2ban_status" == "Y" ] || [ "$fail2ban_status" == "y" ] || [ "$fail2ban_status" == "N" ] || [ "$fail2ban_status" == "n" ] || [ "$fail2ban_status" == "no" ] || [ "$fail2ban_status" == "NO" ] || [ "$fail2ban_status" == "No" ]; then
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done
		echo
		if [ "$fail2ban_status" == "yes" ] || [ "$fail2ban_status" == "YES" ] || [ "$fail2ban_status" == "Yes" ] || [ "$fail2ban_status" == "Y" ] || [ "$fail2ban_status" == "y" ]; then
			python_version=$( python --version | awk '{ print $2 }' | perl -0777 -ne '/([0-9]+\.[0-9]+)/; print $1' )

			function fail2ban_typical_system_installation () {
				sudo $package_install_program fail2ban # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
				echo
				if [ -e "/etc/fail2ban/jail.d/defaults-debian.conf" ]; then
					# Renaming file has effect of disabling SSDH auth checks, without a log set to be monitored
					# the service will fail to run.
					echo "Detected '/etc/fail2ban/jail.d/defaults-debian.conf' ..."
					echo "Renaming to 'defaults-debian.conf.bak' to ensure service runs."
					sudo mv /etc/fail2ban/jail.d/defaults-debian.conf /etc/fail2ban/jail.d/defaults-debian.conf.bak
					echo
					# Apparent file contents are:
					# [sshd]
					# enabled = true
				fi
				if [ "`systemctl is-enabled fail2ban.service`" = "disabled" ]; then
					echo "Enabling Fail2ban service."
					sudo systemctl enable fail2ban.service
					echo
				fi
				if [ "`systemctl is-active fail2ban.service`" = "inactive" ]; then
					echo "Starting Fail2ban service."
					sudo systemctl start --now fail2ban.service
					echo
				fi
				if [ "`systemctl is-failed fail2ban.service`" = "failed" ]; then
					echo "Restarting Fail2ban service."
					sudo systemctl restart fail2ban.service
					echo
				fi
				echo
			}

			if [[ "$python_version" == "3.12" || "$python_version" == "3.13" ]]; then
				if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && 
				[[ ( "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Forty)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Workstation Edition)\"" ) || ( "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 41 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 41 (Forty One)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 41 (Workstation Edition)\"" ) ]]; then
					echo "${bold}${red}Executing manual install process, Python 3.12/3.13 causes issues in Fedora currently.${normal}"
					sudo $package_install_program python3-inotify python3-systemd
				elif [ "$what_linux_name" == "NAME=\"Ubuntu\"" ]; then
					echo "${bold}${red}Executing manual install process, Python 3.12/3.13 causes issues in Ubuntu currently.${normal}"
					sudo $package_install_program python3-pyinotify python3-systemd
				else
					echo "${bold}${red}Executing manual install process, Python 3.12/3.13 causes issues currently.${normal}"
					sudo $package_install_program python3-pyinotify python3-systemd
				fi
				echo
				sudo mkdir -p -v "/tmp/f2b"
				cd /tmp/f2b
				if [ -e "/etc/fail2ban/jail.local" ]; then
					if [ -e "/tmp/f2b/jail.local" ]; then
						rm -f "/tmp/f2b/jail.local"
					fi
					cp "/etc/fail2ban/jail.local" "/tmp/f2b"
				fi
				echo
				# if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
				if [ "$what_linux_flavor" == "PRETTY_NAME=\"Ubuntu 24.04 LTS\"" ]; then
					echo "${bold}${yellow}Executing manual install - debian based.${normal}"
					# Manually install - Debian based
					#     https://github.com/fail2ban/fail2ban/wiki/How-to-install-or-upgrade-fail2ban-manually

					# cd /tmp/
					# 1) download deb package and signature:
					wget -O fail2ban.deb https://github.com/fail2ban/fail2ban/releases/download/1.1.0/fail2ban_1.1.0-1.upstream1_all.deb
					wget -O fail2ban.deb.asc https://github.com/fail2ban/fail2ban/releases/download/1.1.0/fail2ban_1.1.0-1.upstream1_all.deb.asc

					# 2) check signature (if you want to be sure file is unmodified):
					# gpg --verify fail2ban.deb.asc fail2ban.deb

					# 3) view details of the package:
					# dpkg -I fail2ban.deb

					# 4) to ensure the upgrade run gentler (protocol of previous version may be incompatible), stop fail2ban before install:
					# using service:
					sudo service fail2ban stop
					# using client:
					sudo fail2ban-client stop

					# 5a) either install package using dpkg (standalone package, don't regard dependencies):
					sudo dpkg -i fail2ban.deb
					# if the package introduces some "broken" dependencies (I don't think so in case of fail2ban which has few dependencies),
					# to fix the unmet dependency issue, run this:
					sudo apt -f install

					# 5b) alternatively install package using gdebi (that will take care of installation of dependencies):
					# sudo gdebi fail2ban.deb
					# if you want to check anyway whether there are some broken packages and fix them automatically, you can run:
					# sudo apt -f install
					
					echo
					if [ -e "/tmp/f2b/jail.local" ]; then
						mv -f "/tmp/f2b/jail.local" "/etc/fail2ban"
					fi
					sudo service enable fail2ban.service
					sudo service start --now fail2ban.service
				else
					echo "Python $python_version is installed. Some systems may have problems with"
					echo "installing Fail2Ban properly. It's recommended to try a regular"
					echo "installation before attempting manual, read the log output "
					echo "carefully. If it fails or doesn't appear to work correctly "
					echo "(can test by entering the incorrect username and/or password "
					echo "to log into one of the web admin interfaces 15 times in less "
					echo "than 10 minutes. The 16th attempt should not load the web "
					echo "page for 10 minutes before you can try again."
					echo ""
					echo "Would you like to try a manual install?"
					echo ""
					echo "1 - yes - manual install"
					echo "2 - no  - try regular installation."
					echo ""
					while :; do
						read -r -p "${bold}${cyan}Without quotes, type '1' or '2':${normal} " fail2ban_manual_install_query
						echo
						if [ "$fail2ban_manual_install_query" == "1" ] || [ "$fail2ban_manual_install_query" == "2" ]; then
							break
						else
							echo
							echo "${bold}${red}Invalid input selection, try again.${normal}"
							echo
							echo ----------------------------------------------------------------------------------
							echo
						fi
					done
					if [ "$fail2ban_manual_install_query" == "1" ]; then
						echo "${bold}${yellow}Executing manual install with tar file.${normal}"
						# Manually install - Debian based
						#     https://github.com/fail2ban/fail2ban/wiki/How-to-install-or-upgrade-fail2ban-manually
						# Release 1.1.0 - 2024-04-05
						#     https://github.com/fail2ban/fail2ban/releases/tag/1.1.0
						sudo $wget_or_wget2_quiet_progress -O 1.1.0.tar.gz https://github.com/fail2ban/fail2ban/archive/refs/tags/1.1.0.tar.gz
						sudo tar vzxf 1.1.0.tar.gz
						cd fail2ban-1.1.0
						sudo service fail2ban stop --now
						
						sudo python setup.py install --without-tests
						sudo cp ./build/fail2ban.service /etc/systemd/system/fail2ban.service
						sudo systemctl enable fail2ban
						if [ -e "/tmp/f2b/jail.local" ]; then
							mv -f "/tmp/f2b/jail.local" "/etc/fail2ban"
						fi
						sudo fail2ban-client --test
						sudo service fail2ban start --now
					elif [ "$fail2ban_manual_install_query" == "2" ]; then
						fail2ban_typical_system_installation
					else
						echo "This message should not be visible for fail2ban manual installation."
						fail2ban_typical_system_installation
					fi
				fi
			else
				fail2ban_typical_system_installation
			fi
			echo
			echo "Displaying Status of Fail2ban service."
			systemctl status fail2ban.service --no-pager -l
			echo
			echo
			if [ "$local_or_remote" == "Remote" ]; then
				echo
				echo "${bold}${cyan}***** Configure Fail2Ban for SSH or not . . . *****${normal}"
				echo
				echo "Script is running through remote SSH. You can choose to enable Fail2Ban to protect"
				echo "against unauthorized access via SSH if you like, but this may fail if the default"
				echo "log location is incorrect."
				echo
				echo "As long as username and password authentication is disabled via this script, this"
				echo "should be safe to leave unprotected via Fail2Ban (until I figure out how to make"
				echo "this smarter)."
				echo
				echo "Configure Fail2Ban Options: /etc/fail2ban/jail.local"
				echo "1 - NGINX HTTPD Auth (Recommended)"
				echo "2 - NGINX HTTPD Auth and SSHD"
				while :; do
					read -r -p "${bold}${cyan}Please type 1 or 2:${normal} " fail2ban_remote_config
					echo
					if [ "$fail2ban_remote_config" == "1" ] || [ "$fail2ban_remote_config" == "2" ]; then
						break
					else
						echo
						echo "${bold}${red}Invalid input selection, try again.${normal}"
						echo
						echo ----------------------------------------------------------------------------------
						echo
					fi
				done
				echo
				if [ "$fail2ban_remote_config" == "1" ]; then
					fail2ban_nginx_http_auth
				elif [ "$fail2ban_remote_config" == "2" ]; then
					fail2ban_nginx_http_auth_and_ssdh
				else
					echo "${bold}${red}This message for Fail2Ban choice of jail.local should not be visible.${normal}"
				fi
			elif [ "$local_or_remote" == "Local" ]; then
				fail2ban_nginx_http_auth
			else
				echo "${bold}${red}This message shouldn't be visible for Fail2Ban - Remote or Local.${normal}"
			fi
			# sudo nano /etc/fail2ban/jail.local
			sleep 3
			sudo service fail2ban restart
			sleep 3
			echo
			sudo fail2ban-client status
			# For more detailed status:
			# sudo fail2ban-client status nginx-http-auth
			#
			# To ban an IP address that was blocked.
			# sudo fail2ban-client set nginx-http-auth unbanip IP-ADDRESS-here
		else
			echo "${bold}${yellow}Skipping installation of Fail2Ban.${normal}"
		fi
		echo
		sudo sed -i '\!^fail2ban_status =!{h;s!=.*!= '"$fail2ban_status"'!};${x;\!^$!{s!!fail2ban_status = '"$fail2ban_status"'!;H};x}' $drawpile_configuration_values_file
	else
		echo "${bold}${red}This message should not be visible for Fail2ban.${normal}"
	fi
else
	echo
	echo "${bold}${red}No SSL configured, no list server or web admin.${normal}"
	echo "${bold}${red}Fail2Ban is not necessary with no web server to support.${normal}"
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
if [ ! -z "$dp_install_loc_9_custom" ] && [[ -d "$dp_install_loc_9_custom" ]]; then
	echo "${bold}${cyan}Custom location set, action required.${normal}"
	echo 
	echo "${bold}${red}Changing permissions of directory to add group drawpileread.${normal}"
	sudo chown drawpileuser:drawpileread "$dp_install_loc_9_custom" -R
	echo
	echo "${bold}${red}Setting read-write-execute (775) chmod permissions ${normal}"
	echo "${bold}${red}for directory.${normal}"
	sudo chmod 775 "$dp_install_loc_9_custom" -R
	#
	# - https://stackoverflow.com/questions/68638028/members-of-group-cant-access-directory-in-linux
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
fi

echo "${bold}${cyan}***** Drawpile Server Startup Configuration . . .*****${normal}"
echo

sudo chmod 777 $app_installation_status_file
sudo chmod 777 $drawpile_configuration_values_file
# sudo adduser $current_username drawpileread
if [[ -e "/home/drawpileuser/cert.pem" ]]; then sudo chmod 700 /home/drawpileuser/cert.pem; fi
if [[ -e "/home/drawpileuser/key.pem" ]]; then sudo chmod 700 /home/drawpileuser/key.pem; fi
sudo chown drawpileuser:drawpileread /home/drawpileuser/ -R

variable_to_read_1="dp_srv_startup"
variable_to_read_2=""
variable_to_read_3=""

value_description_1="Enable socket activation or start drawpile-srv when the Raspberry Pi or"
value_description_2="server powers on?"
value_description_3=" "
value_description_4="${bold}${cyan}1 - Socket Activation - Recommended for Raspberry Pi${normal}"
value_description_5="${bold}${cyan}2 - Always on Service - Recommended for Remote Servers${normal}"

read_stored_config_value_query_function
if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	dp_srv_startup=$read_stored_config_value_query_1
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	echo 'Enable socket activation or start drawpile-srv when the Raspberry Pi or'
	echo 'server powers on?'
	echo
	echo "${bold}${cyan}1 - Socket Activation - Recommended for Raspberry Pi${normal}"
	echo '    This setting is less resource intensive on the server or Raspberry Pi,'
	echo '     as the drawpile server is only running when a user is connected.' 
	echo "${bold}${cyan}2 - Always on Service - Recommended for Remote Servers${normal}"
	echo '    The drawpile-srv starts on Server or Raspberry Pi power up, runs all'
	echo '    the time in the background.'
	echo
	while :; do
	read -r -p "${bold}${cyan}Enter a number and hit enter to continue${normal}: " dp_srv_startup
		[[ $dp_srv_startup =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $dp_srv_startup >= 1 && $dp_srv_startup <= 2)); then
			break
		else
			echo
			echo "${red}${bold}Invalid number selection, try again.${normal}"
			echo
		fi
	done
	echo
	if [ "$dp_srv_startup" == "1" ]; then
		sudo cp /etc/systemd/system/drawpile-srv01.service /etc/systemd/system/drawpile-srv.service
		wait $!
		echo
		echo 'Startup Option 1 - Socket Activation. Reloading systemctl and systemd.'
		sudo systemctl daemon-reload
		sudo systemctl restart systemd-modules-load
		wait $!
		echo
		sudo systemctl enable --now drawpile-srv.socket
		wait $!
		#Read more on systemd --> https://drawpile.net/help/server
	elif [ "$dp_srv_startup" == "2" ]; then
		sudo cp /etc/systemd/system/drawpile-srv02.service /etc/systemd/system/drawpile-srv.service
		wait $!
		echo
		echo 'Startup Option 2 - Always on Service. Reloading systemctl and systemd.'
		sudo systemctl daemon-reload
		sudo systemctl restart systemd-modules-load
		wait $!
		echo
		sudo systemctl enable --now drawpile-srv.service
		wait $!
		#Read more on systemd --> https://drawpile.net/help/server
	else
		echo "This message should not be visible."
	fi
	sudo sed -i '\!^dp_srv_startup =!{h;s!=.*!= '"$dp_srv_startup"'!};${x;\!^$!{s!!dp_srv_startup = '"$dp_srv_startup"'!;H};x}' $drawpile_configuration_values_file
	sleep 2
	if [ "$drawpile_monitor_installation_status" == "y" ] || [ "$drawpile_monitor_installation_status" == "Y" ] || [ "$drawpile_monitor_installation_status" == "yes" ] || [ "$drawpile_monitor_installation_status" == "YES" ] || [ "$drawpile_monitor_installation_status" == "Yes" ]; then
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${cyan}***** Enabling Drawpile-Monitor for Automatic Startup *****${normal}"
		echo
		echo "Startup was delayed to prevent the script from reporting server errors to"
		echo " Discord server."
		echo
		sudo systemctl enable drawpile-monitor.service
		sudo systemctl start --now drawpile-monitor.service 
		wait $!
		sudo systemctl status drawpile-monitor.service  --no-pager -l
		wait $!
	fi
else
	echo "This message should not be visible."
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}***** Configure Pi for Home Network Ad-Blocking . . . *****${normal}"
echo
if [[ ( "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" || "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ) && "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ]]; then
	variable_to_read_1="Pi_Hole_Status"
	variable_to_read_2=""
	variable_to_read_3=""

	value_description_1="Whole network ad blocking software."
	value_description_2=""
	value_description_3=""
	value_description_4=""
	value_description_5=""

	read_stored_config_value_query_function
	echo
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing value and moving on."
		Pi_Hole_Status=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		echo This is certainly outside the scope of the project, but I will include it as an
		echo installation option so users can choose to also use it, as there is special
		echo nginx configuration required to work simultaneously with Drawpile. A description
		echo of the software from github is included below:
		echo
		echo "${bold}${green}The Pi-hole® is a DNS sinkhole that protects your devices from unwanted content${normal}"
		echo "${bold}${green}without installing any client-side software.${normal}"
		echo
		echo "* Easy-to-install: our dialogs walk you through the simple installation process"
		echo "    in less than ten minutes"
		echo "* Resolute: content is blocked in non-browser locations, such as ad-laden mobile"
		echo "    apps and smart TVs"
		echo "* Responsive: seamlessly speeds up the feel of everyday browsing by caching DNS"
		echo "    queries"
		echo "* Lightweight: runs smoothly with minimal hardware and software requirements"
		echo "* Robust: a command-line interface that is quality assured for interoperability"
		echo "* Insightful: a beautiful responsive Web Interface dashboard to view and control"
		echo "    your Pi-hole"
		echo "* Versatile: can optionally function as a DHCP server, ensuring all your devices "
		echo "    are protected automatically"
		echo "* Scalable: capable of handling hundreds of millions of queries when installed "
		echo "     on server-grade hardware"
		echo "* Modern: blocks ads over both IPv4 and IPv6"
		echo "* Free: open source software that helps ensure you are the sole person in "
		echo "     control of your privacy"
		echo
		echo "${bold}${green}Read more on GitHub:${normal}"
		echo "     https://github.com/pi-hole/pi-hole/"
		echo
		echo "${bold}${red}***************************** IMPORTANT NOTE: *****************************${normal}"
		echo "     This script pipes code via curl to bash via the following command:"
		echo "          curl -sSL https://install.pi-hole.net | bash"
		echo "     Piping to bash is controversial, as it prevents you from reading code"
		echo "     that is about to run on your system."
		echo "     "
		echo "     However, I don't wish to put a ton of effort into maintaining this"
		echo "     additional set up, so please only proceed if you are comfortable"
		echo "     with it and trust the makers of Pi-Hole."
		echo "     "
		echo "     ${bold}${red}Read more on Pi-Hole's blog${normal}"
		echo "          https://pi-hole.net/blog/2016/07/25/curling-and-piping-to-bash/"
		echo "${bold}${red}***************************** IMPORTANT NOTE: *****************************${normal}"
		echo
		echo "${bold}${red}Would you like to install Pi-Hole? Note, you MUST type 'yes' without quotes${normal}"
		echo "${bold}${red}in order for the installation to work.${normal}"
		echo
		while :; do
			read -r -p "${bold}${red}Without quotes, type 'yes' or 'no':${normal} " Pi_Hole_Status
			echo
			if [ "$Pi_Hole_Status" == "yes" ] || [ "$Pi_Hole_Status" == "YES" ] || [ "$Pi_Hole_Status" == "Yes" ] || [ "$Pi_Hole_Status" == "no" ] || [ "$Pi_Hole_Status" == "NO" ] || [ "$Pi_Hole_Status" == "No" ]; then
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done
		if [ "$Pi_Hole_Status" == "yes" ] || [ "$Pi_Hole_Status" == "YES" ] || [ "$Pi_Hole_Status" == "Yes" ] ; then
			echo Command to run: "curl -sSL https://install.pi-hole.net | bash"
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			curl -sSL https://install.pi-hole.net | bash
			
			if [[ ! -e "/etc/dnsmasq.d/02-pidrawpile-custom-settings.conf" ]]; then
				# Maximum number of concurrent DNS queries reached
				# https://discourse.pi-hole.net/t/resolved-maximum-number-of-concurrent-dns-queries-reached/60970/2
				echo
				echo "Creating custom config to allow more concurrent DNS queries."
				
				cat <<EOF | sudo tee /etc/dnsmasq.d/02-pidrawpile-custom-settings.conf >/dev/null
#### EDIT SETTINGS
dns-forward-max=4096
min-cache-ttl=300
rebind-domain-ok=
#### END EDIT
EOF
				# pihole restartdns ---> https://www.reddit.com/r/pihole/comments/hx04e7/how_do_you_restart_pihole_in_ubuntu_server/
				sudo systemctl restart pihole-FTL.service
			fi	
			echo
			echo '--------------------------------------------------------------------------------'	
			echo
			echo Pi-Hole installed. Will start configuration to work with nginx.
			sleep 10
			sudo service lighttpd stop
			echo
			if [[ "$using_what_linux_kernel" == "4.14" ]] && [[ "$using_what_rasp_codename" == "stretch" ]] ; then
				echo Detected Raspbian Stretch, kernel 4.14. Setting appropriate packages for pi-hole.
				echo
				pihole_packages="nginx php7.3-fpm php7.3-cgi php7.3-xml php7.3-sqlite3 php7.3-intl apache2-utils"
			elif [[ "$using_what_linux_kernel" == "5.1" ]] && [[ "$using_what_rasp_codename" == "bullseye" ]] ; then
				echo Detected Raspbian Bullseye, kernel 5.1. Setting appropriate packages for pi-hole.
				echo
				pihole_packages="nginx php7.4-fpm php7.4-cgi php7.4-xml php7.4-sqlite3 php7.4-intl apache2-utils"
			elif [[ "$using_what_linux_kernel" == "6.1" ]] && [[ "$using_what_rasp_codename" == "bullseye" ]] ; then
				echo Detected Raspbian Bullseye, kernel 6.1. Setting appropriate packages for pi-hole.
				echo
				pihole_packages="nginx php7.4-fpm php7.4-cgi php7.4-xml php7.4-sqlite3 php7.4-intl apache2-utils"
			elif [[ "$using_what_linux_kernel" == "6.1" ]] && [[ "$using_what_rasp_codename" == "bookworm" ]] ; then
				echo Detected Raspbian Bookworm, kernel 6.1. Setting appropriate packages for pi-hole.
				echo
				pihole_packages="nginx php8.2-fpm php8.2-cgi php8.2-xml php8.2-sqlite3 php8.2-intl apache2-utils"
			else
				echo "${bold}${red}Unable to determine appropriate packages required for Pi-Hole${normal}"
				echo "${bold}${red}Here goes nothing... hoping for the best!${normal}"
				echo
				sleep 10
				
				pihole_packages="nginx php8.*-fpm php8.*-cgi php8.*-xml php8.*-sqlite3 php8.*-intl apache2-utils"
			fi
			echo
			app_does_not_exist=0
			app_installed=0
			app_not_installed=0
			progs=($pihole_packages);
			package_install_status_check_function
			sudo $package_install_program $pihole_packages # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
			sudo systemctl disable lighttpd
			sudo systemctl enable php7.4-fpm
			if [[ ! -e "/$dp_install_loc/default-sites-available-backup" ]]; then
				sudo cp /etc/nginx/sites-available/default "/$dp_install_loc/default-sites-available-backup"
			fi
			cat <<EOF | sudo tee /etc/nginx/sites-available/default >/dev/null
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    root /var/www/html;
    server_name _;
    autoindex off;

    index pihole/index.php index.php index.html index.htm;

    location / {
        expires max;
        try_files \$uri \$uri/ =404;
    }

    location ~ \.php\$ {
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME \$document_root/\$fastcgi_script_name;
        fastcgi_pass unix:/run/php/php7.4-fpm.sock;
        fastcgi_param FQDN true;
        auth_basic "Pi-Hole Restricted"; # For Basic Auth
        auth_basic_user_file /etc/nginx/passwords_pihole; # For Basic Auth
    }

    location /*.js {
        index pihole/index.js;
        auth_basic "Pi-Hole Restricted"; # For Basic Auth
        auth_basic_user_file /etc/nginx/passwords_pihole; # For Basic Auth
    }

    location /admin {
        root /var/www/html;
        index index.php index.html index.htm;
        auth_basic "Pi-Hole Restricted"; # For Basic Auth
        auth_basic_user_file /etc/nginx/passwords_pihole; # For Basic Auth
    }

    location ~ /\.ht {
        deny all;
    }
}
EOF
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			echo "${bold}${cyan}*****Configure Pi-Hole Admin Password in NGINX  . . . *****${normal}"
			echo
function nginx_username_and_password_pihole_function () {
	echo 'Please type in a username you wish to use for making changes to your Pi-Hole'
	echo 'server. If you make a mistake or need to update the server login, open a new'
	echo 'terminal window and type in the following:'
	echo
	echo 'sudo htpasswd -bc /etc/nginx/passwords_pihole USERNAME PASSWORD'
	echo 'sudo htpasswd -bc /etc/nginx/passwords_pihole "USERNAME" "PASSWORD"'
	echo
	echo
	echo 'You can change the web interface password itself with this command:'
	echo
	echo 'pihole -a -p'
	echo
	echo 'Where USERNAME can be any username you wish to use for login and PASSWORD'
	echo 'can be any password you like to use without spaces.'
	echo
	# login_credentials_length_minimum="14"
	while :; do
		read -r -p "Enter username                    : " nginx_username_pihole_1
		read -r -p "Enter username again              : " nginx_username_pihole_2
		pihole_username_length_1=${#nginx_username_pihole_1}
		pihole_username_length_2=${#nginx_username_pihole_2}
		echo
		if [[ "$nginx_username_pihole_1" != "$nginx_username_pihole_2" ]]; then
			echo "${bold}${red}Usernames entered do not match!${normal}"
			echo
		elif (( "$pihole_username_length_1" < "$login_credentials_length_minimum" || "$pihole_username_length_2" < "$login_credentials_length_minimum" )); then
			echo "${bold}${red}Less than minimum length required ($login_credentials_length_minimum).${normal}"
			echo "${bold}${red}Please try again.${normal}"
			echo
		else
			break
		fi
	done
	echo
	echo "${bold}${green}Your Pi-Hole Administration username is :${normal} $nginx_username_pihole_1"
	echo
	while :; do
		read -r -p "Enter password                    : " nginx_htpasswd_pihole_1
		read -r -p "Enter password again              : " nginx_htpasswd_pihole_2
		pihole_password_length_1=${#nginx_htpasswd_pihole_1}
		pihole_password_length_2=${#nginx_htpasswd_pihole_2}
		echo
		if [[ "$nginx_htpasswd_pihole_1" != "$nginx_htpasswd_pihole_2" ]]; then
			echo "${bold}${red}Passwords entered do not match!${normal}"
			echo
		elif (( "$pihole_password_length_1" < "$login_credentials_length_minimum" || "$pihole_password_length_2" < "$login_credentials_length_minimum" )); then
			echo "${bold}${red}Less than minimum length required ($login_credentials_length_minimum).${normal}"
			echo "${bold}${red}Please try again.${normal}"
			echo
		elif [[ ( "$nginx_username_pihole_1" == "$nginx_htpasswd_pihole_1" ) && "$nginx_reusing_login_and_password_status" == "disabled" ]]; then
			echo "${bold}${red}For security reasons, the username and password${normal}"
			echo "${bold}${red}cannot be the same. Please try again.${normal}"
			echo
		else
			break
		fi
	done
	echo
	echo "${bold}${green}Your Pi-Hole Administration password is :${normal} $nginx_htpasswd_pihole_1"
}
			if [[ ! -e "/etc/nginx/passwords_pihole" ]]; then
				if [ ! -z "$nginx_username_1" ] && [ ! -z "$nginx_htpasswd_1" ]; then
					echo "This step is to create a username for authentication for the Pi-Hole"
					echo "admin interface, as we don't want other people in the home network to"
					echo "change our black and whitelist."
					echo
					echo "Would you like to reuse the password you used earlier for web admin?"
					echo
					echo "This should be ok since it is on your local network and not exposed"
					echo "to the web (which is not a good idea to forward ports to make pi-hole"
					echo "accessible from outside of your home)."
					echo
					echo " ${cyan}1 - Reuse existing username(s) and password(s) from web admin${normal}"
					echo " ${cyan}2 - Generate separate password for Pi-Hole${normal}"
					echo
					while :; do
						read -r -p "${bold}${cyan}Please type 1 or 2:${normal} " nginx_username_and_password_reuse_for_pihole
						echo
						if (( "$nginx_username_and_password_reuse_for_pihole" >= "1" && "$nginx_username_and_password_reuse_for_pihole" <= "2" )) ; then
							break
						else
							echo
							echo "${bold}${red}Invalid input selection, try again.${normal}"
							echo
							echo ----------------------------------------------------------------------------------
							echo
						fi
					done
					
					if [ "$nginx_username_and_password_reuse_for_pihole" == "1" ]; then
						nginx_username_pihole_1=$nginx_username_1
						nginx_htpasswd_pihole_1=$nginx_htpasswd_1
					elif [ "$nginx_username_and_password_reuse_for_pihole" == "2" ]; then
						nginx_username_and_password_pihole_function
					else
						echo "This message should not be visible."
					fi
				else
					# It is HIGHLY unlikely this should ever trigger, since those variables should never be null. But I'm including it to be safe....
					nginx_username_and_password_pihole_function
				fi
				echo
				sudo htpasswd -bc /etc/nginx/passwords_pihole "$nginx_username_pihole_1" "$nginx_htpasswd_pihole_1"
			else
				echo "Pi-Hole password file already exists. Skipping password configuration."
			fi
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			sudo chown -R www-data:www-data /var/www/html
			sudo chmod -R 755 /var/www/html
			sudo usermod -aG pihole www-data
			if [[ "$using_what_linux_kernel" == "4.14" ]] && [[ "$using_what_rasp_codename" == "stretch" ]] ; then
				sudo service php7.3-fpm start
			elif [[ "$using_what_linux_kernel" == "5.1" ]] && [[ "$using_what_rasp_codename" == "bullseye" ]] ; then
				sudo service php7.4-fpm start
			elif [[ "$using_what_linux_kernel" == "6.1" ]] && [[ "$using_what_rasp_codename" == "bullseye" ]] ; then
				sudo service php7.4-fpm start
			elif [[ "$using_what_linux_kernel" == "6.1" ]] && [[ "$using_what_rasp_codename" == "bookworm" ]] ; then
				sudo service php8.2-fpm start
			else
				sudo service php8.2-fpm start
			fi
			sudo systemctl daemon-reload
			sudo systemctl restart systemd-modules-load
			sudo nginx -s reload
			sudo systemctl restart nginx.service
			systemctl status nginx.service --no-pager -l
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			if [[ -d "$option_loc_2" ]]; then
				if [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ] && [[ ! -e "$option_loc_2/Pi-Hole Local.desktop" ]]; then
					cat <<EOF | sudo tee "$option_loc_2/Pi-Hole Local.desktop" >/dev/null
[Desktop Entry]
Name=Pi-Hole Local
Comment=Pi-Hole Localhost Web Page
Terminal=false
Exec=/usr/bin/chromium %U http://localhost/admin
Type=Application
Icon=/var/www/html/admin/img/favicons/android-chrome-192x192.png
Name[en_GB]=Pi-Hole Local
EOF
				elif [[ ! -e "$option_loc_2/Pi-Hole Local.desktop" ]]; then
					echo Creating shortcut for Pi-Hole Local on Desktop.
					echo
					cat <<EOF | sudo tee "$option_loc_2/Pi-Hole Local.desktop" >/dev/null
[Desktop Entry]
Name=Pi-Hole Local
Comment=Pi-Hole Localhost Web Page
Terminal=false
Exec=chromium-browser http://localhost/admin
Type=Application
Icon=/var/www/html/admin/img/favicons/android-chrome-192x192.png
Name[en_GB]=Pi-Hole Local
EOF
					sudo chown $current_username "$option_loc_2/Pi-Hole Local.desktop"
					sudo chmod 754 "$option_loc_2/Pi-Hole Local.desktop"
				else
					echo Shortcut for Pi-Hole Local already exists on Desktop.
				fi
				
				if [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ] && [[ ! -e "$option_loc_2/Pi-Hole.desktop" ]]; then
					cat <<EOF | sudo tee "$option_loc_2/Pi-Hole.desktop" >/dev/null
[Desktop Entry]
Name=Pi-Hole
Comment=Pi-Hole Web Page
Terminal=false
Exec=/usr/bin/chromium %U http://pi.hole/admin
Type=Application
Icon=/var/www/html/admin/img/favicons/android-chrome-192x192.png
Name[en_GB]=Pi-Hole
EOF
				elif [[ ! -e "$option_loc_2/Pi-Hole.desktop" ]]; then
					echo Creating shortcut for Pi-Hole on Desktop.
					cat <<EOF | sudo tee "$option_loc_2/Pi-Hole.desktop" >/dev/null
[Desktop Entry]
Name=Pi-Hole
Comment=Pi-Hole Web Page
Terminal=false
Exec=chromium-browser http://pi.hole/admin
Type=Application
Icon=/var/www/html/admin/img/favicons/android-chrome-192x192.png
Name[en_GB]=Pi-Hole
EOF
					sudo chown $current_username "$option_loc_2/Pi-Hole.desktop"
					sudo chmod 755 "$option_loc_2/Pi-Hole.desktop"
				else
					echo Shortcut for Pi-Hole already exists on Desktop.
				fi
			fi
		elif [ "$Pi_Hole_Status" == "no" ] || [ "$Pi_Hole_Status" == "NO" ] || [ "$Pi_Hole_Status" == "No" ]; then
			echo Skipping installation of Pi-Hole.
		else
			echo Invalid selection option, skipping installation of Pi-Hole.
			Pi_Hole_Status=no
		fi
		sudo sed -i '\!^Pi_Hole_Status =!{h;s!=.*!= '"$Pi_Hole_Status"'!};${x;\!^$!{s!!Pi_Hole_Status = '"$Pi_Hole_Status"'!;H};x}' $app_installation_status_file
	else
		echo "This message should not be visible."
	fi
else
	echo "${bold}${red}Not on Raspberry Pi, skipping installation prompt for Pi-Hole.${normal}"
	Pi_Hole_Status=no
	sudo sed -i '\!^Pi_Hole_Status =!{h;s!=.*!= '"$Pi_Hole_Status"'!};${x;\!^$!{s!!Pi_Hole_Status = '"$Pi_Hole_Status"'!;H};x}' $app_installation_status_file
fi
<<comment_EOF
# https://docs.pi-hole.net/guides/webserver/nginx/
sudo service lighttpd stop
sudo $package_install_program nginx php7.3-fpm php7.3-cgi php7.3-xml php7.3-sqlite3 php7.3-intl apache2-utils
systemctl disable lighttpd
systemctl enable php7.3-fpm
comment_EOF
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}*****Configure Pi Monitoring . . . *****${normal}"
echo
if [[ ( "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" || "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ) && "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ]]; then
	variable_to_read_1="RPi_Monitor_Status"
	variable_to_read_2="RPi_Monitor_Dark_Mode"
	variable_to_read_3=""

	value_description_1="RPi-Monitor provides real time monitoring of embedded devices."
	value_description_2=" "
	value_description_3="Query 01: RPi_Monitor - 1 yes, 2 no"
	value_description_4="Query 02: Dark Mode - 1 yes, 2 no, 3 revert"

	read_stored_config_value_query_function
	echo
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing value and moving on."
		RPi_Monitor_Status=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		# samba_choice=1
		# ssl_encryption_config=1
		# dp_install_loc=/home/pi/Public
		# current_username=pi

		echo RPi-Monitor is an application designed to perform real time monitoring of 
		echo embedded devices. The development platform is a Raspberry Pi B.
		echo
		echo RPi-Monitor provides a lot of feature such as Embedded Web server, Alert 
		echo messaging, SNMP integration...
		echo
		echo For details, refer to keys features of RPi-Monitor in documentation.
		echo
		echo https://github.com/XavierBerger/RPi-Monitor
		echo
		while :; do
			read -r -p "${bold}${cyan}1 for yes, 2 for no${normal}: " RPi_Monitor_Status
			echo
			if [ "$RPi_Monitor_Status" == "1" ] || [ "$RPi_Monitor_Status" == "2" ]; then
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done
		if [ "$RPi_Monitor_Status" == "1" ]; then
			# Install notes
			# https://xavierberger.github.io/RPi-Monitor-docs/11_installation.html#installation-from-repository
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			app_does_not_exist=0
			app_installed=0
			app_not_installed=0
			progs=(dirmngr);
			package_install_status_check_function # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
			sudo $package_install_program dirmngr # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "Exiting script..." && echo "" && sleep 10 && exit
			sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 2C0D3C0F
			#
			# The line below used to work, but sometimes gives error
			# sudo wget -q --show-progress http://goo.gl/vewCLL -O /etc/apt/sources.list.d/rpimonitor.list
			#
			#	Updated with line below, pulled info https://github.com/XavierBerger/RPi-Monitor/issues/267 ... apparently adding 'www.' was enough.
			echo "deb http://www.giteduberger.fr rpimonitor/" | sudo tee /etc/apt/sources.list.d/rpimonitor.list
			# Necessary after adding repository, don't remove or rpimonitor will fail to install
			sudo $packages_update_program
			app_does_not_exist=0
			app_installed=0
			app_not_installed=0
			progs=(rpimonitor);
			package_install_status_check_function
			sudo $package_install_program rpimonitor # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
			pihostname=$(hostname)
			# echo http:\/\/$pihostname.local:8888
			# chromium-browser http:\/\/$pihostname.local:8888
			# chromium-browser http://pi4brokesd.local:8888/
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			echo "${bold}${cyan}Enable dark mode for RPi-Monitor web page?${normal}"
			# echo 1 for yes, 2 for no, 3 to revert.
			while :; do
				read -r -p "${bold}${cyan}1 for yes, 2 for no, 3 to revert:${normal} " RPi_Monitor_Dark_Mode
				echo
				if [ "$RPi_Monitor_Dark_Mode" == "1" ] || [ "$RPi_Monitor_Dark_Mode" == "2" ] || [ "$RPi_Monitor_Dark_Mode" == "3" ]; then
					break
				else
					echo
					echo "${bold}${red}Invalid input selection, try again.${normal}"
					echo
					echo ----------------------------------------------------------------------------------
					echo
				fi
			done
			
			sudo sed -i '\!^RPi_Monitor_Dark_Mode =!{h;s!=.*!= '"$RPi_Monitor_Dark_Mode"'!};${x;\!^$!{s!!RPi_Monitor_Dark_Mode = '"$RPi_Monitor_Dark_Mode"'!;H};x}' $app_installation_status_file
			
			if [ "$RPi_Monitor_Dark_Mode" == "2" ] || [ "$RPi_Monitor_Dark_Mode" = "3" ] || [ "$RPi_Monitor_Dark_Mode" != "1" ]; then
				# Light Mode - https://xavierberger.github.io/RPi-Monitor-docs/31_configuration_examples.html
				# Original colors are #f2f2f2 and #e9e9e9
				rpi_monitor_services_color01=#d9d9d9
				rpi_monitor_services_color02=#000000
			fi
			
			if [ "$RPi_Monitor_Dark_Mode" == "1" ]; then
				rpi_monitor_services_color01=#343434
				rpi_monitor_services_color02=#e9e9e9
				# Read more
				# https://github.com/XavierBerger/RPi-Monitor/issues/264
				if [[ ! -e "/usr/share/rpimonitor/web/css/rpimonitor.css.bak" ]]; then
					echo Creating backup of original file.
					echo /usr/share/rpimonitor/web/css/rpimonitor.css.bak
					echo
					sudo cp /usr/share/rpimonitor/web/css/rpimonitor.css /usr/share/rpimonitor/web/css/rpimonitor.css.bak
				elif [[ -e "/usr/share/rpimonitor/web/css/rpimonitor.css.bak" ]]; then
					echo Backup of original file exists, creating edited backup.
					echo /usr/share/rpimonitor/web/css/rpimonitor_last_edit.css.bak
					echo 
					sudo cp /usr/share/rpimonitor/web/css/rpimonitor.css /usr/share/rpimonitor/web/css/rpimonitor_last_edit.css.bak
				else
					echo This message should not be visible.
				fi
				cat <<EOF | sudo tee /usr/share/rpimonitor/web/css/rpimonitor.css >/dev/null
/*--- -- --- -- ---*/
/* -- DARK MODE -- */
/*--- -- --- -- ---*/

/* Nav & Menu */
.dropdown-menu,
.navbar-inverse .navbar-nav > .active > a,
.navbar-inverse .navbar-nav > .active > a:focus,
.navbar-inverse .navbar-nav > .active > a:hover {
	background-color: #3c3c3c !important;
}

.dropdown-menu > li > a {
	color: gray !important;
}

.dropdown-menu > li > a:hover {
	background-color: #6a6a6a !important;
	color: white !important;
}

body {
	background-color: #1a1a1a !important;
	color: rgb(150, 150, 150) !important;
}

/* Status */
.list-group-item {
	background-color: #1a1a1a !important;
	color: white !important;
}

hr {
	border-color: black !important;
}

.column-fluid {
	column-rule-color: black !important;
}

.justgage svg text {
	filter: contrast(0%) !important;
}

/* Statistics */
td {
	color: white;
}

.legendColorBox,
.legendLabel {
	background-color: #3c3c3c;
	color: lightgray;
}

.btn,
input[type="button"],
select {
	background-color: #222222;
	color: lightgray;
}

.btn:hover,
input[type="button"]:hover,
select:hover {
	color: gray;
}

/* Addons */
.panel-default > .panel-heading {
	background-color: #6a6a6a !important;
	color: white !important;
}

.panel-body {
	background-color: #3c3c3c;
	color: white;
}

/* Options */
.modal-content {
	background-color: #3c3c3c !important;
	color: white;
}
/*--- -- --- -- ---*/
/* -- DARK MODE -- */
/*--- -- --- -- ---*/
EOF
				# Dark Mode
				sudo service rpimonitor restart
				echo
				echo If changes do not display immediately, clear cached history in Chrome.
				sleep 5
			elif [ "$RPi_Monitor_Dark_Mode" == "2" ]; then
				echo Skipping Dark Mode setup of RPi-Monitor.
			elif [ "$RPi_Monitor_Dark_Mode" == "3" ]; then
				sudo $wget_or_wget2_quiet_progress https://raw.githubusercontent.com/XavierBerger/RPi-Monitor/master/src/usr/share/rpimonitor/web/css/rpimonitor.css -O /usr/share/rpimonitor/web/css/rpimonitor.css
				if [[ -e "/usr/share/rpimonitor/web/css/rpimonitor.css.bak" ]]; then
					echo Removing backup of original file.
					echo /usr/share/rpimonitor/web/css/rpimonitor.css.bak
					echo
					sudo rm -f /usr/share/rpimonitor/web/css/rpimonitor.css.bak
				fi
			else
				echo Invalid selection option, skipping installation of Dark Mode for RPi-Monitor.
			fi
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			# Read more
			# https://github.com/XavierBerger/RPi-Monitor/issues/264
			if [[ ! -e "/etc/rpimonitor/template/network.conf.bak" ]]; then
				echo Creating backup of original file.
				echo /etc/rpimonitor/template/network.conf
				echo
				sudo cp /etc/rpimonitor/template/network.conf /etc/rpimonitor/template/network.conf.bak
			fi
			if [[ ! -e "/etc/rpimonitor/template/wlan.conf.bak" ]]; then
				echo Creating backup of original file.
				echo /etc/rpimonitor/template/wlan.conf
				echo
				sudo cp /etc/rpimonitor/template/wlan.conf /etc/rpimonitor/template/wlan.conf.bak
			fi
			# sudo wget -q --show-progress https://raw.githubusercontent.com/XavierBerger/RPi-Monitor/develop/src/etc/rpimonitor/template/network.conf -O /etc/rpimonitor/template/network.conf
			cat <<EOF | sudo tee /etc/rpimonitor/template/network.conf >/dev/null
########################################################################
# Extract Network information
#  Page: 1
#  Information               Status     Statistics
#  - recieved                - yes      - yes
#  - send                    - yes      - yes
#
# Note: Replace 'eth0' in the configuration bellow by the name of your
#       network interface and uncomment the line according to your needs
########################################################################
dynamic.1.name=net_received
dynamic.1.source=/sys/class/net/eth0/statistics/rx_bytes
dynamic.1.regexp=(.*)
dynamic.1.postprocess=
#dynamic.1.postprocess=$1*-1
dynamic.1.rrd=DERIVE
#dynamic.1.max=0

dynamic.2.name=net_send
dynamic.2.source=/sys/class/net/eth0/statistics/tx_bytes
dynamic.2.regexp=(.*)
dynamic.2.postprocess=
dynamic.2.rrd=DERIVE
#dynamic.2.min=0

web.status.1.content.8.name=Ethernet
web.status.1.content.8.icon=network.png
web.status.1.content.8.line.1="Ethernet Sent: <b>"+KMG(data.net_send)+"<i class='icon-arrow-up'></i></b> Received: <b>"+KMG(Math.abs(data.net_received)) + "<i class='icon-arrow-down'></i></b>"

web.statistics.1.content.8.name=Ethernet
#web.statistics.1.content.8.title="Network"
web.statistics.1.content.8.graph.1=net_send
web.statistics.1.content.8.graph.2=net_received
web.statistics.1.content.8.graph_options.yaxis={ tickFormatter: function (v) { if (Math.abs(v) > 1048576) return (Math.round(v*10/1024/1024)/10) + " MiB/s" ; if (Math.abs(v) > 1024) return (Math.round(v*10/1024)/10) + " KiB/s" ; else return v + " B/s" }, }
web.statistics.1.content.8.ds_graph_options.net_send.label=Upload bandwidth (bytes)
web.statistics.1.content.8.ds_graph_options.net_send.lines={ fill: true }
web.statistics.1.content.8.ds_graph_options.net_send.color="#FF7777"
web.statistics.1.content.8.ds_graph_options.net_received.label=Download bandwidth (bytes)
web.statistics.1.content.8.ds_graph_options.net_received.lines={ fill: true }
web.statistics.1.content.8.ds_graph_options.net_received.color="#77FF77"
EOF
		#---------------------------------------------------------------------------------------------------------------------------------
		#---------------------------------------------------------------------------------------------------------------------------------
		# sudo wget -q  --show-progress https://raw.githubusercontent.com/XavierBerger/RPi-Monitor/develop/src/etc/rpimonitor/template/wlan.conf -O /etc/rpimonitor/template/wlan.conf
			cat <<EOF | sudo tee /etc/rpimonitor/template/wlan.conf >/dev/null
########################################################################
# Extract WiFi information
#  Page: 1
#  Information               Status     Statistics
#  - recieved                - yes      - yes
#  - sent                    - yes      - yes
########################################################################
dynamic.1.name=wifi_received
dynamic.1.source=/sys/class/net/wlan0/statistics/rx_bytes
dynamic.1.regexp=(.*)
dynamic.1.postprocess=
#dynamic.1.postprocess=$1*-1
dynamic.1.rrd=DERIVE

dynamic.2.name=wifi_send
dynamic.2.source=/sys/class/net/wlan0/statistics/tx_bytes
dynamic.2.regexp=(.*)
dynamic.2.postprocess=
dynamic.2.rrd=DERIVE

web.status.1.content.9.name=WiFi
web.status.1.content.9.icon=wifi.png
web.status.1.content.9.line.1="WiFi Sent: <b>"+KMG(data.wifi_send)+"<i class='icon-arrow-up'></i></b> Received: <b>"+KMG(Math.abs(data.wifi_received)) + "<i class='icon-arrow-down'></i></b>"

web.statistics.1.content.9.name=WiFi
#web.statistics.1.content.9.title="WiFi"
web.statistics.1.content.9.graph.1=wifi_send
web.statistics.1.content.9.graph.2=wifi_received
web.statistics.1.content.9.graph_options.yaxis={ tickFormatter: function (v) { if (Math.abs(v) > 1048576) return (Math.round(v*10/1024/1024)/10) + " MiB/s" ; if (Math.abs(v) > 1024) return (Math.round(v*10/1024)/10) + " KiB/s" ; else return v + " B/s" }, }
web.statistics.1.content.9.ds_graph_options.wifi_send.label=Upload bandwidth (bits)
web.statistics.1.content.9.ds_graph_options.wifi_send.lines={ fill: true }
web.statistics.1.content.9.ds_graph_options.wifi_send.color="#FF7777"
web.statistics.1.content.9.ds_graph_options.wifi_received.label=Download bandwidth (bits)
web.statistics.1.content.9.ds_graph_options.wifi_received.lines={ fill: true }
web.statistics.1.content.9.ds_graph_options.wifi_received.color="#77FF77"
EOF
			#---------------------------------------------------------------------------------------------------------------------------------
			#---------------------------------------------------------------------------------------------------------------------------------
			#---------------------------------------------------------------------------------------------------------------------------------
			rpi_monitor_test_output=n
			if [ "$rpi_monitor_test_output" == "y" ]; then
				# Test Section to verify this works for RPi-Monitor
				drawpile_abuse_report_installation_status=y
				drawpile_monitor_installation_status=y
				fail2ban_status=y
					# Value 2 is let's encrypt, 1 is for self signed certificates, and 3 is disabled.
				ssl_encryption_config=2
					# Can be values 1 through 3 to be enabled
				samba_choice=1
					# yes must be explicitly typed out.
				Pi_Hole_Status=yes
			fi
			#---------------------------------------------------------------------------------------------------------------------------------
			rpi_start=1
			
			# Optional - drawpile-abuse-report.service

			if [ "$drawpile_abuse_report_installation_status" == "y" ] || [ "$drawpile_abuse_report_installation_status" == "Y" ] || [ "$drawpile_abuse_report_installation_status" == "yes" ] || [ "$drawpile_abuse_report_installation_status" == "YES" ] || [ "$drawpile_abuse_report_installation_status" == "Yes" ]; then
				
				DYN_ABS_R_01=$(($rpi_start))
				DYN_ABS_R_02=$(($rpi_start+1))
				DYN_ABS_R_03=$(($rpi_start+2))
				
				services_conf_contents_abuse_report_01=$(cat << EOF
dynamic.$DYN_ABS_R_01.name=abuse_report_desc
dynamic.$DYN_ABS_R_01.source=systemctl status drawpile-abuse-report.service | grep "drawpile-abuse-report.service -"
dynamic.$DYN_ABS_R_01.regexp=- (.*)
dynamic.$DYN_ABS_R_02.name=abuse_report_act
dynamic.$DYN_ABS_R_02.source=systemctl status drawpile-abuse-report.service | grep "Active: "
dynamic.$DYN_ABS_R_02.regexp=(\(.*\))
dynamic.$DYN_ABS_R_03.name=abuse_report_runtime
dynamic.$DYN_ABS_R_03.source=systemctl status drawpile-abuse-report.service | grep "Active: "
dynamic.$DYN_ABS_R_03.regexp=; (.*)
EOF
)
				services_conf_contents_abuse_report_02=$(cat << EOF
<tr><td>"+Label(data.abuse_report_act,"=='(running)'","OK","success")+Label(data.abuse_report_act,"!='(running)'","KO","danger")+"</td><td><b>Drawpile Abuse Report</b></td><td>" + data.abuse_report_desc + "</td><td>"+Label(data.abuse_report_act,"=='(running)'",data.abuse_report_runtime,"default")+Label(data.abuse_report_act,"!='(running)'","-","default")+"</td></tr>
EOF
)
				rpi_increment=3
				rpi_start=$(($rpi_start + $rpi_increment))
			else
				# Does not increment value, continues from last.
				services_conf_contents_abuse_report_01=""
				services_conf_contents_abuse_report_02=""
			fi
			
			#---------------------------------------------------------------------------------------------------------------------------------
			# Optional - Drawpile AFK Kick Bot
			# - /etc/rpimonitor/template/services.conf  service rpimonitor restart
			if [ "$drawpile_afk_kick_installation_status" == "yes" ]; then
				DYN_AFK_BOT_01=$(($rpi_start))
				DYN_AFK_BOT_02=$(($rpi_start+1))
				DYN_AFK_BOT_03=$(($rpi_start+2))
				DYN_AFK_BOT_04=$(($rpi_start+3))
				DYN_AFK_BOT_05=$(($rpi_start+4))
				DYN_AFK_BOT_06=$(($rpi_start+5))

				services_conf_contents_afk_bot_01=$(cat << EOF
				
dynamic.$DYN_AFK_BOT_01.name=afk_kick_service_desc
dynamic.$DYN_AFK_BOT_01.source=systemctl status drawpile-afk-kick.service | grep "drawpile-afk-kick.service -"
dynamic.$DYN_AFK_BOT_01.regexp=- (.*)
dynamic.$DYN_AFK_BOT_02.name=afk_kick_service_act
dynamic.$DYN_AFK_BOT_02.source=systemctl status drawpile-afk-kick.service | grep "Active: "
dynamic.$DYN_AFK_BOT_02.regexp=(\(.*\))
dynamic.$DYN_AFK_BOT_03.name=afk_kick_service_runtime
dynamic.$DYN_AFK_BOT_03.source=systemctl status drawpile-afk-kick.service | grep "Active: "
dynamic.$DYN_AFK_BOT_03.regexp=; (.*)

dynamic.$DYN_AFK_BOT_04.name=afk_kick_timer_desc
dynamic.$DYN_AFK_BOT_04.source=systemctl status drawpile-afk-kick.timer | grep "drawpile-afk-kick.timer -"
dynamic.$DYN_AFK_BOT_04.regexp=- (.*)
dynamic.$DYN_AFK_BOT_05.name=afk_kick_timer_act
dynamic.$DYN_AFK_BOT_05.source=systemctl status drawpile-afk-kick.timer | grep "Active: "
dynamic.$DYN_AFK_BOT_05.regexp=(\(.*\))
dynamic.$DYN_AFK_BOT_06.name=afk_kick_timer_runtime
dynamic.$DYN_AFK_BOT_06.source=systemctl status drawpile-afk-kick.timer | grep "Active: "
dynamic.$DYN_AFK_BOT_06.regexp=; (.*)
EOF
)


				services_conf_contents_afk_bot_02=$(cat << EOF
<tr><td>"+Label(data.afk_kick_service_act,"=='(dead)'","OK","success")+Label(data.afk_kick_service_act,"=='(result: exit-code)'","KO","danger")+"</td><td><b>Drawpile AFK Kick Service</b></td><td>" + data.afk_kick_service_desc + "</td><td>"+Label(data.afk_kick_service_act,"=='(dead)'",data.afk_kick_service_runtime,"default")+Label(data.afk_kick_service_act,"!='(dead)'","-","default")+"</td></tr><tr><td>"+Label(data.afk_kick_timer_act,"=='(waiting)'","OK","success")+Label(data.afk_kick_timer_act,"!='(waiting)'","KO","danger")+"</td><td><b>Drawpile AFK Kick Timer</b></td><td>" + data.afk_kick_timer_desc + "</td><td>"+Label(data.afk_kick_timer_act,"=='(waiting)'",data.afk_kick_timer_runtime,"default")+Label(data.afk_kick_timer_act,"!='(waiting)'","-","default")+"</td></tr>
EOF
)
				rpi_increment=6
				rpi_start=$(($rpi_start + $rpi_increment))
			else
				# Does not increment value, continues from last. 
				services_conf_contents_afk_bot_01=""
				services_conf_contents_afk_bot_02=""
			fi		
			#---------------------------------------------------------------------------------------------------------------------------------
			# Always shown - drawpile-listserver.service
			
			DYN_LS_01=$(($rpi_start))
			DYN_LS_02=$(($rpi_start+1))
			DYN_LS_03=$(($rpi_start+2))
			
			services_conf_contents_listserver_01=$(cat << EOF

dynamic.$DYN_LS_01.name=drawpile_listserver_desc
dynamic.$DYN_LS_01.source=systemctl status drawpile-listserver.service | grep "drawpile-listserver.service -"
dynamic.$DYN_LS_01.regexp=- (.*)
dynamic.$DYN_LS_02.name=drawpile_listserver_act
dynamic.$DYN_LS_02.source=systemctl status drawpile-listserver.service | grep "Active: "
dynamic.$DYN_LS_02.regexp=(\(.*\))
dynamic.$DYN_LS_03.name=drawpile_listserver_runtime
dynamic.$DYN_LS_03.source=systemctl status drawpile-listserver.service | grep "Active: "
dynamic.$DYN_LS_03.regexp=; (.*)
EOF
)
			services_conf_contents_listserver_02=$(cat << EOF
<tr><td>"+Label(data.drawpile_listserver_act,"=='(running)'","OK","success")+Label(data.drawpile_listserver_act,"!='(running)'","KO","danger")+"</td><td><b>Drawpile ListServer</b></td><td>" + data.drawpile_listserver_desc + "</td><td>"+Label(data.drawpile_listserver_act,"=='(running)'",data.drawpile_listserver_runtime,"default")+Label(data.drawpile_listserver_act,"!='(running)'","-","default")+"</td></tr>
EOF
)
			rpi_increment=3
			rpi_start=$(($rpi_start + $rpi_increment))
			
			#---------------------------------------------------------------------------------------------------------------------------------
			# Optional - Drawpile-Monitor 
			
			if [ "$drawpile_monitor_installation_status" == "y" ] || [ "$drawpile_monitor_installation_status" == "Y" ] || [ "$drawpile_monitor_installation_status" == "yes" ] || [ "$drawpile_monitor_installation_status" == "YES" ] || [ "$drawpile_monitor_installation_status" == "Yes" ]; then
				
				DYN_DP_M_01=$(($rpi_start))
				DYN_DP_M_02=$(($rpi_start+1))
				DYN_DP_M_03=$(($rpi_start+2))

				services_conf_contents_drawpile_monitor_01=$(cat << EOF

dynamic.$DYN_DP_M_01.name=drawpile_monitor_desc
dynamic.$DYN_DP_M_01.source=systemctl status drawpile-monitor.service | grep "drawpile-monitor.service - "
dynamic.$DYN_DP_M_01.regexp=- (.*)
dynamic.$DYN_DP_M_02.name=drawpile_monitor_act
dynamic.$DYN_DP_M_02.source=systemctl status drawpile-monitor.service | grep "Active: "
dynamic.$DYN_DP_M_02.regexp=(\(.*\))
dynamic.$DYN_DP_M_03.name=drawpile_monitor_runtime
dynamic.$DYN_DP_M_03.source=systemctl status drawpile-monitor.service | grep "Active: "
dynamic.$DYN_DP_M_03.regexp=; (.*)

EOF
)
				services_conf_contents_drawpile_monitor_02=$(cat << EOF
<tr><td>"+Label(data.drawpile_monitor_act,"=='(running)'","OK","success")+Label(data.drawpile_monitor_act,"!='(running)'","KO","danger")+"</td><td><b>Drawpile Monitor</b></td><td>" + data.drawpile_monitor_desc + "</td><td>"+Label(data.drawpile_monitor_act,"=='(running)'",data.drawpile_monitor_runtime,"default")+Label(data.drawpile_monitor_act,"!='(running)'","-","default")+"</td></tr>
EOF
)
				rpi_increment=3
				rpi_start=$(($rpi_start + $rpi_increment))
			else
				# Does not increment value, continues from last. 
				services_conf_contents_drawpile_monitor_01=""
				services_conf_contents_drawpile_monitor_02=""
			fi
			
			#---------------------------------------------------------------------------------------------------------------------------------
			# Always shown - drawpile-srv.service
			# Optional - drawpile-srv.socket
			# 1 - Socket Activation
			# 2 - Always on Service

			function rpi_monitor_drawpile-srv.service () {
				DYN_DP_SRV_SVC_01=$(($rpi_start))
				DYN_DP_SRV_SVC_02=$(($rpi_start+1))
				DYN_DP_SRV_SVC_03=$(($rpi_start+2))
			
				services_conf_contents_drawpile_srv_01=$(cat << EOF

dynamic.$DYN_DP_SRV_SVC_01.name=drawpile_srv_desc
dynamic.$DYN_DP_SRV_SVC_01.source=systemctl status drawpile-srv.service | grep "drawpile-srv.service -"
dynamic.$DYN_DP_SRV_SVC_01.regexp=- (.*)
dynamic.$DYN_DP_SRV_SVC_02.name=drawpile_srv_act
dynamic.$DYN_DP_SRV_SVC_02.source=systemctl status drawpile-srv.service | grep "Active: "
dynamic.$DYN_DP_SRV_SVC_02.regexp=(\(.*\))
dynamic.$DYN_DP_SRV_SVC_03.name=drawpile_srv_runtime
dynamic.$DYN_DP_SRV_SVC_03.source=systemctl status drawpile-srv.service | grep "Active: "
dynamic.$DYN_DP_SRV_SVC_03.regexp=; (.*)
EOF
)
				services_conf_contents_drawpile_srv_02=$(cat << EOF
<tr><td>"+Label(data.drawpile_srv_act,"=='(running)'","OK","success")+Label(data.drawpile_srv_act,"!='(running)'","KO","danger")+"</td><td><b>Drawpile-srv Service</b></td><td>" + data.drawpile_srv_desc + "</td><td>"+Label(data.drawpile_srv_act,"=='(running)'",data.drawpile_srv_runtime,"default")+Label(data.drawpile_srv_act,"!='(running)'","-","default")+"</td></tr>
EOF
)
				rpi_increment=3
				rpi_start=$(($rpi_start + $rpi_increment))
			}

			function rpi_monitor_drawpile-srv.socket () {			
				DYN_DP_SRV_SOCK_01=$(($rpi_start))
				DYN_DP_SRV_SOCK_02=$(($rpi_start+1))
				DYN_DP_SRV_SOCK_03=$(($rpi_start+2))
				
				services_conf_contents_drawpile_srv_socket_01=$(cat << EOF

dynamic.$DYN_DP_SRV_SOCK_01.name=drawpile_srv_socket_desc
dynamic.$DYN_DP_SRV_SOCK_01.source=systemctl status drawpile-srv.socket | grep "drawpile-srv.socket -"
dynamic.$DYN_DP_SRV_SOCK_01.regexp=- (.*)
dynamic.$DYN_DP_SRV_SOCK_02.name=drawpile_srv_socket_act
dynamic.$DYN_DP_SRV_SOCK_02.source=systemctl status drawpile-srv.socket | grep "Active: "
dynamic.$DYN_DP_SRV_SOCK_02.regexp=(\(.*\))
dynamic.$DYN_DP_SRV_SOCK_03.name=drawpile_srv_socket_runtime
dynamic.$DYN_DP_SRV_SOCK_03.source=systemctl status drawpile-srv.socket | grep "Active: "
dynamic.$DYN_DP_SRV_SOCK_03.regexp=; (.*)
EOF
)
				services_conf_contents_drawpile_srv_socket_02=$(cat << EOF
<tr><td>"+Label(data.drawpile_srv_socket_act,"=='(running)'","OK","success")+Label(data.drawpile_srv_socket_act,"!='(running)'","KO","danger")+"</td><td><b>Drawpile-srv Socket</b></td><td>" + data.drawpile_srv_socket_desc + "</td><td>"+Label(data.drawpile_srv_socket_act,"=='(running)'",data.drawpile_srv_socket_runtime,"default")+Label(data.drawpile_srv_socket_act,"!='(running)'","-","default")+"</td></tr>
EOF
)			
				rpi_increment=3
				rpi_start=$(($rpi_start + $rpi_increment))
			}
			
			if [ "$dp_srv_startup" == "1" ]; then
				# 1 - Socket Activation
				rpi_monitor_drawpile-srv.service
				rpi_monitor_drawpile-srv.socket
			elif [ "$dp_srv_startup" == "2" ]; then
				# 2 - Always on Service
				services_conf_contents_drawpile_srv_socket_01=""
				services_conf_contents_drawpile_srv_socket_02=""
				rpi_monitor_drawpile-srv.service
			else
				echo "This message should not be visible for RPi-Monitor for Drawpile-srv."
				echo "Will set drawpile-srv to only show up on page."
				rpi_monitor_drawpile-srv.service
			fi
			
			#---------------------------------------------------------------------------------------------------------------------------------
			# Optional - Fail2Ban 
			
			if [ "$fail2ban_status" == "yes" ] || [ "$fail2ban_status" == "YES" ] || [ "$fail2ban_status" == "Yes" ] || [ "$fail2ban_status" == "Y" ] || [ "$fail2ban_status" == "y" ]; then
			
				DYN_F2B_01=$(($rpi_start))
				DYN_F2B_02=$(($rpi_start+1))
				DYN_F2B_03=$(($rpi_start+2))
			
				services_conf_contents_fail2ban_01=$(cat << EOF

dynamic.$DYN_F2B_01.name=fail2ban_desc
dynamic.$DYN_F2B_01.source=systemctl status fail2ban.service | grep "fail2ban.service -"
dynamic.$DYN_F2B_01.regexp=- (.*)
dynamic.$DYN_F2B_02.name=fail2ban_act
dynamic.$DYN_F2B_02.source=systemctl status fail2ban.service | grep "Active: "
dynamic.$DYN_F2B_02.regexp=(\(.*\))
dynamic.$DYN_F2B_03.name=fail2ban_runtime
dynamic.$DYN_F2B_03.source=systemctl status fail2ban.service | grep "Active: "
dynamic.$DYN_F2B_03.regexp=; (.*)
EOF
)
				services_conf_contents_fail2ban_02=$(cat << EOF
<tr><td>"+Label(data.fail2ban_act,"=='(running)'","OK","success")+Label(data.fail2ban_act,"!='(running)'","KO","danger")+"</td><td><b>Fail2Ban</b></td><td>" + data.fail2ban_desc + "</td><td>"+Label(data.fail2ban_act,"=='(running)'",data.fail2ban_runtime,"default")+Label(data.fail2ban_act,"!='(running)'","-","default")+"</td></tr>
EOF
)
				rpi_increment=3
				rpi_start=$(($rpi_start + $rpi_increment))
			else
				# Does not increment value, continues from last. 
				services_conf_contents_fail2ban_01=""
				services_conf_contents_fail2ban_02=""
			fi
			#---------------------------------------------------------------------------------------------------------------------------------
			# Optional - Let's Enrypt
			
			# echo 'Press 1 for Self Signed Certificates'
			# echo "Press 2 for Lets Encrypt ${bold}(Default)${normal}"
			# echo 'Press 3 for no SSL security.
			# For invalid options, 2 is assumed. 
			
			if [ "$ssl_encryption_config" == "2" ]; then
				DYN_LETE_01=$(($rpi_start))
				DYN_LETE_02=$(($rpi_start+1))
				DYN_LETE_03=$(($rpi_start+2))
				DYN_LETE_04=$(($rpi_start+3))
				DYN_LETE_05=$(($rpi_start+4))
				DYN_LETE_06=$(($rpi_start+5))

				services_conf_contents_Lets_Encrypt_01=$(cat << EOF

dynamic.$DYN_LETE_01.name=certbot_service_desc
dynamic.$DYN_LETE_01.source=systemctl status certbot.service | grep "certbot.service -"
dynamic.$DYN_LETE_01.regexp=- (.*)
dynamic.$DYN_LETE_02.name=certbot_service_act
dynamic.$DYN_LETE_02.source=systemctl status certbot.service | grep "Active: "
dynamic.$DYN_LETE_02.regexp=(\(.*\))
dynamic.$DYN_LETE_03.name=certbot_service_runtime
dynamic.$DYN_LETE_03.source=systemctl status certbot.service | grep "Active: "
dynamic.$DYN_LETE_03.regexp=; (.*)

dynamic.$DYN_LETE_04.name=certbot_timer_desc
dynamic.$DYN_LETE_04.source=systemctl status certbot.timer | grep "certbot.timer -"
dynamic.$DYN_LETE_04.regexp=- (.*)
dynamic.$DYN_LETE_05.name=certbot_timer_act
dynamic.$DYN_LETE_05.source=systemctl status certbot.timer | grep "Active: "
dynamic.$DYN_LETE_05.regexp=(\(.*\))
dynamic.$DYN_LETE_06.name=certbot_timer_runtime
dynamic.$DYN_LETE_06.source=systemctl status certbot.timer | grep "Active: "
dynamic.$DYN_LETE_06.regexp=; (.*)
EOF
)
				services_conf_contents_Lets_Encrypt_02=$(cat << EOF
<tr><td>"+Label(data.certbot_service_act,"=='(running)'","OK","success")+Label(data.certbot_service_act,"!='(running)'","KO","danger")+"</td><td><b>Let's Encrypt Certbot</b></td><td>" + data.certbot_service_desc + "</td><td>"+Label(data.certbot_service_act,"=='(running)'",data.certbot_service_runtime,"default")+Label(data.certbot_service_act,"!='(running)'","-","default")+"</td></tr><tr><td>"+Label(data.certbot_timer_act,"=='(running)'","OK","success")+Label(data.certbot_timer_act,"!='(running)'","KO","danger")+"</td><td><b>Let's Encrypt Timer</b></td><td>" + data.certbot_timer_desc + "</td><td>"+Label(data.certbot_timer_act,"=='(running)'",data.certbot_timer_runtime,"default")+Label(data.certbot_timer_act,"!='(running)'","-","default")+"</td></tr>
EOF
)
				rpi_increment=6
				rpi_start=$(($rpi_start + $rpi_increment))
			else
				# Does not increment value, continues from last. 
				services_conf_contents_Lets_Encrypt_01=""
				services_conf_contents_Lets_Encrypt_02=""
			fi			
			#---------------------------------------------------------------------------------------------------------------------------------
			# Always shown - NGINX
			
			DYN_NGINX_01=$(($rpi_start))
			DYN_NGINX_02=$(($rpi_start+1))
			DYN_NGINX_03=$(($rpi_start+2))
			
			services_conf_contents_nginx_01=$(cat << EOF

dynamic.$DYN_NGINX_01.name=nginx_desc
dynamic.$DYN_NGINX_01.source=systemctl status nginx.service | grep "nginx.service -"
dynamic.$DYN_NGINX_01.regexp=- (.*)
dynamic.$DYN_NGINX_02.name=nginx_act
dynamic.$DYN_NGINX_02.source=systemctl status nginx.service | grep "Active: "
dynamic.$DYN_NGINX_02.regexp=(\(.*\))
dynamic.$DYN_NGINX_03.name=nginx_runtime
dynamic.$DYN_NGINX_03.source=systemctl status nginx.service | grep "Active: "
dynamic.$DYN_NGINX_03.regexp=; (.*)
EOF
)
			services_conf_contents_nginx_02=$(cat << EOF
<tr><td>"+Label(data.nginx_act,"=='(running)'","OK","success")+Label(data.nginx_act,"!='(running)'","KO","danger")+"</td><td><b>NGINX Web Server</b></td><td>" + data.nginx_desc + "</td><td>"+Label(data.nginx_act,"=='(running)'",data.nginx_runtime,"default")+Label(data.nginx_act,"!='(running)'","-","default")+"</td></tr>
EOF
)
			rpi_increment=3
			rpi_start=$(($rpi_start + $rpi_increment))
			
			#---------------------------------------------------------------------------------------------------------------------------------
			# Pi-hole
			# Group if statements / group compound conditions https://stackoverflow.com/questions/14964805/groups-of-compound-conditions-in-bash-test

			if [[ "$Pi_Hole_Status" == "yes" || "$Pi_Hole_Status" == "YES" || "$Pi_Hole_Status" == "Yes" ]]; then
				DYN_PI_H_01=$(($rpi_start))
				DYN_PI_H_02=$(($rpi_start+1))
				DYN_PI_H_03=$(($rpi_start+2))
			
				services_conf_contents_PiHole_01=$(cat << EOF

dynamic.$DYN_PI_H_01.name=pihole_desc
dynamic.$DYN_PI_H_01.source=systemctl status pihole-FTL.service | grep "pihole-FTL.service -"
dynamic.$DYN_PI_H_01.regexp=- (.*)
dynamic.$DYN_PI_H_02.name=pihole_act
dynamic.$DYN_PI_H_02.source=systemctl status pihole-FTL.service | grep "Active: "
dynamic.$DYN_PI_H_02.regexp=(\(.*\))
dynamic.$DYN_PI_H_03.name=pihole_runtime
dynamic.$DYN_PI_H_03.source=systemctl status pihole-FTL.service | grep "Active: "
dynamic.$DYN_PI_H_03.regexp=; (.*)
EOF
)
				services_conf_contents_PiHole_02=$(cat << EOF
<tr><td>"+Label(data.pihole_act,"=='(running)'","OK","success")+Label(data.pihole_act,"!='(running)'","KO","danger")+"</td><td><b>Pi-hole FTL</b></td><td>" + data.pihole_desc + "</td><td>"+Label(data.pihole_act,"=='(running)'",data.pihole_runtime,"default")+Label(data.pihole_act,"!='(running)'","-","default")+"</td></tr>
EOF
)
				rpi_increment=3
				rpi_start=$(($rpi_start + $rpi_increment))
			else
				# Does not increment value, continues from last. 
				services_conf_contents_PiHole_01=""
				services_conf_contents_PiHole_02=""
			fi
			#---------------------------------------------------------------------------------------------------------------------------------
			# Always shown - RPi_Monitor
			
			DYN_RPI_01=$(($rpi_start))
			DYN_RPI_02=$(($rpi_start+1))
			DYN_RPI_03=$(($rpi_start+2))
			
			services_conf_contents_rpi_monitor_01=$(cat << EOF

dynamic.$DYN_RPI_01.name=rpimonitor_desc
dynamic.$DYN_RPI_01.source=service rpimonitor status | grep "rpimonitor.service -"
dynamic.$DYN_RPI_01.regexp=- (.*)
dynamic.$DYN_RPI_02.name=rpimonitor_act
dynamic.$DYN_RPI_02.source=service rpimonitor status | grep "Active: "
dynamic.$DYN_RPI_02.regexp=(\(.*\))
dynamic.$DYN_RPI_03.name=rpimonitor_runtime
dynamic.$DYN_RPI_03.source=service rpimonitor status | grep "Active: "
dynamic.$DYN_RPI_03.regexp=; (.*)
EOF
)
			services_conf_contents_rpi_monitor_02=$(cat << EOF
<tr><td>"+Label(data.rpimonitor_act,"=='(running)'","OK","success")+Label(data.rpimonitor_act,"!='(running)'","KO","danger")+"</td><td><b>RPi-Monitor</b></td><td>" + data.rpimonitor_desc + "</td><td>"+Label(data.rpimonitor_act,"=='(running)'",data.rpimonitor_runtime,"default")+Label(data.rpimonitor_act,"!='(running)'","-","default")+"</td></tr>
EOF
)
			rpi_increment=3
			rpi_start=$(($rpi_start + $rpi_increment))
			
			#---------------------------------------------------------------------------------------------------------------------------------
			# Optional - Samba
			#      For invalid options, 4 is assumed (no Samba).
			
			if [ "$samba_choice" == "1" ] || [ "$samba_choice" == "2" ] || [ "$samba_choice" == "3" ]; then
				
				DYN_NMBD_01=$(($rpi_start))
				DYN_NMBD_02=$(($rpi_start+1))
				DYN_NMBD_03=$(($rpi_start+2))
				
				DYN_SMBD_01=$(($rpi_start+3))
				DYN_SMBD_02=$(($rpi_start+4))
				DYN_SMBD_03=$(($rpi_start+5))

				services_conf_contents_samba_choice_01=$(cat << EOF

dynamic.$DYN_NMBD_01.name=nmbd_desc
dynamic.$DYN_NMBD_01.source=service nmbd status | grep "nmbd.service - "
dynamic.$DYN_NMBD_01.regexp=- (.*)
dynamic.$DYN_NMBD_02.name=nmbd_act
dynamic.$DYN_NMBD_02.source=service nmbd status | grep "Active: "
dynamic.$DYN_NMBD_02.regexp=(\(.*\))
dynamic.$DYN_NMBD_03.name=nmbd_runtime
dynamic.$DYN_NMBD_03.source=service nmbd status | grep "Active: "
dynamic.$DYN_NMBD_03.regexp=; (.*)

dynamic.$DYN_SMBD_01.name=smbd_desc
dynamic.$DYN_SMBD_01.source=service smbd status | grep "smbd.service - "
dynamic.$DYN_SMBD_01.regexp=- (.*)
dynamic.$DYN_SMBD_02.name=smbd_act
dynamic.$DYN_SMBD_02.source=service smbd status | grep "Active: "
dynamic.$DYN_SMBD_02.regexp=(\(.*\))
dynamic.$DYN_SMBD_03.name=smbd_runtime
dynamic.$DYN_SMBD_03.source=service smbd status | grep "Active: "
dynamic.$DYN_SMBD_03.regexp=; (.*)
EOF
)
				services_conf_contents_samba_choice_02=$(cat << EOF
<tr><td>"+Label(data.nmbd_act,"=='(running)'","OK","success")+Label(data.nmbd_act,"!='(running)'","KO","danger")+"</td><td><b>Samba NetBIOS to IP</b></td><td>" + data.nmbd_desc + "</td><td>"+Label(data.nmbd_act,"=='(running)'",data.nmbd_runtime,"default")+Label(data.nmbd_act,"!='(running)'","-","default")+"</td></tr><tr><td>"+Label(data.smbd_act,"=='(running)'","OK","success")+Label(data.smbd_act,"!='(running)'","KO","danger")+"</td><td><b>Samba File and Printer Share</b></td><td>" + data.smbd_desc + "</td><td>"+Label(data.smbd_act,"=='(running)'",data.smbd_runtime,"default")+Label(data.smbd_act,"!='(running)'","-","default")+"</td></tr>
EOF
)

				rpi_increment=6
				rpi_start=$(($rpi_start + $rpi_increment))
			else
				# Does not increment value, continues from last.
				services_conf_contents_samba_choice_01=""
				services_conf_contents_samba_choice_02=""
			fi
			#---------------------------------------------------------------------------------------------------------------------------------
			#---------------------------------------------------------------------------------------------------------------------------------
			# Test Section to verify this works for RPi-Monitor
			if [ "$rpi_monitor_test_output" == "y" ]; then
				echo "
$services_conf_contents_abuse_report_01
$services_conf_contents_afk_bot_01
$services_conf_contents_listserver_01
$services_conf_contents_drawpile_monitor_01
$services_conf_contents_drawpile_srv_01
$services_conf_contents_drawpile_srv_socket_01
$services_conf_contents_fail2ban_01
$services_conf_contents_Lets_Encrypt_01
$services_conf_contents_nginx_01
$services_conf_contents_PiHole_01
$services_conf_contents_rpi_monitor_01
$services_conf_contents_samba_choice_01" | sed -e ':L;N;s/^\n$//;t L'
# The sed line removes double blank lines.
			fi
			#---------------------------------------------------------------------------------------------------------------------------------
			#---------------------------------------------------------------------------------------------------------------------------------
		services_conf_contents=$(cat << EOF
########################################################################
# Extract information about Opened Port
#  Page: 1
#  Information               Status     Statistics
#  - ssh port (22)           - yes      - no
#  - rpimonitor port (8888)  - yes      - no
#  - http port (80)          - yes      - yes
#  - https port (443)        - yes      - yes
#  - mysql port (3306) - yes - no
########################################################################
$services_conf_contents_abuse_report_01
$services_conf_contents_afk_bot_01
$services_conf_contents_listserver_01
$services_conf_contents_drawpile_monitor_01
$services_conf_contents_drawpile_srv_01
$services_conf_contents_drawpile_srv_socket_01
$services_conf_contents_fail2ban_01
$services_conf_contents_Lets_Encrypt_01
$services_conf_contents_nginx_01
$services_conf_contents_PiHole_01
$services_conf_contents_rpi_monitor_01
$services_conf_contents_samba_choice_01

web.status.1.content.11.name=Services
web.status.1.content.11.icon=daemons.png
web.status.1.content.11.line.1="<style type=\"text/css\">.tg331 {border-collapse:collapse;border-spacing:0;}.tg331 tr:nth-child(even){background-color: #343434}.tg331 table{border: 0px solid #e9e9e9;}.tg331 td{font-family:Arial, sans-serif;font-size:14px;padding:12px 2px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;}.tg331 th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:12px 2px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;}.tg331 .tg331-yw4l{vertical-align:top;text-align: left;}.tg331 hr {display: block;margin-top: 0.5em;margin-bottom: 0.5em;margin-left: auto;margin-right: auto;border-style: inset; border-width: 1px;}</style><table width=\"100%\" class=\"tg331\"><tr><td><b>Status</b></td><td><b>Service Name</b></td><td><b>Service Description</b></td><td><b>Run Time</b></td></tr>$services_conf_contents_abuse_report_02$services_conf_contents_afk_bot_02$services_conf_contents_listserver_02$services_conf_contents_drawpile_monitor_02$services_conf_contents_drawpile_srv_02$services_conf_contents_drawpile_srv_socket_02$services_conf_contents_fail2ban_02$services_conf_contents_Lets_Encrypt_02$services_conf_contents_nginx_02$services_conf_contents_PiHole_02$services_conf_contents_rpi_monitor_02$services_conf_contents_samba_choice_02</table>"
EOF
)
services_conf_contents=$( echo "
$services_conf_contents" | sed -e ':L;N;s/^\n$//;t L' )
# The sed line removes double blank lines.
echo "$services_conf_contents" | sudo tee /etc/rpimonitor/template/services.conf >/dev/null
sudo service rpimonitor restart
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
<<comment_EOF
web.status.1.content.11.title="Services"
web.status.1.content.11.icon=daemons.png

web.status.1.content.11.line.1="<style type=\"text/css\">.tg331 {border-collapse:collapse;border-spacing:0;}.tg331 tr:nth-child(even){background-color: #343434}.tg331 table{border: 0px solid #e9e9e9;}.tg331 td{font-family:Arial, sans-serif;font-size:14px;padding:12px 2px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;}.tg331 th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:12px 2px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;}.tg331 .tg331-yw4l{vertical-align:top;text-align: left;}.tg331 hr {display: block;margin-top: 0.5em;margin-bottom: 0.5em;margin-left: auto;margin-right: auto;border-style: inset; border-width: 1px;}</style><table width=\"100%\" class=\"tg331\"><tr><td><b>Status</b></td><td><b>Service Name</b></td><td><b>Service Description</b></td><td><b>Run Time</b></td></tr>

<tr><td>"+Label(data.rpimonitor_act,"=='(running)'","OK","success")+Label(data.rpimonitor_act,"!='(running)'","KO","danger")+"</td><td><b>rpimonitor</b></td><td>" + data.rpimonitor_desc + "</td><td>"+Label(data.rpimonitor_act,"=='(running)'",data.rpimonitor_runtime,"default")+Label(data.rpimonitor_act,"!='(running)'","-","default")+"</td></tr>

<tr><td>"+Label(data.nginx_act,"=='(running)'","OK","success")+Label(data.nginx_act,"!='(running)'","KO","danger")+"</td><td><b>nginx.service</b></td><td>" + data.nginx_desc + "</td><td>"+Label(data.nginx_act,"=='(running)'",data.nginx_runtime,"default")+Label(data.nginx_act,"!='(running)'","-","default")+"</td></tr>

<tr><td>"+Label(data.drawpile_srv_socket_act,"=='(running)'","OK","success")+Label(data.drawpile_srv_socket_act,"!='(running)'","KO","danger")+"</td><td><b>drawpile-srv.socket</b></td><td>" + data.drawpile_srv_socket_desc + "</td><td>"+Label(data.drawpile_srv_socket_act,"=='(running)'",data.drawpile_srv_socket_runtime,"default")+Label(data.drawpile_srv_socket_act,"!='(running)'","-","default")+"</td></tr>

<tr><td>"+Label(data.drawpile_srv_act,"=='(running)'","OK","success")+Label(data.drawpile_srv_act,"!='(running)'","KO","danger")+"</td><td><b>drawpile-srv.service</b></td><td>" + data.drawpile_srv_desc + "</td><td>"+Label(data.drawpile_srv_act,"=='(running)'",data.drawpile_srv_runtime,"default")+Label(data.drawpile_srv_act,"!='(running)'","-","default")+"</td></tr>

<tr><td>"+Label(data.drawpile_listserver_act,"=='(running)'","OK","success")+Label(data.drawpile_listserver_act,"!='(running)'","KO","danger")+"</td><td><b>drawpile-listserver.service</b></td><td>" + data.drawpile_listserver_desc + "</td><td>"+Label(data.drawpile_listserver_act,"=='(running)'",data.drawpile_listserver_runtime,"default")+Label(data.drawpile_listserver_act,"!='(running)'","-","default")+"</td></tr>

<tr><td>"+Label(data.abuse_report_act,"=='(running)'","OK","success")+Label(data.abuse_report_act,"!='(running)'","KO","danger")+"</td><td><b>drawpile-abuse-report.service</b></td><td>" + data.abuse_report_desc + "</td><td>"+Label(data.abuse_report_act,"=='(running)'",data.abuse_report_runtime,"default")+Label(data.abuse_report_act,"!='(running)'","-","default")+"</td></tr>

$services_conf_contents_samba_choice_02$services_conf_contents_Lets_Encrypt_02$services_conf_contents_PiHole_01"

#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
$services_conf_contents_samba_choice_01

dynamic.22.name=drawpile_srv_socket_desc2
dynamic.22.source=systemctl status drawpile-srv.socket | grep "drawpile-srv.socket -"
dynamic.22.regexp=- (.*)
dynamic.23.name=drawpile_srv_socket_enabled2
dynamic.23.source=systemctl status drawpile-srv.socket | grep "Loaded: "
dynamic.23.regexp=; (.*); vendor preset: enabled\)
dynamic.24.name=drawpile_srv_socket_act2
dynamic.24.source=systemctl status drawpile-srv.socket | grep "Active: "
dynamic.24.regexp=(\(.*\))
dynamic.24.name=drawpile_srv_socket_runtime2
dynamic.24.source=systemctl status drawpile-srv.socket | grep "Active: "
dynamic.24.regexp=; (.*)
# Loaded: loaded (/etc/systemd/system/drawpile-srv.socket; disabled; vendor preset: enabled)
$services_conf_contents_Lets_Encrypt_01



<tr><td>"
+Label(data.drawpile_srv_socket_act,"=='(running)'","OK","success")
+Label(data.drawpile_srv_socket_act,"=='inactive (dead)'","KO","warning")
+Label(data.drawpile_srv_socket_act,"!='(running)'","KO","danger")
+"</td><td><b>drawpile-srv.socket</b></td><td>" + data.drawpile_srv_socket_desc + "</td><td>"+Label(data.drawpile_srv_socket_act,"=='(running)'",data.drawpile_srv_socket_runtime,"default")+Label(data.drawpile_srv_socket_act,"!='(running)'","-","default")+"</td></tr>

<tr><td>"
+Label(data.drawpile_srv_act,"=='(running)'","OK","success")
+Label(data.drawpile_srv_act,"=='inactive (dead)'","KO","warning")
+Label(data.drawpile_srv_act,"!='(running)'","KO","danger")
+"</td><td><b>drawpile-srv.service</b></td><td>" + data.drawpile_srv_desc + "</td><td>"+Label(data.drawpile_srv_act,"=='(running)'",data.drawpile_srv_runtime,"default")+Label(data.drawpile_srv_act,"!='(running)'","-","default")+"</td></tr>

$services_conf_contents_samba_choice_02
+Label(data.drawpile_srv_socket_act2,"=='(running)'","OK","success")
+Label(data.drawpile_srv_socket_enabled2,"=='disabled'","KO","warning")
+Label(data.drawpile_srv_socket_act2,"!='(running)'","KO","danger")
+"</td><td><b>drawpile-srv.socket2</b></td><td>" + data.drawpile_srv_socket_desc2 + "</td><td>"+Label(data.drawpile_srv_socket_act2,"=='(running)'",data.drawpile_srv_socket_runtime2,"default")+Label(data.drawpile_srv_socket_act2,"!='(running)'","-","default")+"</td></tr>"
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
<tr><td>"+Label(data.smbd_act,"=='(running)'","OK","success")+Label(data.smbd_act,"!='(running)'","KO","danger")+"</td><td><b>smbd</b></td><td>" + data.smbd_desc + "</td><td>"+Label(data.smbd_act,"=='(running)'",data.smbd_runtime,"default")+Label(data.smbd_act,"!='(running)'","-","default")+"</td></tr>

sudo systemctl enable --now certbot.service
<tr><td>"+Label(data.certbot_service_act,"=='(running)'","OK","success")+Label(data.certbot_service_act,"!='(running)'","KO","danger")+"</td><td><b>Let's Encrypt Certbot</b></td><td>" + data.certbot_service_desc + "</td><td>"+Label(data.certbot_service_act,"=='(running)'",data.certbot_service_runtime,"default")+Label(data.certbot_service_act,"!='(running)'","-","default")+"</td></tr>

sudo systemctl enable --now certbot.timer
<tr><td>"+Label(data.certbot_timer_act,"=='(running)'","OK","success")+Label(data.certbot_timer_act,"!='(running)'","KO","danger")+"</td><td><b>Let's Encrypt Timer</b></td><td>" + data.certbot_timer_desc + "</td><td>"+Label(data.certbot_timer_act,"=='(running)'",data.certbot_timer_runtime,"default")+Label(data.certbot_timer_act,"!='(running)'","-","default")+"</td></tr>
comment_EOF
			#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
			#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
			echo "$services_conf_contents" | sudo tee /etc/rpimonitor/template/services.conf >/dev/null

			sudo sed -i -e 's/#include=\/etc\/rpimonitor\/template\/services.conf/include=\/etc\/rpimonitor\/template\/wlan.conf/g' "/etc/rpimonitor/data.conf"
			sudo sed -i -e 's/#include=\/etc\/rpimonitor\/template\/wlan.conf/include=\/etc\/rpimonitor\/template\/services.conf/g' "/etc/rpimonitor/data.conf"
			if [ "$Pi_Hole_Status" == "yes" ] || [ "$Pi_Hole_Status" == "YES" ] || [ "$Pi_Hole_Status" == "Yes" ] ; then
				# Info found - https://www.reddit.com/r/pihole/comments/4659mn/pihole_and_rpi_monitor/
				sudo sed -i -e 's/#web.addons.2.name=Addons example/web.addons.2.name=Pi-Hole/g' "/etc/rpimonitor/data.conf"
				sudo sed -i -e 's/#web.addons.2.showTitle=0/web.addons.2.showTitle=0/g' "/etc/rpimonitor/data.conf"
				sudo sed -i -e 's/#web.addons.2.addons=example/web.addons.2.addons=custom\nweb.addons.2.url=http:\/\/localhost\/admin\//g' "/etc/rpimonitor/data.conf"
			else
				# Do nothing, no changes needed if Pi-Hole was not installed.
				:
			fi
			# sudo sed -i -e 's/#include=\/etc\/rpimonitor\/template\/services.conf\n#include=\/etc\/rpimonitor\/template\/wlan.conf\n/include=\/etc\/rpimonitor\/template\/wlan.conf\ninclude=\/etc\/rpimonitor\/template\/services.conf\n/g' "/etc/rpimonitor/data.conf"
			# sudo sed -i -e 's/include=\/etc\/rpimonitor\/template\/services.conf\ninclude=\/etc\/rpimonitor\/template\/wlan.conf\n/include=\/etc\/rpimonitor\/template\/wlan.conf\ninclude=\/etc\/rpimonitor\/template\/services.conf\n/g' "/etc/rpimonitor/data.conf"
			sudo service rpimonitor restart
			# sudo /etc/init.d/rpimonitor restart
			# Restore config lines and restart service
			# sudo wget -q  --show-progress https://raw.githubusercontent.com/XavierBerger/RPi-Monitor/develop/src/etc/rpimonitor/template/wlan.conf -O /etc/rpimonitor/template/wlan.conf && sudo wget -q --show-progress https://raw.githubusercontent.com/XavierBerger/RPi-Monitor/develop/src/etc/rpimonitor/template/wlan.conf -O /etc/rpimonitor/template/wlan.conf && sudo /etc/init.d/rpimonitor restart
			#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
			#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
			
			echo '--------------------------------------------------------------------------------'
			echo
			if [[ ! -e "$option_loc_4/drawpile_icons/rpi-logo-img.png" ]]; then
				echo Downloading image to use for RPi-Monitor Shortcut.
				echo
				sudo $wget_or_wget2_quiet_progress https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/images/rpi-logo-img.png -O $option_loc_4/drawpile_icons/rpi-logo-img.png
			else
				echo Image already downloaded to use for RPi-Monitor Shortcut.
			fi
			echo
			if [[ -d "$option_loc_2" ]]; then
			
			
				if [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ] && [[ ! -e "$option_loc_2/RPi-Monitor.desktop" ]]; then
					cat <<EOF | sudo tee $option_loc_2/RPi-Monitor.desktop >/dev/null
[Desktop Entry]
Name=RPi-Monitor
Comment=RPi-Monitor Web Page
Terminal=false
Exec=/usr/bin/chromium %U http://$pihostname.local:8888
Type=Application
#Icon=/usr/share/rpimonitor/web/img/logo.png
Icon=$option_loc_4/drawpile_icons/rpi-logo-img.png
Name[en_GB]=RPi-Monitor
EOF
				elif [[ ! -e "$option_loc_2/RPi-Monitor.desktop" ]]; then
					echo Creating shortcut for RPi-Monitor on Desktop.
					echo
					cat <<EOF | sudo tee $option_loc_2/RPi-Monitor.desktop >/dev/null
[Desktop Entry]
Name=RPi-Monitor
Comment=RPi-Monitor Web Page
Terminal=false
Exec=chromium-browser http://$pihostname.local:8888
Type=Application
#Icon=/usr/share/rpimonitor/web/img/logo.png
Icon=$option_loc_4/drawpile_icons/rpi-logo-img.png
Name[en_GB]=RPi-Monitor
EOF
					sudo chown $current_username $option_loc_2/RPi-Monitor.desktop
					sudo chmod 754 $option_loc_2/RPi-Monitor.desktop
				else
					echo Shortcut for RPi-Monitor already exists on Desktop.
				fi
			fi
		elif [ "$RPi_Monitor_Status" == "2" ]; then
			echo skipping installation of RPi-Monitor.
		else
			echo Invalid selection option, skipping installation of RPi-Monitor.
		fi
		sudo sed -i '\!^RPi_Monitor_Status =!{h;s!=.*!= '"$RPi_Monitor_Status"'!};${x;\!^$!{s!!RPi_Monitor_Status = '"$RPi_Monitor_Status"'!;H};x}' $app_installation_status_file
	else
		echo "This message should not be visible."
	fi
else	
	echo "${bold}${red}Not on Raspberry Pi, skipping installation prompt for RPi-Monitor.${normal}"
	RPi_Monitor_Status=2
	sudo sed -i '\!^RPi_Monitor_Status =!{h;s!=.*!= '"$RPi_Monitor_Status"'!};${x;\!^$!{s!!RPi_Monitor_Status = '"$RPi_Monitor_Status"'!;H};x}' $app_installation_status_file
fi
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

function certbot_configure_deploy_hook_function () {
	sudo sed -i -e '$adeploy-hook = systemctl reload nginx.service' /etc/letsencrypt/cli.ini

<<comment_EOF_delete	
	# Pretty sure this is no longer needed, since apparently this error occurs with: sudo certbot renew
	# deploy-hook command "systemctl reload drawpile-srv.service" returned error code 3
	##Error output from deploy-hook command systemctl:
	# Failed to reload drawpile-srv.service: Job type reload is not applicable for unit drawpile-srv.service.
	
	if [ "$dp_srv_startup" == "1" ]; then
		sudo sed -i -e '$adeploy-hook = systemctl reload drawpile-srv.socket' /etc/letsencrypt/cli.ini
		sudo sed -i -e '$adeploy-hook = systemctl reload drawpile-srv.service' /etc/letsencrypt/cli.ini
	elif [ "$dp_srv_startup" == "2" ]; then
		sudo sed -i -e '$adeploy-hook = systemctl reload drawpile-srv.service' /etc/letsencrypt/cli.ini
	else
		sudo sed -i -e '$adeploy-hook = systemctl reload drawpile-srv.service' /etc/letsencrypt/cli.ini
	fi
comment_EOF_delete
}

function testing_config_for_certbot_function () {
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo
	echo "${bold}${cyan}***** Reconfiguring Lets Encrypt Certs now that setup is complete . . . *****${normal}"
	echo
	echo 1 | sudo certbot --nginx -d $hostname
	echo
	echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo
	echo "${bold}${cyan}***** Testing Lets Encrypt Certbot config for auto renewal . . . *****${normal}"
	echo
	# echo "${bold}${cyan}Stopping NGINX web server ... ${normal}"
	# sudo systemctl stop --now nginx.service
	# echo
	# Check Certificate Info
	# sudo certbot certificates
	#
	echo "${bold}${cyan}Initiating certbot renewal dry run ... ${normal}"
	sudo certbot renew --dry-run
	echo
	# echo "${bold}${cyan}Starting NGINX web server ... ${normal}"
	# sudo systemctl start --now nginx.service
	echo
	echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo
	echo "You should get a message similar to the following near the bottom."
	echo
	echo "Congratulations, all simulated renewals succeeded:"
	echo "  $ssl_fullchain_certificate (success)"
	echo
	echo "${bold}${red}Note that if you did not:${normal} something was done wrong or is configured"
	echo "differently than this script was expecting. The server will not"
	echo "behave as intended."

<<comment_EOF_delete
	echo "${bold}Note:${normal} An error message indicating the following:"
	echo "${red}     Dry run: skipping deploy hook command: systemctl restart drawpile-srv.service${normal}"
	echo "is not necessarily a sign of failure. I haven't yet tested this"
	echo "as Raspbian has an older version of certbot that will not restart"
	echo "the Drawpile server if no cert renewal actually occurred."
	echo "It is currently believed this is needed to read the new SSL cert"
	echo "when they are generated so users can connect."
comment_EOF_delete
	echo
	# The following command with deploy hooks appears to only be available to recent versions of certbot.
	# sudo certbot renew --dry-run --run-deploy-hooks

	if [[ "$is_apache_2_installed" = "(none)" ]]; then
		# Do nothing as no error was detected.
		# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
		:
	elif [[ $is_apache_2_installed == *.* ]]; then
		echo "${bold}${red}*** ONLY IF ERROR ABOVE. OTHERWISE IGNORE WARNING ***${normal}"
		echo "${bold}${red}Apache appears to be installed and will need to be manually${normal}"
		echo "${bold}${red}configured to work with certbot if port 80 is in use.${normal}"
		echo "${bold}${red}*** ONLY IF ERROR ABOVE. OTHERWISE IGNORE WARNING ***${normal}"
	else
		# Do nothing as no error was detected.
		# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
		:
	fi
	echo
	echo "If all is well, press any key to continue set up for automatic"
	echo "SSL Key renewal by certbot."
	echo
	pause
	echo
	#Files are located here: /usr/lib/systemd/system/
	# sudo systemctl enable --now /usr/lib/systemd/system/certbot.service
	# sudo systemctl enable --now certbot.service
	
	if [ "`systemctl is-enabled certbot.timer`" = "enabled" ]; then
		echo "${bold}${green}Service certbot.timer is already enabled. No action required.${normal}"
	elif [ "`systemctl is-enabled certbot.timer`" = "disabled" ]; then
		echo "${bold}${red}Service certbot.timer is not enabled. Enabling service.${normal}"
		echo
		sudo systemctl enable --now certbot.timer
		echo
		sudo systemctl status certbot.timer --no-pager -l
	elif [ "`systemctl is-enabled certbot-renew.timer`" = "enabled" ]; then
		echo "${bold}${green}Service certbot-renew.timer is already enabled. No action required.${normal}"
	elif [ "`systemctl is-enabled certbot-renew.timer`" = "disabled" ]; then
		echo "Service certbot-renew.timer is not enabled. Enabling service."
		echo
		sudo systemctl enable --now certbot-renew.timer
		echo
		sudo systemctl status certbot-renew.timer --no-pager -l
	else
		echo "${bold}${red}Error: Could not locate certbot timer service.${normal}"
	fi
	wait $!
}

if [ "$ssl_encryption_config" == "1" ] || [ "$ssl_encryption_config" == "3" ]; then
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	# echo 'Press 1 for Self Signed Certificates' / # echo 'Press 3 for no SSL security.'
	echo "${bold}${green}SSL Encryption Config set to 1 or 3, skipping certbot testing and timer.${normal}"
	# Do nothing as no error was detected.
	# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
elif [ "$ssl_encryption_config" == "2" ] || [[ "$ssl_encryption_config" != "1" && "$ssl_encryption_config" != "3" ]]; then
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	# echo 'Press 2 for Lets Encrypt'
	# echo Invalid option selected. Assuming option 2 intended.
	echo "${invis}SSL Encryption Config set to 2 or invalid option, certbot testing required.${normal}"
	# The options below configured the server to use SSL, so restarting Drawpile systemd services would be necessary.
	if [ "$systemd_selection" == "1" ] || [ "$systemd_selection" == "2" ] || [ "$systemd_selection" == "3" ] || [ "$systemd_selection" == "4" ] || [ "$systemd_selection" == "6" ] || [ "$systemd_selection" == "8" ] ||  [ "$systemd_selection" == "11" ]; then
		echo "${bold}${yellow}The systemd_selection was set to 1, 2, 3, 4, 6, 8, or 11.${normal}"
		certbot_configure_deploy_hook_function
		testing_config_for_certbot_function
	elif [ "$systemd_selection" == "5" ] || [ "$systemd_selection" == "7" ] || [ "$systemd_selection" == "9" ] || [ "$systemd_selection" == "10" ] || [ "$systemd_selection" == "12" ] || [ "$systemd_selection" == "13" ] || [ "$systemd_selection" == "14" ] || [ "$systemd_selection" == "15" ] || [ "$systemd_selection" == "16" ] || [ "$systemd_selection" == "17" ] || [ "$systemd_selection" == "18" ] || [ "$systemd_selection" == "19" ] || [ "$systemd_selection" == "20" ]; then
		# Numbers 5, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, and 20 option do not use SSL
		echo "${bold}${green}The systemd_selection was set to 5, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, or 20, and do not use SSL.${normal}"
		# Do nothing as no error was detected.
		# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
	else
		# This is because the user provided invalid input, which assumed the use of SSL certs with systemd configuration.
		echo "${bold}${yellow}SSL Encryption Config set to invalid option, certbot testing required.${normal}"
		certbot_configure_deploy_hook_function
		testing_config_for_certbot_function
	fi
else
	echo "${bold}${red}Error: SSL Encryption Config is somehow wrong for certbot timer. Skipping step.${normal}"
	# Do nothing as no error was detected.
	# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
fi
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
echo "${bold}${cyan}*****Enable Drawpile External Authentication . . .*****${normal}"
echo
variable_to_read_1="drawpile_external_authentication"
variable_to_read_2=""
variable_to_read_3=""

value_description_1="Enable Drawpile External Authentication"
value_description_2=" "
value_description_3="1 - Enable External Authentication."
value_description_4="2 - Do not Enable External Authentication."

read_stored_config_value_query_function

if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	drawpile_external_authentication=$read_stored_config_value_query_1
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	echo
	echo 'Drawpile now supports saved username logins. You can choose to enable this'
	echo 'now or do so later manually in the web admin web page.'
	echo
	echo "${underline}Validation key (for manual configuration:${normal}"
	echo '     9eJ2tMJlqgSqHOIK/GI/qzS14WqIxHeB1Im5Hs/CCCk='
	# 9 echo Jenga 2 tango Mary Jenga lima quebec green Sierra quebec Hotel Oscar India Kite / Green India / quebec zebra Sierra 1 4 Whiskey quebec India x-ray Hotel echo Bravo 1 India mary 5 Hotel sierra / Charlie Charlie Charlie kite =
	echo
	echo "${bold}Read more on External authentication${normal}:"
	echo "     https://drawpile.net/help/server/  -or-  https://docs.drawpile.net/help/tech/extauth"
	echo "     https://docs.drawpile.net/help/server/serverconfig#external-authentication-user-group"
	echo
	echo "${underline}Please note:${normal} any accounts you create on your server will override any"
	echo "     externally registered accounts. Other settings will be changed as"
	echo "     well to work with external authentication. If you dislike any of"
	echo "     these changes, you can manually toggle it off in web admin."
	echo
	echo " * External Authentication option is enabled."
	echo " * External Authentication Validation key is inserted."
	if [[ $community == "valid" ]]; then
		echo " * External Authentication group is set to: $community_slug"
	elif [[ $community == "invalid" ]]; then
		echo " * External Authentication group is set to: NULL (aka blank, no value)"
	else
		echo " * External Authentication group is set to: NULL (aka blank, no value)"
		echo "         ${bold}${red}This message should not be visible for external authentication${normal}"
		echo "         ${bold}${red}community status.${normal}"
	fi
	echo "     - ${underline}User group:${normal} should be blank, unless you're"
	echo "         part of the Drawpile community page ( https://drawpile.net/communities/ ). "
	echo "         In which case, the part to type in will be after 'communities/'"
	echo "         and before the final forward slash /. Such as 'your-community-name'"
	echo "         in the following hyperlink example: "
	echo "              https://drawpile.net/communities/your-community-name/"
	echo " * Externally Authenticated Mods are disabled."
	echo " * Externally Authenticated Hosts are set to false."
	echo " * Externally Authenticated Avatars are enabled."
	echo " * Guest logins are allowed when the external authentication server"
	echo "     cannot be contacted."
	echo
	echo "Would you like to enable this feature automatically?"
	echo "     1 - Enable External Authentication."
	echo "     2 - Do not Enable External Authentication."
	echo
	while :; do
	read -r -p "${bold}${cyan}Enter a number and hit enter to continue${normal}: " drawpile_external_authentication
	echo
		[[ $drawpile_external_authentication =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $drawpile_external_authentication >= 1 && $drawpile_external_authentication <= 2)); then
			break
		else
			echo "${red}${bold}Invalid number selection, try again.${normal}"
			echo
			echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
			echo
		fi
	done
	
	if [ "$drawpile_external_authentication" == "1" ]; then
		drawpile_external_authentication_inserted=$( grep -m 1 "drawpile_external_authentication_inserted = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
		
		if [[ $community == "valid" ]]; then
			if [ "$drawpile_external_authentication_inserted" != "yes" ]; then
				echo "Inserted setting for external authentication to server"
				echo "database."
				echo
				if ! echo "insert into settings values ('extauthkey', '9eJ2tMJlqgSqHOIK/GI/qzS14WqIxHeB1Im5Hs/CCCk='), ('extauth', 'true'), ('extauthgroup', '$community_slug'), ('extauthmod', 'false'), ('extauthhost', 'false'), ('extAuthAvatars', 'true'), ('extauthfallback', 'true');" | sudo sqlite3 /home/drawpileuser/server.db ; then
					sudo sed -i '\!^drawpile_external_authentication_inserted =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!drawpile_external_authentication_inserted = '"no"'!;H};x}' $drawpile_configuration_values_file
					command_die "${bold}${red}Command 'Failed to insert external authentication token into server database.${normal}"
				else
					echo "${bold}${green}Successful insertion of value into server database.${normal}"
					sudo sed -i '\!^drawpile_external_authentication_inserted =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!drawpile_external_authentication_inserted = '"yes"'!;H};x}' $drawpile_configuration_values_file
				fi
			else
				echo "${bold}${green}External authentication token already inserted into server settings database file.${normal}"
			fi
		elif [[ $community == "invalid" ]]; then
			if [ "$drawpile_external_authentication_inserted" != "yes" ]; then
				echo "Inserted setting for external authentication to server"
				echo "database."
				echo
				if ! echo "insert into settings values ('extauthkey', '9eJ2tMJlqgSqHOIK/GI/qzS14WqIxHeB1Im5Hs/CCCk='), ('extauth', 'true'), ('extauthgroup', NULL), ('extauthmod', 'false'), ('extauthhost', 'false'), ('extAuthAvatars', 'true'), ('extauthfallback', 'true');" | sudo sqlite3 /home/drawpileuser/server.db ; then
					sudo sed -i '\!^drawpile_external_authentication_inserted =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!drawpile_external_authentication_inserted = '"no"'!;H};x}' $drawpile_configuration_values_file
					command_die "${bold}${red}Command 'Failed to insert external authentication token into server database.${normal}"
				else
					echo "${bold}${green}Successful insertion of value into server database.${normal}"
					sudo sed -i '\!^drawpile_external_authentication_inserted =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!drawpile_external_authentication_inserted = '"yes"'!;H};x}' $drawpile_configuration_values_file
				fi
			else
				echo "${bold}${green}External authentication token already inserted into server settings database file.${normal}"
			fi
		else
			echo "${bold}${red}This message should not be visible for external authentication community status.${normal}"
		fi
	elif [ "$drawpile_external_authentication" == "2" ]; then		
		echo "If values were previously inserted into database, they"
		echo "will be removed from the database."
		
		echo "delete from settings where key = 'extauthkey'" | sudo sqlite3 /home/drawpileuser/server.db
		echo "delete from settings where key = 'extauth'" | sudo sqlite3 /home/drawpileuser/server.db
		echo "delete from settings where key = 'extauthgroup'" | sudo sqlite3 /home/drawpileuser/server.db
		echo "delete from settings where key = 'extauthmod'" | sudo sqlite3 /home/drawpileuser/server.db
		echo "delete from settings where key = 'extauthhost'" | sudo sqlite3 /home/drawpileuser/server.db
		echo "delete from settings where key = 'extAuthAvatars'" | sudo sqlite3 /home/drawpileuser/server.db
		echo "delete from settings where key = 'extauthfallback'" | sudo sqlite3 /home/drawpileuser/server.db
		
		sudo sed -i '\!^drawpile_external_authentication_inserted =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!drawpile_external_authentication_inserted = '"no"'!;H};x}' $drawpile_configuration_values_file
	else
		echo "${bold}${red}This message for the external authentication token should not be visible.${normal}"
	fi

	# Useful site to check SQL Table --> https://sqliteviewer.app
	
	# if [ "$drawpile_external_authentication" == "1" ]; then
	# 	# Old value below
	# 	# echo "insert into settings values ('extauthkey', '9eJ2tMJlqgSqHOIK/GI/qzS14WqIxHeB1Im5Hs/CCCk='), ('extauth', 'true'), ('extauthgroup', 'drawpile');" | sudo sqlite3 /home/drawpileuser/server.db
	# 	echo "insert into settings values ('extauthkey', '9eJ2tMJlqgSqHOIK/GI/qzS14WqIxHeB1Im5Hs/CCCk='), ('extauth', 'true'), ('extauthgroup', 'drawpile'), ('extauthmod', 'false'), ('extauthhost', 'false'), ('extAuthAvatars', 'true'), ('extauthfallback', 'true');" | sudo sqlite3 /home/drawpileuser/server.db
	# 	echo
	# 	echo "Inserted setting for external authentication to server"
	# 	echo "database."
	# elif [ "$drawpile_external_authentication" == "2" ]; then
	# 	echo "Did not add setting for external authentication to server."
	# else
	# 	echo "This message should not be visible for Drawpile external authentication."
	# fi
	sudo sed -i '\!^drawpile_external_authentication =!{h;s!=.*!= '"$drawpile_external_authentication"'!};${x;\!^$!{s!!drawpile_external_authentication = '"$drawpile_external_authentication"'!;H};x}' $drawpile_configuration_values_file
	echo
else
	echo "This message should not be visible."
fi
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
echo "${bold}${cyan}***** Configure Journalctl Logging Limits . . . *****${normal}"
echo
function journalctl_set_size_function () {
	echo "${bold}${cyan}Please select a size limit by number only:${normal}"
	echo "1 -    512 Megabytes (0.5 Gigabytes)"
	echo "2 -  1,024 Megabytes (1 Gigabyte)"
	echo "3 -  2,048 Megabytes (2 Gigabytes)"
	echo "4 -  4,096 Megabytes (4 Gigabytes) - Default Maximum"
	echo "5 -  8,192 Megabytes (8 Gigabytes)"
	echo "6 - 16,384 Megabytes (16 Gigabytes)"
	echo
	while :; do
		read -r -p "${bold}${cyan}Enter a number and hit enter to continue:${normal} " journalctl_systemmaxuse
		[[ $journalctl_systemmaxuse =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $journalctl_systemmaxuse >= 1 && $journalctl_systemmaxuse <= 6 )); then
			break
		else
			echo
			echo "Invalid number selection, try again."
			echo
			echo '--------------------------------------------------------------------------------'
			echo
		fi
	done
	if [[ "$journalctl_systemmaxuse" = "1" ]]; then journalctl_systemmaxuse="512M"; fi
	if [[ "$journalctl_systemmaxuse" = "2" ]]; then journalctl_systemmaxuse="1024M"; fi
	if [[ "$journalctl_systemmaxuse" = "3" ]]; then journalctl_systemmaxuse="2048M"; fi
	if [[ "$journalctl_systemmaxuse" = "4" ]]; then journalctl_systemmaxuse="4096M"; fi
	if [[ "$journalctl_systemmaxuse" = "5" ]]; then journalctl_systemmaxuse="8192M"; fi
	if [[ "$journalctl_systemmaxuse" = "6" ]]; then journalctl_systemmaxuse="16384M"; fi
}
function journalctl_set_time_function () {
	echo "${bold}${cyan}Please select a time frame by number only:${normal}"
	echo "1 - 14 days"
	echo
	echo "2 - 1 month"
	echo "3 - 2 months"
	echo "4 - 3 months"
	echo "5 - 6 months"
	echo
	echo "6 - 1 year"
	echo "7 - 2 years"
	echo
	echo "${bold}${red}Note:${normal} This does not set a size limit, and very busy servers may still fill up the disk."
	echo
	while :; do
		read -r -p "${bold}${cyan}Enter a number and hit enter to continue:${normal} " journalctl_maxretentionsec
		[[ $journalctl_maxretentionsec =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $journalctl_maxretentionsec >= 1 && $journalctl_maxretentionsec <= 7 )); then
			break
		else
			echo
			echo "Invalid number selection, try again."
			echo
			echo '--------------------------------------------------------------------------------'
			echo
		fi
	done
	if [[ "$journalctl_maxretentionsec" = "1" ]]; then journalctl_maxretentionsec="14day"; fi
	if [[ "$journalctl_maxretentionsec" = "2" ]]; then journalctl_maxretentionsec="1month"; fi
	if [[ "$journalctl_maxretentionsec" = "3" ]]; then journalctl_maxretentionsec="2month"; fi
	if [[ "$journalctl_maxretentionsec" = "4" ]]; then journalctl_maxretentionsec="3month"; fi
	if [[ "$journalctl_maxretentionsec" = "5" ]]; then journalctl_maxretentionsec="6month"; fi
	if [[ "$journalctl_maxretentionsec" = "6" ]]; then journalctl_maxretentionsec="1year"; fi
	if [[ "$journalctl_maxretentionsec" = "7" ]]; then journalctl_maxretentionsec="2year"; fi
}
variable_to_read_1="journalctl_log_limit"
variable_to_read_2=""
variable_to_read_3=""

value_description_1="Configure Journalctl Logging Limits"
value_description_2=" "
value_description_3="1 - By file size"
value_description_4="2 - By file size and by length of time"
value_description_5="3 - By length of time"
value_description_6=" "
value_description_7="9 - Do not limit size of journalctl logs"

read_stored_config_value_query_function
if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	journalctl_log_limit=$read_stored_config_value_query_1
	journalctl_log_limit_read_from_file=yes
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	journalctl_log_limit_read_from_file=no
	echo
	echo "${bold}${cyan}Current Disk Usage:${normal}"
	df -h
	echo
	echo "${bold}${cyan}Logging Disk Usage:${normal}"
	sudo journalctl --disk-usage
	echo
	echo "${bold}${cyan}Why should I do this?${normal}"
	echo "The purpose of limiting logging is that excessively large logs could"
	echo " take up a large amount of disk space. Over time, that prevents the server"
	echo " from operating properly due to no disk space available."
	echo 
	echo "Note that journalctl logs up to 10% of drive space or 4 GB at max, which"
	echo " ever value is smaller. Also note that changing this setting requires a "
	echo " system reboot once the script has completed all operations in order to"
	echo " take effect."
	echo
	if [[ ! -d "/etc/systemd/journald.conf.d" ]]; then
		echo "If configured, the script will create a conf file here:"
	fi
	if [[ -d "/etc/systemd/journald.conf.d" ]]; then
		if test -n "$(find /etc/systemd/journald.conf.d -maxdepth 1 -name '*.conf' -print -quit)"; then echo "There are journalctl conf files already."; echo "Try investigating this directory manually:"; fi
	fi
	echo "     /etc/systemd/journald.conf.d/journald-local.conf"
	echo
	echo "${bold}${cyan}Would you like to limit the size of journalctl logs on the system:${normal}"
	echo " 1 - By file size"
	echo " 2 - By file size and by length of time"
	echo " 3 - By length of time"
	echo "     ${bold}${red}Note:${normal} This does not set a size limit, and very busy servers may still"
	echo "           fill up the disk."
	echo
	echo " 9 - Do not limit size of journalctl logs"
	echo
	while :; do
		read -r -p "${bold}${cyan}Enter a number and hit enter to continue:${normal} " journalctl_log_limit
		[[ $journalctl_log_limit =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $journalctl_log_limit >= 1 && $journalctl_log_limit <= 3 || $journalctl_log_limit == 9 )); then
			break
		else
			echo
			echo "Invalid number selection, try again."
			echo
			echo '--------------------------------------------------------------------------------'
			echo
		fi
	done
	echo
	sudo sed -i '\!^journalctl_log_limit =!{h;s!=.*!= '"$journalctl_log_limit"'!};${x;\!^$!{s!!journalctl_log_limit = '"$journalctl_log_limit"'!;H};x}' $drawpile_configuration_values_file
	if [ "$journalctl_log_limit" == "1" ]; then
		journalctl_set_size_function
		journalctl_systemmaxuse="SystemMaxUse=$journalctl_systemmaxuse"
		journalctl_maxretentionsec="#MaxRetentionSec="
	elif [ "$journalctl_log_limit" == "2" ]; then
		journalctl_set_size_function
		echo
		journalctl_set_time_function
		journalctl_systemmaxuse="SystemMaxUse=$journalctl_systemmaxuse"
		journalctl_maxretentionsec="MaxRetentionSec=$journalctl_maxretentionsec"
	elif [ "$journalctl_log_limit" == "3" ]; then
		journalctl_set_time_function
		journalctl_systemmaxuse="#SystemMaxUse="
		journalctl_maxretentionsec="MaxRetentionSec=$journalctl_maxretentionsec"
	elif [ "$journalctl_log_limit" == "9" ]; then
		echo "Skipping setup of journalctl limitations."
	else
		echo "This message should not be visible for journalctl."
	fi
	if [ "$journalctl_log_limit" != "9" ]; then
		sudo sed -i '\!^journalctl_systemmaxuse =!{h;s!=.*!= '"$journalctl_systemmaxuse"'!};${x;\!^$!{s!!journalctl_systemmaxuse = '"$journalctl_systemmaxuse"'!;H};x}' $drawpile_configuration_values_file
		sudo sed -i '\!^journalctl_maxretentionsec =!{h;s!=.*!= '"$journalctl_maxretentionsec"'!};${x;\!^$!{s!!journalctl_maxretentionsec = '"$journalctl_maxretentionsec"'!;H};x}' $drawpile_configuration_values_file
		if [[ ! -d "/etc/systemd/journald.conf.d" ]]; then
			sudo mkdir -p -v "/etc/systemd/journald.conf.d"
		fi
		cat <<EOF | sudo tee "/etc/systemd/journald.conf.d/journald-local.conf" >/dev/null
#  This file is part of systemd.
#
#  systemd is free software; you can redistribute it and/or modify it under the
#  terms of the GNU Lesser General Public License as published by the Free
#  Software Foundation; either version 2.1 of the License, or (at your option)
#  any later version.
#
# Entries in this file show the compile time defaults. Local configuration
# should be created by either modifying this file, or by creating "drop-ins" in
# the journald.conf.d/ subdirectory. The latter is generally recommended.
# Defaults can be restored by simply deleting this file and all drop-ins.
#
# Use 'systemd-analyze cat-config systemd/journald.conf' to display the full config.
#
# See journald.conf(5) for details.
# Or go to this web page:
# https://www.freedesktop.org/software/systemd/man/journald.conf.html

[Journal]
#Storage=auto
#Compress=yes
#Seal=yes
#SplitMode=uid
#SyncIntervalSec=5m
#RateLimitIntervalSec=30s
#RateLimitBurst=10000
$journalctl_systemmaxuse
#     SystemMaxUse=
#SystemKeepFree=
#SystemMaxFileSize=
#SystemMaxFiles=100
#RuntimeMaxUse=
#RuntimeKeepFree=
#RuntimeMaxFileSize=
#RuntimeMaxFiles=100
$journalctl_maxretentionsec
#     MaxRetentionSec=
#MaxFileSec=1month
#ForwardToSyslog=yes 	# Debian, Ubuntu, Raspbian
#ForwardToSyslog=no 	# Fedora
#ForwardToKMsg=no
#ForwardToConsole=no
#ForwardToWall=yes
#TTYPath=/dev/console
#MaxLevelStore=debug
#MaxLevelSyslog=debug
#MaxLevelKMsg=notice
#MaxLevelConsole=info
#MaxLevelWall=emerg
#LineMax=48K
#ReadKMsg=yes
#Audit=no				# Debian, Ubuntu, Raspbian
#Audit=yes				# Fedora
EOF
	echo
	echo "To reload the configuration, you should restart the server when the script"
	echo "has completed, as this is much easier than reloading every single running"
	echo "service."
	echo
	echo "Read more on why this is here (warning for technical content):"
	echo "https://unix.stackexchange.com/questions/253203/how-to-tell-journald-to-re-read-its-configuration"
	echo
	echo "You can reboot the system with this command:"
	echo "sudo reboot"
	echo
	echo "Waiting 30 seconds before continuing script."
	sleep 30
	fi
else
	echo "This message should not be visible."
fi
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
echo "${bold}${cyan}*****Scripts to be downloaded for managing server. . . .*****${normal}"
echo "${bold}${red}*****     (To be completed at a later date)             *****${normal}"
echo

sudo mkdir -p -v "$dp_install_loc/Programs/Drawpile-Srv-Files/server-scripts/"

if [[ "$systemd_selection" == "1" || "$systemd_selection" == "2" || "$systemd_selection" == "4" || "$systemd_selection" == "5" || "$systemd_selection" == "9" || "$systemd_selection" == "14" || "$systemd_selection" == "15" || "$systemd_selection" == "17" ]]; then
	# Support Session backed Files 1, 2, 4, 5, 9, 14, 15, 17
	echo
	if ! sudo crontab -u root -l | grep '#Drawpile Archive File Cleanup' > /dev/null 2>&1 || [ ! -e "$dp_install_loc/Programs/Drawpile-Srv-Files/server-scripts/drawpile-file-backed-sessions-management" ]; then
		echo "${bold}${cyan}File backed sessions in use, downloading script to find content for ${normal}"
		echo "${bold}${cyan}     recovery and delete old backups ${normal}"
		echo "${bold}${cyan}     (or not set for automated cleanup). ${normal}"
		echo
		sudo $wget_or_wget2_quiet_progress "https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/testing/drawpile-file-backed-sessions-management" -O "$dp_install_loc/Programs/Drawpile-Srv-Files/server-scripts/drawpile-file-backed-sessions-management"
		sudo chmod 750 "$dp_install_loc/Programs/Drawpile-Srv-Files/server-scripts/drawpile-file-backed-sessions-management"
		echo
		echo "This script can be used to search the text files and download them for"
		echo "easy retrieval of session recordings with WinSCP (or other methods)."
		echo
		echo "If you intend to enable 'Archive Terminated Sessions' in web admin, this"
		echo "script should be run soon after the server is set up. Those files can be"
		echo "searched to use as emergency backups to restore data, but if the server"
		echo "fills up it will stop working completely."
		echo
		echo "You can configure an automated cleanup with the following instructions,"
		echo "and the script can be ran now if you want. If you plan on doing it later,"
		echo "please make a brief note for reference:"
		echo
		echo " - Load up the proper directory noted below."
		echo "     cd $dp_install_loc/Programs/Drawpile-Srv-Files/server-scripts"
		echo " - Run the script with this command: "
		echo "     ./drawpile-file-backed-sessions-management"
		echo " - Option 8 to 'Delete old session archives.'"
		echo " - Set a number of days and file size according to the instructions."
		echo " - You will then have a chance to make the job run daily at 12:00 AM."
		echo 
		echo 
		echo "Would you like to run the script now?"
		echo
		while :; do
			read -r -p "${bold}${red}Without quotes, type 'yes' or 'no':${normal} " dp_file_backed_sessions_mgmt_script_run
			echo
			if [ "$dp_file_backed_sessions_mgmt_script_run" == "y" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "Y" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "yes" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "YES" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "Yes" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "n" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "N" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "no" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "NO" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "No" ]; then
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done
		
		echo
		
		if [ "$dp_file_backed_sessions_mgmt_script_run" == "y" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "Y" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "yes" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "YES" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "Yes" ]; then
			echo "${bold}${green}Running Script to set up automated cleanup for ${normal}"
			echo "${bold}${green}     file-backed sessions. ${normal}"
			echo 
			echo "${bold}${green}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
			echo "${bold}${green}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
			echo "${bold}${green}~~~~~~~~~~~~~~~~~ Starting Search and Automated Cleanup Script ~~~~~~~~~~~~~~~~~${normal}"
			echo "${bold}${green}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
			echo "${bold}${green}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
			sudo "$dp_install_loc/Programs/Drawpile-Srv-Files/server-scripts/./drawpile-file-backed-sessions-management"
			echo "${bold}${green}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
			echo "${bold}${green}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
			echo "${bold}${green}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Resuming Setup Script ~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
			echo "${bold}${green}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
			echo "${bold}${green}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
		elif [ "$dp_file_backed_sessions_mgmt_script_run" == "n" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "N" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "no" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "NO" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "No" ]; then
			echo "${bold}${red}Skipping script configuration for now. ${normal}"
		else
			echo "${bold}${red}This message should not be visible for: dp_file_backed_sessions_mgmt_script_run ${normal}"
		fi
		
		# sudo wget -q --show-progress "https://raw.githubusercontent.com/Bluestrings-Drawpile/PiDrawpile/master/testing/drawpile-file-backed-sessions-management" -O "$dp_install_loc/Programs/Drawpile-Srv-Files/server-scripts/drawpile-file-backed-sessions-management"
	else
		echo "${bold}${cyan}File backed sessions in use, script already downloaded to find content ${normal}"
		echo "${bold}${cyan}      for recovery and delete old backups.  ${normal}"
		echo
		echo "Run script directly for updates to the script."
	fi
fi

sudo chmod 750 "$dp_install_loc/Programs/Drawpile-Srv-Files/server-scripts/" -R
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo

# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
# End Section of Scripts to be generated for managing server. 
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# Removal of Testing Distro Changes if Previously Applied
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

if [ "$testing_package_decision" == "y" ] || [ "$testing_package_decision" == "Y" ] || [ "$testing_package_decision" == "yes" ] || [ "$testing_package_decision" == "YES" ] || [ "$testing_package_decision" == "Yes" ] ; then
	
	sudo sed -i '\!^testing_package_decision =!{h;s!=.*!= '"$testing_package_decision"'!};${x;\!^$!{s!!testing_package_decision = '"$testing_package_decision"'!;H};x}' $drawpile_configuration_values_file
	echo
	echo "${bold}${cyan}*****Removing Testing Package Repo for updated packages. . . .*****${normal}"
	echo
	# --------------------------------------------------------------------------------
	# --------------------------------------------------------------------------------
	if [[ "$file_buster_pref_exist" = "yes" ]]; then
		echo "File buster.pref already existed prior to script modification."
		echo "No changes made to this file."
	elif [[ "$file_buster_pref_exist" = "no" ]]; then
		echo "File buster.pref did not exist prior to script modification."
		echo "Removing this file."
		sudo rm -f /etc/apt/preferences.d/buster.pref
	else
		echo "Cannot determine if file buster.pref existed or not prior"
		echo "to script modification of the system."
		echo
		echo "This message should not be visible."
	fi
	# --------------------------------------------------------------------------------
	if [[ "$file_buster_list_exist" = "yes" ]]; then
		echo "File buster.list already existed prior to script modification."
		echo "No changes made to this file."
	elif [[ "$file_buster_list_exist" = "no" ]]; then
		echo "File buster.list did not exist prior to script modification."
		echo "Removing this file."
		sudo rm -f /etc/apt/sources.list.d/buster.list
	else
		echo "Cannot determine if file buster.list existed or not prior"
		echo "to script modification of the system."
		echo
		echo "This message should not be visible."
	fi
	# --------------------------------------------------------------------------------
	# --------------------------------------------------------------------------------
	if [[ "$file_stretch_pref_exist" = "yes" ]]; then
		echo "File stretch.pref already existed prior to script modification."
		echo "No changes made to this file."
	elif [[ "$file_stretch_pref_exist" = "no" ]]; then
		echo "File stretch.pref did not exist prior to script modification."
		echo "Removing this file."
		sudo rm -f /etc/apt/preferences.d/stretch.pref
	else
		echo "Cannot determine if file stretch.pref existed or not prior"
		echo "to script modification of the system."
		echo
		echo "This message should not be visible."
	fi
	# --------------------------------------------------------------------------------
	if [[ "$file_stretch_list_exist" = "yes" ]]; then
		echo "File stretch.list already existed prior to script modification."
		echo "No changes made to this file."
	elif [[ "$file_stretch_list_exist" = "no" ]]; then
		echo "File stretch.list did not exist prior to script modification."
		echo "Removing this file."
		sudo rm -f /etc/apt/sources.list.d/stretch.list
	else
		echo "Cannot determine if file stretch.list existed or not prior"
		echo "to script modification of the system."
		echo
		echo "This message should not be visible."
	fi
	# --------------------------------------------------------------------------------
	# --------------------------------------------------------------------------------
	echo
	echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
	echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
	echo
elif [ "$testing_package_decision" == "n" ] || [ "$testing_package_decision" == "N" ] || [ "$testing_package_decision" == "no" ] || [ "$testing_package_decision" == "NO" ] || [ "$testing_package_decision" == "No" ] ; then
	sudo sed -i '\!^testing_package_decision =!{h;s!=.*!= '"$testing_package_decision"'!};${x;\!^$!{s!!testing_package_decision = '"$testing_package_decision"'!;H};x}' $drawpile_configuration_values_file
	# Do nothing as no error was detected.
	# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
	:
else
	:
fi
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

function drawpile_custom_shortcut_icon_preference () {
	mkdir -p -v "$option_loc_4/drawpile_icons"
	if [[ -e "$dp_install_loc/drawpile_list_server.png" ]]; then
		echo "Using existing image to use for Drawpile List-Server Shortcut."
		echo "Copying to: $option_loc_4/drawpile_icons"
		echo
		sudo cp "$dp_install_loc/drawpile_list_server.png" "$option_loc_4/drawpile_icons/drawpile_list_server.png"
		list_server_shortcut_png=$option_loc_4/drawpile_icons/drawpile_list_server.png
	else
		sudo $wget_or_wget2_quiet_progress https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/images/drawpile_list_server.png -O $option_loc_4/drawpile_icons/drawpile_list_server.png
		list_server_shortcut_png=$option_loc_4/drawpile_icons/drawpile_list_server.png
	fi

	if [[ -e "$dp_install_loc/drawpile_web_admin.png" ]]; then
		echo "Using existing image to use for Drawpile List-Server Shortcut."
		echo "Copying to: $option_loc_4/drawpile_icons"
		echo 
		sudo cp "$dp_install_loc/drawpile_web_admin.png" "$option_loc_4/drawpile_icons/drawpile_web_admin.png"
		server_web_admin_shortcut_png=$option_loc_4/drawpile_icons/drawpile_web_admin.png
	else
		sudo $wget_or_wget2_quiet_progress https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/images/drawpile_web_admin.png -O $option_loc_4/drawpile_icons/drawpile_web_admin.png
		server_web_admin_shortcut_png=$option_loc_4/drawpile_icons/drawpile_web_admin.png
	fi
	
	sudo chmod 754 $list_server_shortcut_png
	sudo chown $current_username $list_server_shortcut_png
	
	sudo chmod 754 $server_web_admin_shortcut_png
	sudo chown $current_username $server_web_admin_shortcut_png
}
	
if [[ -d "$option_loc_2" ]]; then
	# sudo rm -f "$option_loc_2/Drawpile Admin.desktop" # sudo rm -f "$option_loc_2/Drawpile ListServer.desktop"
	echo "${bold}${cyan}*****Drawpile List Server and Web Admin Shortcuts . . .*****${normal}"
	echo
	echo "Would you like to use a custom icons for Desktop shortcuts to the Drawpile"
	echo "     List Server and Web Admin, or use your largest favicon available?"
	echo
	echo "     If using wanting generic drawpile icons I made, press 1. Or use your own"
	echo "     custom icons for managing web admin and list server), name and place here:"
	echo "       $dp_install_loc/drawpile_list_server.png"
	echo "       $dp_install_loc/drawpile_web_admin.png"
	echo
	echo "     If using favicon (2), will accept these icons, preferring largest first."
	echo "     These icons will be used multiple times for different shortcuts."
	( [[ -e "$dp_install_loc/256.png" ]] && echo "       $dp_install_loc/256.png (In case you want a really high quality icon)" ) || ( [[ -e "$script_directory/256.png" ]] && echo "       $script_directory/256.png (In case you want a really high quality icon)" )
	( [[ -e "$dp_install_loc/128.png" ]] && echo "       $dp_install_loc/128.png (maximum size used by DP client)" ) || ( [[ -e "$script_directory/128.png" ]] && echo "       $script_directory/128.png (maximum size used by DP client)" )
	( [[ -e "$dp_install_loc/64.png" ]] && echo "       $dp_install_loc/64.png" ) || ( [[ -e "$script_directory/64.png" ]] && echo "       $script_directory/64.png" )
	echo
	echo "Press 1 for custom icons, or 2 to use favicons."
	echo
	while :; do
		read -r -p ${bold}${cyan}"Enter your selection now:${normal} " drawpile_shortcut_icon_preference
		[[ $drawpile_shortcut_icon_preference =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $drawpile_shortcut_icon_preference >= 1 && $drawpile_shortcut_icon_preference <= 2 )); then
			break
		else
			echo
			echo "Invalid number selection, try again."
			echo
			echo '--------------------------------------------------------------------------------'
			echo
		fi
	done
	# --------------------------------------------------------------------------------
	if [ "$drawpile_shortcut_icon_preference" == "1" ]; then
		drawpile_custom_shortcut_icon_preference
	elif [ "$drawpile_shortcut_icon_preference" == "2" ]; then
		mkdir -p -v "$option_loc_4/drawpile_icons"
		if [[ -e "$dp_install_loc/256.png" ]]; then
			echo Copying 256x256 favicon image to use for Drawpile Shortcuts.
			echo "$option_loc_4/drawpile_icons/server-shortcut-256.png"
			echo
			sudo cp "$dp_install_loc/256.png" "$option_loc_4/drawpile_icons/server-shortcut-256.png"
			server_shortcut_png=$option_loc_4/drawpile_icons/server-shortcut-256.png
		elif [[ -e "$dp_install_loc/128.png" ]]; then
			echo Copying 128x128 favicon image to use for Drawpile Shortcuts.
			echo "$option_loc_4/drawpile_icons/server-shortcut-128.png"
			echo
			sudo cp "$dp_install_loc/128.png" "$option_loc_4/drawpile_icons/server-shortcut-128.png"
			server_shortcut_png=$option_loc_4/drawpile_icons/server-shortcut-128.png
		elif [[ -e "$dp_install_loc/64.png" ]]; then
			echo Copying 64x64 favicon image to use for Drawpile Shortcuts.
			echo "$option_loc_4/drawpile_icons/server-shortcut-64.png"
			echo
			sudo cp "$dp_install_loc/64.png" "$option_loc_4/drawpile_icons/server-shortcut-64.png"
			server_shortcut_png=$option_loc_4/drawpile_icons/server-shortcut-64.png
		else
			:
		fi
		if [[ -e "$script_directory/256.png" ]]; then
			echo Copying 256x256 favicon image to use for Drawpile Shortcuts.
			echo "$option_loc_4/drawpile_icons/server-shortcut-256.png"
			echo
			sudo cp "$script_directory/256.png" "$option_loc_4/drawpile_icons/server-shortcut-256.png"
			server_shortcut_png=$option_loc_4/drawpile_icons/server-shortcut-256.png
		elif [[ -e "$script_directory/128.png" ]]; then
			echo Copying 128x128 favicon image to use for Drawpile Shortcuts.
			echo "$option_loc_4/drawpile_icons/server-shortcut-128.png"
			echo
			sudo cp "$script_directory/128.png" "$option_loc_4/drawpile_icons/server-shortcut-128.png"
			server_shortcut_png=$option_loc_4/drawpile_icons/server-shortcut-128.png
		elif [[ -e "$script_directory/64.png" ]]; then
			echo Copying 64x64 favicon image to use for Drawpile Shortcuts.
			echo "$option_loc_4/drawpile_icons/server-shortcut-64.png"
			echo
			sudo cp "$script_directory/64.png" "$option_loc_4/drawpile_icons/server-shortcut-64.png"
			server_shortcut_png=$option_loc_4/drawpile_icons/server-shortcut-64.png
		else
			:
		fi
		server_web_admin_shortcut_png=$server_shortcut_png
		list_server_shortcut_png=$server_shortcut_png
		sudo chmod 754 $server_shortcut_png
		sudo chown drawpileuser:drawpileread $server_shortcut_png
	else
		echo "Invalid option selected. Assuming option 1 intended."
		drawpile_shortcut_icon_preference=1
		drawpile_custom_shortcut_icon_preference
	fi
	sudo sed -i '\!^drawpile_shortcut_icon_preference =!{h;s!=.*!= '"$drawpile_shortcut_icon_preference"'!};${x;\!^$!{s!!drawpile_shortcut_icon_preference = '"$drawpile_shortcut_icon_preference"'!;H};x}' $drawpile_configuration_values_file
	echo
	# --------------------------------------------------------------------------------
	if [[ ! -e "$option_loc_2/Drawpile ListServer.desktop" ]] && [[ "$ssl_encryption_config" != "3" ]]; then
		echo Creating shortcut for Drawpile ListServer on Desktop.
		echo
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] || [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" && "$what_architecture" == "Architecture: x86-64" && "$verify_if_this_is_raspbian_or_debian" == "" ]]; then
			cat <<EOF | sudo tee "$option_loc_2/Drawpile ListServer.desktop" >/dev/null
[Desktop Entry]
Name=Drawpile ListServer
Comment=Drawpile ListServer
Terminal=false
Exec=/usr/bin/firefox https://$hostname
Type=Application
Icon=$list_server_shortcut_png
Name[en_GB]=Drawpile ListServer
EOF
			echo
		elif [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ]; then
			cat <<EOF | sudo tee "$option_loc_2/Drawpile ListServer.desktop" >/dev/null
[Desktop Entry]
Name=Drawpile ListServer
Comment=Drawpile ListServer
Terminal=false
Exec=/usr/bin/chromium %U https://$hostname
Type=Application
Icon=$list_server_shortcut_png
Name[en_GB]=Drawpile ListServer
EOF
		else
			# Raspbian for Pi
			cat <<EOF | sudo tee "$option_loc_2/Drawpile ListServer.desktop" >/dev/null
[Desktop Entry]
Name=Drawpile ListServer
Comment=Drawpile ListServer
Terminal=false
Exec=chromium-browser https://$hostname
Type=Application
Icon=$list_server_shortcut_png
Name[en_GB]=Drawpile ListServer
EOF
		fi
		sudo chown $current_username "$option_loc_2/Drawpile ListServer.desktop"
		sudo chmod 754 "$option_loc_2/Drawpile ListServer.desktop"
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] || [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" && "$what_architecture" == "Architecture: x86-64" && "$verify_if_this_is_raspbian_or_debian" == "" ]]; then
			# Trust the Desktop shortcut so it's launchable. --> https://askubuntu.com/questions/1218954/desktop-files-allow-launching-set-this-via-cli
			gio set "$option_loc_2/Drawpile ListServer.desktop" metadata::trusted true
		fi
	else
		if [[ "$ssl_encryption_config" != "3" ]]; then
			echo "Shortcut for Drawpile ListServer already exists on Desktop."
		else
			echo "Server not using SSL, so no ListServer web interface to make a shortcut for it."
		fi
		echo
	fi
	# --------------------------------------------------------------------------------
	if [[ ! -e "$option_loc_2/Drawpile Admin.desktop" ]] && [[ "$ssl_encryption_config" != "3" ]]; then
		echo Creating shortcut for Drawpile Admin on Desktop.
		echo
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] || [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ] && [ "$verify_if_this_is_raspbian_or_debian" == "" ]; then
			cat <<EOF | sudo tee "$option_loc_2/Drawpile Admin.desktop" >/dev/null
[Desktop Entry]
Name=Drawpile Admin
Comment=Drawpile Admin
Terminal=false
Exec=/usr/bin/firefox https://$hostname/admin
Type=Application
Icon=$server_web_admin_shortcut_png
Name[en_GB]=Drawpile Admin
EOF
		elif [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ]; then
			cat <<EOF | sudo tee "$option_loc_2/Drawpile Admin.desktop" >/dev/null
[Desktop Entry]
Name=Drawpile Admin
Comment=Drawpile Admin
Terminal=false
Exec=/usr/bin/chromium %U https://$hostname/admin
Type=Application
Icon=$server_web_admin_shortcut_png
Name[en_GB]=Drawpile Admin
EOF
		else
			# Raspbian for Pi
			cat <<EOF | sudo tee "$option_loc_2/Drawpile Admin.desktop" >/dev/null
[Desktop Entry]
Name=Drawpile Admin
Comment=Drawpile Admin
Terminal=false
Exec=chromium-browser https://$hostname/admin/
Type=Application
Icon=$server_web_admin_shortcut_png
Name[en_GB]=Drawpile Admin
EOF
		fi
		sudo chown $current_username "$option_loc_2/Drawpile Admin.desktop"
		sudo chmod 754 "$option_loc_2/Drawpile Admin.desktop"
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] || [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" && "$what_architecture" == "Architecture: x86-64" && "$verify_if_this_is_raspbian_or_debian" == "" ]]; then
			# Trust the Desktop shortcut so it's launchable. --> https://askubuntu.com/questions/1218954/desktop-files-allow-launching-set-this-via-cli
			gio set "$option_loc_2/Drawpile Admin.desktop" metadata::trusted true
			echo
		fi
	else
		if [[ "$ssl_encryption_config" != "3" ]]; then
			echo "Shortcut for Drawpile Admin already exists on Desktop."
		else
			echo "Server not using SSL, so no Admin interface to make a shortcut for it."
		fi
		echo
	fi
	# --------------------------------------------------------------------------------
	if [[ ! -e "$option_loc_2/Drawpile Admin UI.desktop" ]] && [[ "$ssl_encryption_config" != "3" ]]; then
		echo Creating shortcut for Drawpile Admin UI on Desktop.
		echo
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] || [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ] && [ "$verify_if_this_is_raspbian_or_debian" == "" ]; then
			cat <<EOF | sudo tee "$option_loc_2/Drawpile Admin UI.desktop" >/dev/null
[Desktop Entry]
Name=Drawpile Admin UI
Comment=Drawpile Admin UI
Terminal=false
Exec=/usr/bin/firefox https://$hostname/admin_ui
Type=Application
Icon=$server_web_admin_shortcut_png
Name[en_GB]=Drawpile Admin UI
EOF
		elif [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ]; then
			cat <<EOF | sudo tee "$option_loc_2/Drawpile Admin UI.desktop" >/dev/null
[Desktop Entry]
Name=Drawpile Admin UI
Comment=Drawpile Admin UI
Terminal=false
Exec=/usr/bin/chromium %U https://$hostname/admin_ui
Type=Application
Icon=$server_web_admin_shortcut_png
Name[en_GB]=Drawpile Admin UI
EOF
		else
			# Raspbian for Pi
			cat <<EOF | sudo tee "$option_loc_2/Drawpile Admin UI.desktop" >/dev/null
[Desktop Entry]
Name=Drawpile Admin UI
Comment=Drawpile Admin UI
Terminal=false
Exec=chromium-browser https://$hostname/admin_ui/
Type=Application
Icon=$server_web_admin_shortcut_png
Name[en_GB]=Drawpile Admin UI
EOF
		fi
		sudo chown $current_username "$option_loc_2/Drawpile Admin UI.desktop"
		sudo chmod 754 "$option_loc_2/Drawpile Admin UI.desktop"
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] || [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" && "$what_architecture" == "Architecture: x86-64" && "$verify_if_this_is_raspbian_or_debian" == "" ]]; then
			# Trust the Desktop shortcut so it's launchable. --> https://askubuntu.com/questions/1218954/desktop-files-allow-launching-set-this-via-cli
			gio set "$option_loc_2/Drawpile Admin UI.desktop" metadata::trusted true
			echo
		fi
	else
		if [[ "$ssl_encryption_config" != "3" ]]; then
			echo "Shortcut for Drawpile Admin UI already exists on Desktop."
		else
			echo "Server not using SSL, so no Admin UI interface to make a shortcut for it."
		fi
		echo
	fi
	# --------------------------------------------------------------------------------
	if [[ ! -e "$option_loc_2/Drawpile Admin GUI.desktop" ]]  && [ "$drawpile_build_configuration" != "2" ]  && [ "$drawpile_build_configuration" != "6" ]; then
		echo Creating shortcut for Drawpile Admin GUI on Desktop.
		echo
		cat <<EOF | sudo tee "$option_loc_2/Drawpile Admin GUI.desktop" >/dev/null
[Desktop Entry]
Name=Drawpile Admin GUI
Comment=Drawpile Admin GUI
Terminal=false
Exec=drawpile-srv --gui --remote http://localhost:27780/api/
Type=Application
Icon=$server_web_admin_shortcut_png
Name[en_GB]=Drawpile Admin GUI
EOF
		sudo chown $current_username "$option_loc_2/Drawpile Admin GUI.desktop"
		sudo chmod 754 "$option_loc_2/Drawpile Admin GUI.desktop"
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] || [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" && "$what_architecture" == "Architecture: x86-64" && "$verify_if_this_is_raspbian_or_debian" == "" ]]; then
			# Trust the Desktop shortcut so it's launchable. --> https://askubuntu.com/questions/1218954/desktop-files-allow-launching-set-this-via-cli
			gio set "$option_loc_2/Drawpile Admin GUI.desktop" metadata::trusted true
		fi
	else
		echo "Shortcut for Drawpile Admin GUI already exists on Desktop, or"
		echo "the server is headless and has no interface."
	fi
	echo
	# --------------------------------------------------------------------------------
elif [[ ! -d "$option_loc_2" ]]; then
	my_server_information="$script_directory/My Server Information.txt"
	echo "${bold}${cyan}Creating file in script directory with server info:${normal}"
	echo "     $my_server_information"
	echo
	
	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	# This section is for generating info to save into the file on the server, rather than append to it forever.
	if [[ "$ssl_encryption_config" = "1" ]] || [[ "$ssl_encryption_config" = "2" ]]; then
		display_drawpile_admin_web_page="https://$hostname/admin/

**** Drawpile Web Admin Page Login Information ****
Note: Should only share with minimal number of users
Web Admin Username      = $nginx_username_1
Web Admin Password      = $nginx_htpasswd_1"
	else
		# if [[ "$ssl_encryption_config" = "3" ]]; then 
		display_drawpile_admin_web_page="Not Available without SSL enabled"
	fi
	#---------------------------------------------------------------------------------------------------------------------------------
	if [[ "$ssl_encryption_config" = "1" ]] || [[ "$ssl_encryption_config" = "2" ]]; then 
		if [[ "$list_server_database_connection_string_num" == "1" || "$listserver_database_connection_string" == "none" ]]; then
			display_drawpile__new_admin_web_page="https://$hostname/admin_ui/
		
**** Drawpile New Web Admin Page Login Information ****
Note: Can share with users to gain access to moderation interface
      and they have a user account set up to limit their access.
New Web Admin Username  = $nginx_username_admin_ui_1
New Web Admin Password  = $nginx_htpasswd_admin_ui_1
			
Note: List Server in Read Only Mode.
      This page will not allow login, as the 'new web admin'
      username and password will work to load the page, but
      you'll receive a 404 error with the 'web admin' username
      and password. This is by design since a read only list
      server has nothing to administrate. This is being left
      here as eventually it will be used for administrating
      Drawpile-srv and list server."
		else
			display_drawpile__new_admin_web_page="https://$hostname/admin_ui/
		
**** Drawpile New Web Admin Page Login Information ****
Note: Can share with users to gain access to moderation interface
      and they have a user account set up to limit their access.
New Web Admin Username  = $nginx_username_admin_ui_1
New Web Admin Password  = $nginx_htpasswd_admin_ui_1"		
		fi
	else
		# [[ "$ssl_encryption_config" = "3" ]]; then 
		display_drawpile__new_admin_web_page="Not Available without SSL enabled"
	fi
	#---------------------------------------------------------------------------------------------------------------------------------
	if [ "$drawpile_abuse_report_installation_status" == "y" ] || [ "$drawpile_abuse_report_installation_status" == "Y" ] || [ "$drawpile_abuse_report_installation_status" == "yes" ] || [ "$drawpile_abuse_report_installation_status" == "YES" ] || [ "$drawpile_abuse_report_installation_status" == "Yes" ]; then
		display_drawpile_abuse_report="
systemctl status drawpile-abuse-report.service --no-pager -l"
	else
		display_drawpile_abuse_report=""
	fi
	
	if [[ "$ssl_encryption_config" != "3" ]]; then
		display_drawpile_listserver="systemctl status drawpile-listserver.service --no-pager -l"
	else
		display_drawpile_listserver=""
	fi

	if [ "$drawpile_monitor_installation_status" == "y" ] || [ "$drawpile_monitor_installation_status" == "Y" ] || [ "$drawpile_monitor_installation_status" == "yes" ] || [ "$drawpile_monitor_installation_status" == "YES" ] || [ "$drawpile_monitor_installation_status" == "Yes" ]; then
		display_drawpile_monitor="systemctl status drawpile-monitor.service --no-pager -l"
	else
		display_drawpile_monitor=""
	fi
	if [ "$drawpile_afk_kick_installation_status" == "yes" ]; then
		display_drawpile_afk_kick="systemctl status drawpile-afk-kick.service --no-pager -l
systemctl status drawpile-afk-kick.timer --no-pager -l"
	fi
	if [ "$dp_srv_startup" == "1" ]; then
		# 1 - Socket Activation
		display_drawpile_srv_status="systemctl status drawpile-srv.service --no-pager -l
systemctl status drawpile-srv.socket --no-pager -l"
	else
		# 2 - Always on Service
		display_drawpile_srv_status="systemctl status drawpile-srv.service --no-pager -l"
	fi
	if [ "$fail2ban_status" == "yes" ] || [ "$fail2ban_status" == "YES" ] || [ "$fail2ban_status" == "Yes" ] || [ "$fail2ban_status" == "Y" ] || [ "$fail2ban_status" == "y" ]; then
		display_fail2ban="
systemctl status fail2ban.service"
	fi
	if [ "$ssl_encryption_config" == "2" ]; then
		if [ "`systemctl is-enabled certbot.service`" = "static" ] && [ "`systemctl is-enabled certbot.timer`" = "enabled" ]; then
			display_lets_encrypt="
Let's Encrypt Services for SSL Cert Renewal
     systemctl status certbot.service --no-pager -l
     systemctl status certbot.timer --no-pager -l"
		elif [ "`systemctl is-enabled certbot-renew.service`" = "static" ] && [ "`systemctl is-enabled certbot-renew.timer`" = "enabled" ]; then
			display_lets_encrypt="
Let's Encrypt Services for SSL Cert Renewal
     systemctl status certbot-renew.service --no-pager -l
     systemctl status certbot-renew.timer --no-pager -l"
		else
			display_lets_encrypt="This message should not be visible for - Let's Encrypt Services for SSL Cert Renewal"
			echo "This message should not be visible for - Let's Encrypt Services for SSL Cert Renewal"
		fi	 
	fi
	if [[ "$ssl_encryption_config" != "3" ]]; then
		display_nginx="systemctl status nginx.service --no-pager -l"
	else
		display_nginx=""
	fi
	if [[ "$Pi_Hole_Status" == "yes" || "$Pi_Hole_Status" == "YES" || "$Pi_Hole_Status" == "Yes" ]]; then
		display_pihole="
Pi-Hole Service
     systemctl status pihole-FTL.service --no-pager -l"
	fi
	if [ "$RPi_Monitor_Status" == "1" ]; then
		display_rpimonitor="service rpimonitor status --no-pager -l"
	fi
	if [ "$samba_choice" == "1" ] || [ "$samba_choice" == "2" ] || [ "$samba_choice" == "3" ]; then
		display_samba_status="Samba - Local Network File Sharing
     systemctl status nmbd.service --no-pager -l
     systemctl status smbd.service --no-pager -l"
	fi
	if [[ "$ssl_encryption_config" = "1" ]] || [[ "$ssl_encryption_config" = "2" ]]; then 
		display_new_web_admin_url="Note: Eventually will be used in the new web admin UI, to administer
      multiple servers from one interface.
https://$hostname/listing/admin/"
	else
		display_new_web_admin_url="Not Available without SSL enabled"
	fi
	
	if [[ "$ssl_encryption_config" != "3" ]]; then
		display_dp_admin_gui_warning_with_web_admin="**** (For EMERGENCY USE ONLY, messes with web admin) ****"
	fi
	#---------------------------------------------------------------------------------------------------------------------------------
	if [[ "$ssl_encryption_config" = "1" ]]; then 
		display_server_webpage="http://$hostname
https://$hostname"
	elif [[ "$ssl_encryption_config" = "2" ]]; then 
		display_server_webpage="https://$hostname"
	else
		# [[ "$ssl_encryption_config" = "3" ]]; then 
		display_server_webpage="Not Available without SSL enabled."
	fi
	
	if [[ "$ssl_encryption_config" = "1" ]]; then 
		display_server_listserver="http://$hostname/listing/"
	elif [[ "$ssl_encryption_config" = "2" ]]; then 
		display_server_listserver="https://$hostname/listing/"
	else
		# [[ "$ssl_encryption_config" = "3" ]]; then 
		display_server_listserver="Not Available without SSL enabled"
	fi
	
	#---------------------------------------------------------------------------------------------------------------------------------
	if [ "$samba_choice" == "1" ] || [ "$samba_choice" == "2" ] || [ "$samba_choice" == "3" ]; then
		display_samba="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**** Samba Network Configuration ****
Type this into address bar of file explorer to check contents of local server.
\\\\$HOSTNAME
"
	fi
	#---------------------------------------------------------------------------------------------------------------------------------	
	if [ "$drawpile_monitor_installation_status" == "y" ] || [ "$drawpile_monitor_installation_status" == "Y" ] || [ "$drawpile_monitor_installation_status" == "yes" ] || [ "$drawpile_monitor_installation_status" == "YES" ] || [ "$drawpile_monitor_installation_status" == "Yes" ]; then
		display_drawpile_monitor_files="/home/drawpileuser/drawpile-monitor.db
/home/drawpileuser/drawpile-monitor-custom-banned-words-list.txt
/home/drawpileuser/drawpile-monitor-custom-nsfm-banned-words-list.txt
/home/drawpileuser/drawpile-monitor-allowed-words-list.txt
/home/drawpileuser/drawpile-monitor-silent-notify-words-list.txt"
	fi
	if [ "$drawpile_afk_kick_installation_status" == "yes" ]; then
		display_drawpile_afk_kick_files="/home/drawpileuser/drawpile-afk/drawpile-afk-kick"
	fi
	if [ -e "/home/drawpileuser/ListServerDB.db" ]; then
		display_listserver_file="/home/drawpileuser/ListServerDB.db"
	fi
	if [ -e "$list_server_config_file_location" ]; then
		display_listserver_config_file="$list_server_config_file_location"
	fi
	
	
	
	if [ "$drawpile_srv_crypt_key_status" == "y" ] || [ "$drawpile_srv_crypt_key_status" == "Y" ] || [ "$drawpile_srv_crypt_key_status" == "yes" ] || [ "$drawpile_srv_crypt_key_status" == "YES" ] || [ "$drawpile_srv_crypt_key_status" == "Yes" ]; then
		display_drawpile_srv_crypt_key_status="

**** Drawpile Server Crypt Key ****
$drawpile_srv_crypt_key"
	fi
	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	if [ ! -e "$my_server_information" ]; then sudo touch "$my_server_information"; fi
	#cat <<EOF | sudo tee "$my_server_information" >/dev/null
	
	my_server_information_store=$(cat << EOF


***********************************************************************
******************** Start - My Server Information ********************
***********************************************************************

**********************************************
**** Drawpile Web Pages For Server Admins ****
**********************************************

**** Drawpile Admin Web Page ****
$display_drawpile_admin_web_page

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**** Drawpile New Admin Web Page ****
$display_drawpile__new_admin_web_page

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

****  Drawpile Related Services  ****$display_drawpile_abuse_report
$display_drawpile_listserver
$display_drawpile_monitor
display_drawpile_afk_kick
$display_drawpile_srv_status

**** Services that help Drawpile function  ****$display_fail2ban$display_lets_encrypt
$display_nginx
$display_pihole
$display_rpimonitor
$display_samba_status

**** Drawpile New Admin Web URLs ****
$display_new_web_admin_url

***** Drawpile Admin GUI Desktop on another machine *****
$display_dp_admin_gui_warning_with_web_admin
drawpile-srv --gui --remote http://$hostname:8081/

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**************************************
**** Drawpile Web Pages For Users ****
**************************************

**** Drawpile Server Homepage ****
$display_server_webpage

**** Drawpile List Server Page For Drawpile Client ****
$display_server_listserver

$display_samba
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Important files and data to back up in the event the server needs to
be wiped and start over.

**** Important Drawpile Server Files ****
$dp_install_loc/Programs/Drawpile-Srv-Files
/home/drawpileuser/Drawpile_Configuration_Values.txt
$display_drawpile_monitor_files
$display_drawpile_afk_kick_files
$display_listserver_config_file
$display_listserver_file
/home/drawpileuser/server.db$display_drawpile_srv_crypt_key_status

***********************************************************************
******************** End   - My Server Information ********************
***********************************************************************

EOF
)
	my_server_information_store=$( echo "
	$my_server_information_store" | sed -e ':L;N;s/^\n$//;t L' )
	echo "$my_server_information_store" | sudo tee "$my_server_information" >/dev/null
	
	echo "${bold}${cyan}Please save this somewhere securely, then delete the file.${normal}"
	echo "${cyan}     Script will continue in 10 seconds.${normal}"
	echo
	sleep 10
else
	echo "This message for Desktop Icons or Text file should not be visible."
fi
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
echo "${bold}${green}***********************************************************${normal}"
echo "${bold}${green}**********    Displaying Server Status  . . .    **********${normal}"
echo "${bold}${green}***********************************************************${normal}"
echo 
echo "${bold}${green}If socket activation is enabled, it will say enabled on the line starting with${normal}"
echo "${bold}${green}\"Loaded:\" and it should be running. Ignore the part after vendor preset.${normal}"
echo
systemctl status drawpile-srv.socket --no-pager -l
wait $!
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
echo "${bold}${green}If start up on Pi power up is enabled, it will say enabled on the line starting${normal}"
echo "${bold}${green}with \"Loaded:\" and it should be running. Ignore the part after vendor preset.${normal}"
echo
systemctl status drawpile-srv.service --no-pager -l
wait $!
echo
pause
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
if [[ ( -d "$option_loc_2" && "$running_as_root_check" == "true" ) && (( "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ) || "$what_linux_name" == "NAME=\"Ubuntu\"" || ( "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" && "$what_architecture" == "Architecture: x86-64" && "$verify_if_this_is_raspbian_or_debian" == "" )) ]]; then
	if [[ "$ssl_encryption_config" != "3" ]]; then
		cat <<EOF | sudo tee "$option_loc_2/trusted_shortcuts.sh" >/dev/null
#!/bin/bash
gio set "$option_loc_2/Drawpile Client.desktop" metadata::trusted true
gio set "$option_loc_2/Drawpile ListServer.desktop" metadata::trusted true
gio set "$option_loc_2/Drawpile Admin.desktop" metadata::trusted true
gio set "$option_loc_2/Drawpile Admin UI.desktop" metadata::trusted true
gio set "$option_loc_2/Drawpile Admin GUI.desktop" metadata::trusted true
EOF
	else
		# elif [[ "$ssl_encryption_config" == "3" ]]; then
		cat <<EOF | sudo tee "$option_loc_2/trusted_shortcuts.sh" >/dev/null
#!/bin/bash
gio set "$option_loc_2/Drawpile Client.desktop" metadata::trusted true
gio set "$option_loc_2/Drawpile Admin GUI.desktop" metadata::trusted true
EOF
	fi
	wait $!
	sudo chmod 777 "$option_loc_2/trusted_shortcuts.sh"
	wait $!
	su -c "$option_loc_2/trusted_shortcuts.sh" $current_username
	wait $!
	sudo rm -rf $option_loc_2/trusted_shortcuts.sh
else
	:
	# echo "No action required for shortcuts."
fi

echo "${bold}${cyan}***********************************************************************${normal}"
echo "${bold}${cyan}******************** Start - My Server Information ********************${normal}"
echo "${bold}${cyan}***********************************************************************${normal}"
echo
echo "${bold}${cyan}**********************************************${normal}"
echo "${bold}${cyan}**** Drawpile Web Pages For Server Admins ****${normal}"
echo "${bold}${cyan}**********************************************${normal}"
echo
echo "${bold}${cyan}**** Drawpile Admin Web Page ****${normal}"
if [[ "$ssl_encryption_config" = "1" ]] || [[ "$ssl_encryption_config" = "2" ]]; then
	echo "https://$hostname/admin/

${bold}${cyan}**** Drawpile Web Admin Page Login Information ****${normal}
${cyan}Note: Should only share with minimal number of users${normal}
Web Admin Username      = $nginx_username_1
Web Admin Password      = $nginx_htpasswd_1"

else
	# if [[ "$ssl_encryption_config" = "3" ]]; then 
	echo "Not Available without SSL enabled"
fi
echo
echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
echo
echo "${bold}${cyan}**** Drawpile New Admin Web Page ****${normal}"
if [[ "$ssl_encryption_config" = "1" ]] || [[ "$ssl_encryption_config" = "2" ]]; then 
	echo "https://$hostname/admin_ui/"
	echo
	echo "${bold}${cyan}**** Drawpile New Web Admin Page Login Information ****${normal}"
	echo "${cyan}Note: Can share with users to gain access to moderation interface${normal}"
	echo "      ${cyan}and they have a user account set up to limit their access.${normal}"
	echo "New Web Admin Username  = $nginx_username_admin_ui_1"
	echo "New Web Admin Password  = $nginx_htpasswd_admin_ui_1"
	if [[ "$list_server_database_connection_string_num" == "1" || "$listserver_database_connection_string" == "none" ]]; then
		echo "${bold}${red}Note: List Server in Read Only Mode.${normal}"
		echo "      This page will not allow login, as the 'new web admin'"
		echo "      username and password will work to load the page, but"
		echo "      you'll receive a 404 error with the 'web admin' username"
		echo "      and password. This is by design since a read only list"
		echo "      server has nothing to administrate. This is being left"
		echo "      here as eventually it will be used for administrating"
		echo "      Drawpile-srv and list server."
	fi
else
	# [[ "$ssl_encryption_config" = "3" ]]; then 
	echo "Not Available without SSL enabled"
fi
echo
echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
echo
echo "${bold}${cyan}****  Drawpile Related Services  ****${normal}"
if [ "$drawpile_abuse_report_installation_status" == "y" ] || [ "$drawpile_abuse_report_installation_status" == "Y" ] || [ "$drawpile_abuse_report_installation_status" == "yes" ] || [ "$drawpile_abuse_report_installation_status" == "YES" ] || [ "$drawpile_abuse_report_installation_status" == "Yes" ]; then
	echo "systemctl status drawpile-abuse-report.service --no-pager -l"
fi
if [[ "$ssl_encryption_config" != "3" ]]; then
	echo "systemctl status drawpile-listserver.service --no-pager -l"
fi
if [ "$drawpile_monitor_installation_status" == "y" ] || [ "$drawpile_monitor_installation_status" == "Y" ] || [ "$drawpile_monitor_installation_status" == "yes" ] || [ "$drawpile_monitor_installation_status" == "YES" ] || [ "$drawpile_monitor_installation_status" == "Yes" ]; then
	echo "systemctl status drawpile-monitor.service --no-pager -l"
fi
if [ "$drawpile_afk_kick_installation_status" == "yes" ]; then
	echo "systemctl status drawpile-afk-kick.service --no-pager -l"
	echo "systemctl status drawpile-afk-kick.timer --no-pager -l"
fi
if [ "$dp_srv_startup" == "1" ]; then
	# 1 - Socket Activation
	echo "systemctl status drawpile-srv.service --no-pager -l"
	echo "systemctl status drawpile-srv.socket --no-pager -l"
elif [ "$dp_srv_startup" == "2" ]; then
	# 2 - Always on Service
	echo "systemctl status drawpile-srv.service --no-pager -l"
else
	echo "This message should not be visible for showing services for Drawpile-srv."
	echo "systemctl status drawpile-srv.service --no-pager -l"
fi
echo
echo "${bold}${cyan}**** Services that help Drawpile function  ****${normal}"
if [ "$fail2ban_status" == "yes" ] || [ "$fail2ban_status" == "YES" ] || [ "$fail2ban_status" == "Yes" ] || [ "$fail2ban_status" == "Y" ] || [ "$fail2ban_status" == "y" ]; then
	echo "systemctl status fail2ban.service"
fi
if [ "$ssl_encryption_config" == "2" ]; then
	if [ "`systemctl is-enabled certbot.service`" = "static" ] && [ "`systemctl is-enabled certbot.timer`" = "enabled" ]; then
		echo "${cyan}Let's Encrypt Services for SSL Cert Renewal${normal}"
		echo "     systemctl status certbot.service --no-pager -l"
		echo "     systemctl status certbot.timer --no-pager -l"
	elif [ "`systemctl is-enabled certbot-renew.service`" = "static" ] && [ "`systemctl is-enabled certbot-renew.timer`" = "enabled" ]; then
		echo "${cyan}Let's Encrypt Services for SSL Cert Renewal${normal}"
		echo "     systemctl status certbot-renew.service --no-pager -l"
		echo "     systemctl status certbot-renew.timer --no-pager -l"
	else
		echo "This message should not be visible for - Let's Encrypt Services for SSL Cert Renewal"
	fi
fi
if [[ "$ssl_encryption_config" != "3" ]]; then
	echo "systemctl status nginx.service --no-pager -l"
fi
if [[ "$Pi_Hole_Status" == "yes" || "$Pi_Hole_Status" == "YES" || "$Pi_Hole_Status" == "Yes" ]]; then
	echo "${cyan}Pi-Hole Service${normal}"
	echo "     systemctl status pihole-FTL.service --no-pager -l"
fi
if [ "$RPi_Monitor_Status" == "1" ]; then
	echo "service rpimonitor status --no-pager -l"
fi
if [ "$samba_choice" == "1" ] || [ "$samba_choice" == "2" ] || [ "$samba_choice" == "3" ]; then
	echo "${cyan}Samba - Local Network File Sharing${normal}"
	echo "     systemctl status nmbd.service --no-pager -l"
	echo "     systemctl status smbd.service --no-pager -l"
fi
echo
echo "${bold}${cyan}**** Drawpile New Admin Web URLs ****${normal}"
if [[ "$ssl_encryption_config" = "1" ]] || [[ "$ssl_encryption_config" = "2" ]]; then 
	echo "${cyan}Note: Eventually will be used in the new web admin UI, to administer${normal}"
	echo "      ${cyan}multiple servers from one interface.${normal}"
	echo "https://$hostname/listing/admin/"
else
	# [[ "$ssl_encryption_config" = "3" ]]; then 
	echo "Not Available without SSL enabled"
fi
echo
echo "${bold}${cyan}***** Drawpile Admin GUI Desktop on another machine *****${normal}"
if [[ "$ssl_encryption_config" != "3" ]]; then
	echo "${bold}${cyan}**** (For EMERGENCY USE ONLY, messes with web admin) ****${normal}"
fi
echo "drawpile-srv --gui --remote http://$hostname:8081/"
echo
echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
echo
echo "${bold}${cyan}**************************************${normal}"
echo "${bold}${cyan}**** Drawpile Web Pages For Users ****${normal}"
echo "${bold}${cyan}**************************************${normal}"
echo 
echo "${bold}${cyan}**** Drawpile Server Homepage ****${normal}"
if [[ "$ssl_encryption_config" = "1" ]]; then 
	echo "http://$hostname"
	echo "https://$hostname"
elif [[ "$ssl_encryption_config" = "2" ]]; then 
	echo "https://$hostname"
else
	# [[ "$ssl_encryption_config" = "3" ]]; then 
	echo "Not Available without SSL enabled."
fi
echo
echo "${bold}${cyan}**** Drawpile List Server Page For Drawpile Client ****${normal}"
if [[ "$ssl_encryption_config" = "1" ]]; then 
	echo "http://$hostname/listing/"
elif [[ "$ssl_encryption_config" = "2" ]]; then 
	echo "https://$hostname/listing/"
else
	# [[ "$ssl_encryption_config" = "3" ]]; then 
	echo "Not Available without SSL enabled."
fi
echo
if [ "$samba_choice" == "1" ] || [ "$samba_choice" == "2" ] || [ "$samba_choice" == "3" ]; then
	echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo
	echo "${bold}${cyan}**** Samba Network Configuration ****${normal}"
	echo "Type this into address bar of file explorer to check contents of local server."
	echo "\\\\$HOSTNAME"
	echo
fi
echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
echo
echo "${cyan}Important files and data to back up in the event the server needs to${normal}"
echo "${cyan}be wiped and start over.${normal}"
echo
echo "${bold}${cyan}**** Important Drawpile Server Files ****${normal}"
echo "$dp_install_loc/Programs/Drawpile-Srv-Files"
echo "/home/drawpileuser/Drawpile_Configuration_Values.txt"
if [ "$drawpile_monitor_installation_status" == "y" ] || [ "$drawpile_monitor_installation_status" == "Y" ] || [ "$drawpile_monitor_installation_status" == "yes" ] || [ "$drawpile_monitor_installation_status" == "YES" ] || [ "$drawpile_monitor_installation_status" == "Yes" ]; then
	echo "/home/drawpileuser/drawpile-monitor.db"
	echo "/home/drawpileuser/drawpile-monitor-custom-banned-words-list.txt"
	echo "/home/drawpileuser/drawpile-monitor-custom-nsfm-banned-words-list.txt"
	echo "/home/drawpileuser/drawpile-monitor-allowed-words-list.txt"
	echo "/home/drawpileuser/drawpile-monitor-silent-notify-words-list.txt"
fi
if [ "$drawpile_afk_kick_installation_status" == "yes" ]; then
	echo "/home/drawpileuser/drawpile-afk/drawpile-afk-kick"
fi
if [ -e "$list_server_config_file_location" ]; then
	echo "$list_server_config_file_location"
fi
if [ -e "/home/drawpileuser/ListServerDB.db" ]; then
	echo "/home/drawpileuser/ListServerDB.db"
fi
echo "/home/drawpileuser/server.db"

if [ "$drawpile_srv_crypt_key_status" == "y" ] || [ "$drawpile_srv_crypt_key_status" == "Y" ] || [ "$drawpile_srv_crypt_key_status" == "yes" ] || [ "$drawpile_srv_crypt_key_status" == "YES" ] || [ "$drawpile_srv_crypt_key_status" == "Yes" ]; then
	echo
	echo "${bold}${cyan}**** Drawpile Server Crypt Key ****${normal}"
	echo "$drawpile_srv_crypt_key"
fi
echo
echo "${bold}${cyan}***********************************************************************${normal}"
echo "${bold}${cyan}******************** End   - My Server Information ********************${normal}"
echo "${bold}${cyan}***********************************************************************${normal}"
echo
echo "${cyan}Please note the information above regarding your server before${normal}"
echo "${cyan}     wrapping up the script. When you are ready, press any key${normal}"
echo "${cyan}     to continue.${normal}"
echo
pause
echo
server_ipv4=$( hostname -I | awk '{ print $1 }' )
server_ipv6=$( hostname -I | awk '{ print $2 }' )
echo "${bold}${green}***********************************************************************${normal}"
echo "${bold}${green}*****    Drawpile Server Installation and Setup Complete . . .    *****${normal}"
echo "${bold}${green}***********************************************************************${normal}"
echo
drawpile_credits_urls_functions 
echo
drawpile_credits_function
echo
if [[ "$server_ipv4" == "server_ipv6" ]]; then
	echo "Device IP Address:"
	echo "     $server_ipv4"
elif [[ "$server_ipv4" != "server_ipv6" ]]; then
	echo "Device IP Addresses:"
	echo "     $server_ipv4"
	echo "     $server_ipv6"
else
	echo "This message should not be visible..."
	echo "Device IP Addresses:"
	echo $server_ipv4
	echo $server_ipv6
fi
echo
echo "To set up remote server administration instead of the web interface, read more"
echo "here in Google Docs (not recommended):"
echo "     https://tinyurl.com/y8xq4qta "
echo
echo "${bold}Note:${normal} Automatic Session resets are determined by 70% of the setting Session "
echo '     Size Limit. What this means is that a server set to 15 MB will automatically reset at'
echo '     10.50 MB. A server set to 20 MB will auto reset at 14 MB. A server set to 25 MB will '
echo '     auto reset at 17.50 MB. This is especially important to make the value large to account '
echo '     for large boards being hosted on the server. I suggest using 25 MB for the setting '
echo '     when remotely accessing the server to administrate the server settings.'
echo


if [ "$dp_file_backed_sessions_mgmt_script_run" == "y" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "Y" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "yes" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "YES" ] || [ "$dp_file_backed_sessions_mgmt_script_run" == "Yes" ]; then
	sudo chmod 777 $app_installation_status_file
fi
# The sort command used at the end sorts the list alphabetically.
sudo sort $app_installation_status_file -o $app_installation_status_file
wait $!
# This removes any duplicates that may exist in the file.
perl -i -ne 'print if ! $a{$_}++' $app_installation_status_file


# sudo sort $drawpile_configuration_values_file -o $drawpile_configuration_values_file
sudo sed -i '\!^drawpile_script_completed =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!drawpile_script_completed = '"yes"'!;H};x}' $drawpile_configuration_values_file
sleep 5
# wait $!
# sudo chmod 770 /home/drawpileuser/ -R
sudo chmod 770 $app_installation_status_file
sudo chmod 770 $drawpile_configuration_values_file
set +x

if [ "$journalctl_log_limit" != "9" ] && [ "$journalctl_log_limit_read_from_file" != "yes" ]; then
	echo
	echo "Journalctl was modified."
	echo 
	echo "To reload the configuration, you should restart the server now that the"
	echo "script has completed, as this is much easier than reloading every single"
	echo "running service. Be sure to copy server info located just above before"
	echo "you reboot."
	echo
	echo "Read more on why this required here (warning for technical content):"
	echo "https://unix.stackexchange.com/questions/253203/how-to-tell-journald-to-re-read-its-configuration"
	echo
	echo "The script can reboot the system with this command:"
	echo "sudo reboot"
	echo
	while :; do
		read -r -p "${bold}${red}Type (y)es to confirm reboot, or (n)o to skip the reboot:${normal} " script_complete_reboot_for_journalctl
		echo
		if [ "$script_complete_reboot_for_journalctl" == "y" ] || [ "$script_complete_reboot_for_journalctl" == "Y" ] || [ "$script_complete_reboot_for_journalctl" == "yes" ] || [ "$script_complete_reboot_for_journalctl" == "YES" ] || [ "$script_complete_reboot_for_journalctl" == "Yes" ] || [ "$script_complete_reboot_for_journalctl" == "n" ] || [ "$script_complete_reboot_for_journalctl" == "N" ] || [ "$script_complete_reboot_for_journalctl" == "no" ] || [ "$script_complete_reboot_for_journalctl" == "NO" ] || [ "$script_complete_reboot_for_journalctl" == "No" ]; then
			break
		else
			echo
			echo "${bold}${red}Invalid input selection, try again.${normal}"
			echo
			echo ----------------------------------------------------------------------------------
			echo
		fi
	done
	if [ "$script_complete_reboot_for_journalctl" == "y" ] || [ "$script_complete_reboot_for_journalctl" == "Y" ] || [ "$script_complete_reboot_for_journalctl" == "yes" ] || [ "$script_complete_reboot_for_journalctl" == "YES" ] || [ "$script_complete_reboot_for_journalctl" == "Yes" ]; then
		echo "${bold}${red}RECOMMENDED - Rebooting in 30 seconds${normal}"
		sleep 30
		sudo reboot
	elif [ "$script_complete_reboot_for_journalctl" == "n" ] || [ "$script_complete_reboot_for_journalctl" == "N" ] || [ "$script_complete_reboot_for_journalctl" == "no" ] || [ "$script_complete_reboot_for_journalctl" == "NO" ] || [ "$script_complete_reboot_for_journalctl" == "No" ]; then
		echo "${bold}${red}NOT RECOMMENDED - Skipping Reboot${normal}"
	else
		echo "${bold}${red}This message should not be visible for system reboot.${normal}"
	fi
fi

if [ "$install_all_packages" == "y" ] || [ "$install_all_packages" == "Y" ] || [ "$install_all_packages" == "yes" ] || [ "$install_all_packages" == "YES" ] || [ "$install_all_packages" == "Yes" ] ; then
	echo "${bold}${red}Since package updates were done earlier and the script is done, consider"
	echo "updating your server operating system. Instructions may vary between"
	echo "different versions or systems, be sure to read documentation carefully"
	echo "before proceeding, as some updates have the potential to break functionality"
	echo "functionality of the server. If your online server service provides disk "
	echo "image backups, it's not a bad idea to make one before doing any major "
	echo "upgrades to ensure everything works or you can go back to a previous version."
	echo
	echo "Updates can protect against vulnerabilities that might be exploited by bad"
	echo "actors to use your server for their own purpose. Automated attacks with bots"
	echo "happen all the time, like a time where I forgot to secure SSH and in a week,"
	echo "had 12,000 or so failed login attempts. This is just one example, so it's"
	echo "important to back up data to your local machine or online when possible."
	echo
	echo "The script cannot do this for you. Make notes on the required steps because "
	echo "reboots will be required or additional prompts that the script cannot "
	echo "possibly answer for you.${normal}"
	echo
	echo
	if [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ]; then
		echo "${bold}${red}Read more here:${normal}"
		echo "     https://www.debian.org/doc/manuals/debian-faq/uptodate.en.html"
		echo
		echo "sudo apt-get update"
		echo "sudo apt-get dist-upgrade"
		echo "sudo reboot"
	elif [ "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ]; then
		echo "${bold}${red}Read more here:${normal}"
		echo "     https://www.raspberrypi.com/documentation/computers/os.html"
		echo
		echo "apt-get update"
		echo "sudo apt full-upgrade"
		echo "sudo rpi-update"
		echo "sudo reboot"
		echo
		echo "Upgrading the operating system itself does not appear to be recommended."
		echo "They simply seem to encourage you to image a new microSD card and copy"
		echo "your configuration to the new SD card."
	elif [ "$what_linux_name" == "NAME=\"Ubuntu\"" ]; then
		echo "${bold}${red}Read more here:${normal}"
		echo "     https://documentation.ubuntu.com/server/how-to/software/upgrade-your-release/index.html"
		echo
		echo "sudo apt update"
		echo "sudo apt upgrade"
		echo "sudo do-release-upgrade"
		echo "sudo reboot"
	elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		if [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 39 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 39 (Workstation Edition)\"" ]] || [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Forty)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 40 (Workstation Edition)\"" ]]; then
			echo "${bold}${red}Read more here:${normal}"
			echo "     https://docs.fedoraproject.org/en-US/quick-docs/upgrading-fedora-offline/"
			echo
			echo "sudo dnf --refresh upgrade"
			echo "sudo reboot"
			echo "sudo dnf system-upgrade download --releasever=41"
			echo "sudo dnf system-upgrade reboot"
		else
			echo "${bold}${red}Read more here:${normal}"
			echo "     https://docs.fedoraproject.org/en-US/quick-docs/upgrading-fedora-offline/"
			echo
			echo "sudo dnf --refresh upgrade"
			echo "sudo reboot"
			echo "sudo dnf system-upgrade download --releasever=##"
			echo "sudo dnf system-upgrade reboot"
			echo
			echo "Where '##' is two versions ahead of your currently installed version,"
			echo "as upgrades are typically only supported up to two versions later from"
			echo "your current installation."
		fi
	else
		echo "${bold}${red}Unable to identify system in use for specific update instructions.${normal}"
		echo "${bold}${red}This message should not be visible.${normal}"
	fi
	echo
fi
	

read -r -p 'Press [Enter] key to finish script...'
echo
#
# - End of Script. -
#
} # this ensures the entire script is downloaded, the other part of this is located just after the script update and wget check. #
