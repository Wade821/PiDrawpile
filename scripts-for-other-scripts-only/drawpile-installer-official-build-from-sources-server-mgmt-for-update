#!/bin/bash
drawpilescriptversion=2.93
scriptname1=drawpile-installer-official-build-from-sources-server-mgmt
scriptname2=drawpile-installer-official-build-from-sources-server-mgmt
SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
echo
echo "This script is not meant to be run directly by any user, but only"
echo "the drawpile-installer-update script."

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# Scripts to be generated for managing server.
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
sudo mkdir -p -v "$dpinstallloc/Programs/Drawpile-Srv-Files/server-scripts/"
sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/server-scripts/" -R

echo "#!/bin/bash
\$drawpilescriptversion=$drawpilescriptversion
bold=\$(tput bold)
underline=\$(tput smul)
red=\$(tput setaf 1)
green=\$(tput setaf 2)
yellow=\$(tput setaf 3)
blue=\$(tput setaf 4)
magenta=\$(tput setaf 5)
cyan=\$(tput setaf 6)
normal=\$(tput sgr0)
echo \"\${bold}*****Run drawpile-srv.service. . .*****\${normal}\"
echo
sudo systemctl stop --now drawpile-srv.service
sudo systemctl start --now drawpile-srv.service
echo
echo 'Drawpile server should be running now!'
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
systemctl status drawpile-srv.service --no-pager
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo" > "$dpinstallloc/Programs/Drawpile-Srv-Files/server-scripts/drawpile-server-restart.sh"
sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/server-scripts/drawpile-server-restart.sh"
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
echo "#!/bin/bash
\$drawpilescriptversion=$drawpilescriptversion
bold=\$(tput bold)
underline=\$(tput smul)
red=\$(tput setaf 1)
green=\$(tput setaf 2)
yellow=\$(tput setaf 3)
blue=\$(tput setaf 4)
magenta=\$(tput setaf 5)
cyan=\$(tput setaf 6)
normal=\$(tput sgr0)
echo \"\${bold}*****Change Start up type on Drawpile Server . . .*****\${normal}\"
echo
echo 'Enable socket activation or start server when the Raspberry Pi powers on?'
echo
echo \"\${bold}\${cyan}1 - Socket Activation - Recommended\${normal}\"
echo '    This setting is less resource intensive on the Raspberry Pi, as the'
echo '    drawpile server is only running when a user is connected.'
echo \"\${bold}\${cyan}2 - Server starts on Raspberry Pi power up\${normal}\"
echo '    Runs all the time in the background.'
echo
read dpsrvstartup
echo
if [ \"\$dpsrvstartup\" == \"1\" ]; then
  sudo cp /etc/systemd/system/drawpile-srv01.service /etc/systemd/system/drawpile-srv.service
  echo
  echo 'Reloading systemctl and systemd.'
  sudo systemctl daemon-reload
  sudo systemctl restart systemd-modules-load
  echo
  sudo systemctl disable --now drawpile-srv.service
  sudo systemctl enable --now drawpile-srv.socket
  #Read more on systemd --> https://drawpile.net/help/server
else [ \"\$dpsrvstartup\" == \"2\" ]
  sudo cp /etc/systemd/system/drawpile-srv02.service /etc/systemd/system/drawpile-srv.service
  echo
  echo 'Reloading systemctl and systemd.'
  sudo systemctl daemon-reload
  sudo systemctl restart systemd-modules-load
  echo
  sudo systemctl disable --now drawpile-srv.socket
  sudo systemctl enable --now drawpile-srv.service
  #Read more on systemd --> https://drawpile.net/help/server
fi " > "$dpinstallloc/Programs/Drawpile-Srv-Files/server-scripts/drawpile-startup-switch.sh"
sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/server-scripts/drawpile-startup-switch.sh"
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
echo "#!/bin/bash
\$drawpilescriptversion=$drawpilescriptversion
bold=\$(tput bold)
underline=\$(tput smul)
red=\$(tput setaf 1)
green=\$(tput setaf 2)
yellow=\$(tput setaf 3)
blue=\$(tput setaf 4)
magenta=\$(tput setaf 5)
cyan=\$(tput setaf 6)
normal=\$(tput sgr0)
echo \"\${bold}Update Login Info NGINX for Server Administration.\${normal}\"
echo
echo 'Please type in a username you wish to use for making changes to your drawpile'
echo 'server. If you make a mistake or need to update the server login, open a new'
echo 'terminal window and type in the following:'
echo
echo 'sudo htpasswd -bc /etc/nginx/passwords USERNAME PASSWORD'
echo
echo 'Where USERNAME can be any username you wish to use for login and PASSWORD'
echo 'is can be any password you like to use without spaces.'
echo
read -p \"Enter username: \" NGINXusername1
read -p \"Enter username again: \" NGINXusername2
while [ \$NGINXusername1 != \$NGINXusername2 ]
do
	echo
        echo \"Usernames entered do not match!\"
	echo
        read -p \"Enter username: \" NGINXusername1
        read -p \"Enter username again: \" NGINXusername2
done
echo
echo \"Your Server Administration username is: \$NGINXusername1\"
echo
echo
read -p \"Enter password without spaces: \" nginxhtpasswd1
read -p \"Enter password without spaces again: \" nginxhtpasswd2
while [ \$nginxhtpasswd1 != \$nginxhtpasswd2 ]
do
	echo
        echo \"Passwords entered do not match!\"
	echo
        read -p \"Enter password without spaces: \" nginxhtpasswd1
        read -p \"Enter password without spaces again: \" nginxhtpasswd2
done
echo
echo \"Your Server Administration password is: \$nginxhtpasswd1\"
echo
sudo htpasswd -bc /etc/nginx/passwords \$NGINXusername1 \$nginxhtpasswd1
echo
sudo /etc/init.d/nginx restart
sudo nginx -s reload
sudo /etc/init.d/nginx restart" > "$dpinstallloc/Programs/Drawpile-Srv-Files/server-scripts/NGINX-password-change.sh"
sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/server-scripts/NGINX-password-change.sh"
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
echo "#!/bin/bash
\$drawpilescriptversion=$drawpilescriptversion
bold=\$(tput bold)
underline=\$(tput smul)
red=\$(tput setaf 1)
green=\$(tput setaf 2)
yellow=\$(tput setaf 3)
blue=\$(tput setaf 4)
magenta=\$(tput setaf 5)
cyan=\$(tput setaf 6)
normal=\$(tput sgr0)
echo
echo 'Made with the assistance of the Creator of Drawpile! His PayPal E-mail if'
echo 'you want to donate some money as thanks for all that he does!'
echo \"\${underline}laakkonenc@gmail.com\${normal}\"
echo
echo \"Script Version \${bold}$drawpilescriptversion\${normal}\"
echo \"'Google Doc --> \${underline}http://tinyurl.com/jx5oe4h \${normal}\"
echo \"GitHub --> \${underline}https://github.com/Bluestrings-Drawpile/PiDrawpile.git \${normal}\"
echo
echo 'Please make sure you are using the latest version of this script before'
echo 'continuing. You can get the latest version from Github or by making sure'
echo 'the script number above matches the Drawpile Google document version number'
echo 'in the upper right of every page where this script was obtained. If you do'
echo 'not have the newest version, this script should auoto retrieve the newest'
echo 'version of the script. If not, close this window and get the newest'
echo 'version before proceeding.'
echo
read -p 'Press [Enter] key to continue...'
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo \"\${bold}Pick the installed location of the Programs folder.\${normal}\"
echo
echo 'As a reminder, this was the location you initially downloaded'
echo 'Drawpile to and is also the location where your scripts for managing'
echo 'the server are located.'
echo
echo '1 - Public Folder					- /home/pi/Public'
echo '2 - Desktop Folder				- /home/pi/Desktop'
echo '3 - Documents Folder				- /home/pi/Documents'
echo '4 - Pictures Folder				- /home/pi/Pictures'
echo '  - Other, simply enter the exact location desired without a / at the end.'
echo '    This is an advanced option and not suggested for average users.'
echo '    If using a path with spaces, do NOT use double or single quotes as'
echo '        the script will not work if you do.'
echo \"    ${underline}Acceptable Example:${normal} /home/pi/Desktop/My Drawpile Server\"
echo
echo \"\${bold}Note:\${normal} If you use Windows and Share files across the network, this script\"
echo 'will give you the option later to share just the Public folder, or'
echo 'the Music, Pictures, Public, and Videos folders, or the other location'
echo 'personally specified, or no folders.'
echo
echo 'Please make your selection now by entering the number or folder path:'
echo 
read dpinstallloc
echo
if [ \"\$dpinstallloc\" == \"1\" ]; then
  dpinstallloc=/home/pi/Public
  echo \"Install location chosen is \$dpinstallloc\"
elif [ \"\$dpinstallloc\" == \"2\" ]; then
  dpinstallloc=/home/pi/Desktop
  echo \"Install location chosen is \$dpinstallloc\"
elif [ \"\$dpinstallloc\" == \"3\" ]; then
  dpinstallloc=/home/pi/Documents
  echo \"Install location chosen is \$dpinstallloc\"
elif [ \"\$dpinstallloc\" == \"4\" ]; then
  dpinstallloc=/home/pi/Pictures
  echo \"Install location chosen is \$dpinstallloc\"
else
  echo \"Install location chosen is \$dpinstallloc\"
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
cd \"\$dpinstallloc/\"
sudo mkdir -p -v Programs
echo
echo 'This stage is for setting up an easy to remember way to connect to your server.'
echo 
echo \"\${underline}https://freedns.afraid.org/ \${normal}\"
echo \"\${bold}Pros:\${normal} Free registration, renew hostname every six months.\"
echo \"\${bold}Cons:\${normal} Minor additional setup with script guided help required, guided setup.\"
echo '      If a typo is made, you must use crontab -e to update the code manually.'
echo 
echo \"\${underline}https://www.noip.com/ \${normal}\"
echo \"\${bold}Pros:\${normal} Free registration, simple setup, only slightly less complex than above\"
echo '      option listed above.'
echo \"\${bold}Cons:\${normal} Must renew the hostname via notification received in email every 30 \"
echo '      or lose access. Might not be able to get the same name back.'
echo
echo 'Do you want to use freeDNS.afraid.org or No-IP?'
echo 'Enter a number and hit enter to continue.'
echo
echo 'Press 1 for freeDNS.afraid.org'
echo 'Press 2 for No-IP'
echo 'Press 3 to skip this step.'
echo
read dns
echo
if [ \"\$dns\" == \"1\" ]; then
  echo '*****Setting up FreeDNS.afraid.org cronjob for auto update of IP...*****'
  echo 
  echo 'Requirements: Register an account, go to Subdomains option on the left,'
  echo 'select option Add a subdomain. Leave Type set to A, set any desired subdomain'
  echo 'name that you wish to use. Domain options are listed in the dropbox, you can '
  echo 'pick Many many more available in order to search for domain names you like '
  echo 'that are listed as Public. Click the link Shared Domain Registry and search '
  echo 'for a desired domain. Once you find a name you like, click on the link on the'
  echo 'left. Leave the fields Destination, TTL, and Wildcard as they currently are... '
  echo 'and fill in the Captcha that everyone loves and hates.'
  echo
  echo 'Click on Dynamic DNS on the left, then go to dynamic update interface'
  echo 'hyperlink at the top of the page, should say (version 2) beside it. Click '
  echo 'the checkbox beside your hostname, click Apply below that where the option to '
  echo 'the left should read: Action: Enable Dynamic DNS... . Then click cron script'
  echo 'on the gray table to the right of your registered hostname.'
  echo
  echo 'Copy only the very bottom line of the page and paste here.'
  echo 'Press Ctrl + Shift + V to paste.'
  echo 'That is everything which appears after this line ... '
  echo 'PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin'
  echo 
  read freeDNS
  echo
  (crontab -l 2>>/dev/null; echo \"PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
\$freeDNS\") | crontab 
elif [ \"\$dns\" == \"2\" ]; then
  echo '*****Installing No-IP...*****'
  cd \"\$dpinstallloc/Programs\"
  sudo mkdir -p -v noip
  cd noip
  sudo wget http://www.no-ip.com/client/linux/noip-duc-linux.tar.gz
  sudo tar vzxf noip-duc-linux.tar.gz
  cd noip-2.1.9-1
  sudo make
  echo
  echo 'https://www.noip.com/'
  echo
  echo 'Requirements: Once logged in, you should be looking at the dashboard. You will '
  echo 'know if the hyperlink at the top is https://my.noip.com/#!/. Just type'
  echo 'your desired hostname and choose a domain drop down that you like. from the '
  echo 'Free Domains options. Click the button Add Hostname. You will just need your '
  echo 'username and password to set this up.'
  echo
  echo 'If using the classic site, click Add Host on the left. Type in your Hostname,'
  echo 'and choose a domain on the right from the list of No-IP Free Domains. Make '
  echo 'sure the host type is set to DNS Host (A). For IP Address, open a new tab'
  echo 'and go to www.whatismyip.com to get your IP and put it in this field. Leave '
  echo 'other options at default values and click Add Host.'
  echo
  echo 'You will be prompted to login with your No-IP account username and password.' 
  echo 'After logging into the DUC program, answer the questions to proceed. When asked' 
  echo 'how often you want the update to happen you must choose 5 or more. The interval'
  echo 'is listed in minutes, if you choose 5 the update interval will be 5 minutes.'
  echo 'If you choose 30 the interval will be 30 minutes.'
  sudo make install
  sudo /usr/local/bin/noip2
  #echo 'Confirming service is working properly...'
  #sudo noip2 ­-S
  #Read install process here --> http://www.noip.com/support/knowledgebase/install-ip-duc-onto-raspberry-pi/
  
  echo 'If you made a typo when putting in your password for no IP, simply'
  echo 'type the following:'
  echo
  echo 'noip2 -C -c /usr/local/etc/no-ip2.conf'
else 
    echo 'No IP update service to be set up!'
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo 'This script assumes you have a hostname, and it is required for'
echo 'encrypted server connections to protect private conversations'
echo 'and also to mask your Public IP address when connecting to the'
echo 'server.'
echo
echo 'Make sure this is correctly typed both times before proceeding'
echo 'with the script. If you do not enter it correctly, users will'
echo 'not be able to connect to hosted sessions with the server using'
echo 'encryption by SSL.'
echo
echo \"\${bold}For example:\${normal}\"
echo \"\${underline}example.hostwebsite.com \${normal}\"
echo
echo 'If you do not have one, simply leave it blank and hit enter'
echo 'twice. However, it is highly recommended to have one, they'
echo 'are free after all!'
echo
echo \"\${bold}Note:\${normal} If you do make a mistake, you can always run\"
echo \"Option \${underline}6 - Change all startup options.\${normal} via the script\"
echo 'drawpile-server.sh later on.'
echo
echo 'If you have a hostname please enter it now.'
echo
read -p \"Enter hostname: \" hostname1
read -p \"Enter hostname again: \" hostname2
while [[ \$hostname1 != \$hostname2 ]]
do
	echo
        echo \"Hostnames entered do not match!\"
	echo
        read -p \"Enter hostname: \" hostname1
        read -p \"Enter hostname again: \" hostname2
done
#
hostname=\$hostname1
echo
echo \"Your hostname is: \$hostname\"
echo
echo 'This will be used to display in the session listing instead of your'
echo 'public IP address.'
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo \"\${bold}***** Setting up SSL Certificate Creation . . . *****\${normal}\"
echo
echo 'Please note in the following sections that the parts contained within'
echo 'the brackets are the default option if no information is entered.'
echo
echo 'Country Name (2 letter code) [AU]:'
echo
read country
echo
if [ \"\$country\" != \"\" ]; then
  echo \"Selected: \$country\"
else
  country=\"AU\"
fi
echo
echo '--------------------------------------------------------------------------------'
echo
echo 'State or Province Name (full name) [Some-State]:'
echo
read state
echo
if [ \"\$state\" != \"\" ]; then
  echo \"Selected: \$state\"
else
  state=\"Some-State\"
fi
echo
echo '--------------------------------------------------------------------------------'
echo
echo 'Locality name (e.g., city) [Some-City]:'
echo
read locality
echo
if [ \"\$locality\" != \"\" ]; then
  echo \"Selected: \$locality\"
else
  locality=\"Some-City\"
fi
echo
echo '--------------------------------------------------------------------------------'
echo
echo 'Organization Name (eg, company) [Internet Widgits Pty Ltd]:'
echo
read organization
echo
if [ \"\$organization\" != \"\" ]; then
  echo \"Selected: \$organization\"
else
  organization=\"Internet Widgits Pty Ltd\"
fi
echo
echo '--------------------------------------------------------------------------------'
echo
echo 'Organizational Unit Name (e.g., section) [Collaborating Artists]:'
echo
read unitname
echo
if [ \"\$unitname\" != \"\" ]; then
  echo \"Selected: \$unitname\"
else
  unitname=\"Collaborating Artists\"
fi
echo
echo '--------------------------------------------------------------------------------'
echo
echo 'Email Address [noemail@noemail.com]'
echo
read email
echo
if [ \"\$email\" != \"\" ]; then
  echo \"Selected: \$email\"
else
  email=\"noemail@noemail.com\"
fi
echo
echo '--------------------------------------------------------------------------------'
echo
sudo openssl req -x509 -newkey rsa:2048 -nodes -keyout /home/drawpileuser/key.pem -out /home/drawpileuser/cert.pem -days 365 -subj \"/C=\$country/ST=\$state/L=\$locality/O=\$organization/OU=\$unitname/CN=\$hostname/emailAddress=\$email\"
echo
sudo chmod 777 /home/drawpileuser/
sudo chown drawpileuser /home/drawpileuser/cert.pem
sudo chown drawpileuser /home/drawpileuser/key.pem
echo
echo
echo \"#!/bin/bash
sudo chmod 777 /home/drawpileuser/
sudo openssl req -x509 -newkey rsa:2048 -nodes -keyout /home/drawpileuser/key.pem -out /home/drawpileuser/cert.pem -days 365 -subj \"/C=\$country/ST=\$state/L=\$locality/O=\$organization/OU=\$unitname/CN=\$hostname/emailAddress=\$email\"
sudo chown drawpileuser /home/drawpileuser/cert.pem
sudo chown drawpileuser /home/drawpileuser/key.pem
sudo chmod 755 /home/drawpileuser/\" > /home/drawpileuser/ssl.sh
echo
sudo chmod 755 /home/drawpileuser/
echo
sudo chmod 777 /home/drawpileuser/ssl.sh
echo
hostname=\"--local-host \$hostname\"
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo 'Making backup of drawpile-srv.service before modification.'
echo
sudo cp \"\$dpinstallloc/Programs/Drawpile/server/drawpile-srv.service\" \"\$dpinstallloc/Programs/Drawpile/server/drawpile-srv.service.backup\"
echo
echo 'Modifying drawpile-srv.service . . .'
echo
sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile/server/drawpile-srv.service\"
#
cd \"\$dpinstallloc\"
sudo chmod 777 \"\$dpinstallloc\" -R
cd \"\$dpinstallloc/Programs\"
sudo mkdir -p -v Drawpile-Srv-Files
cd Drawpile-Srv-Files
sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/\" -R
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
#
# This is for session recordings, however it is not necessary when using file backed sessions. 
# --record \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\"
#
# Code to place after the database file in order to use httpd to authenticate instead. Username and password is plain text, no hash.
#  --web-admin-access all --web-admin-auth user:pass
#
# Default location of the GUI Database if no location is specified.
# /home/pi/.local/share/drawpile/drawpile-srv/guiserver.db
#
# Location provided by Calle for drawpileuser database. Can be used when drawpile-srv supports socket activation for web admin.
# /home/drawpileuser/server.db
#
echo \"Determine how you want drawpile-srv to run now. \${underline}Option 2\${normal} is recommended\"
echo 'if you have a hostname. If you do not have a hostname, option 15 instead.'
echo 'All settings will automatically work, though some additional setup for'
echo 'session templates is required. Read more on the hyperlink below.'
echo
echo \"\${bold}\${cyan}Short summary of options:\${normal}\"
echo \"    Read more --> \${underline}https://drawpile.net/help/server/\${normal}\"
echo \"\${bold}web remote admin\${normal} - add users, ban users, set auto session reset, etc.\"
echo \"\${bold}file backed sessions\${normal} - write sessions to file, helps sessions to survive\"
echo '    power outages and server crashes. Can serve as a recording if server'
echo '    database set to Archive terminated sessions, however filenames are'
echo '    saved like 926a80d5-3168-401d-b406-f05d3fc05c32.dprec with a'
echo '    corresponding text file, the session title is inside the text file.'
echo \"\${bold}recording\${normal} - records all sessions, may not be necessary with file backed\"
echo '    sessions turned on, though it can be useful for debugging broken boards or '
echo '    recovering art from broken boards. This can be turned on an individual basis'
echo '    when a room is active on the server by going to File and then Record... ,'
echo \"    or by combining the file backed sessions option and checking \${underline}Archive\"
echo \"    terminated sessions\${normal}.\"
echo \"\${bold}templates\${normal} - provide default sessions that always exist on the server\"
echo '    This feature is not yet implemented in the graphical user interface but they can be'
echo '    turned on using one of the options provided below.'
echo \"\${bold}ssl\${normal} - Encrypt data sent so conversations and drawings are kept private.\"
echo '    If you do not have this option on, sensitive information should not'
echo '    be shared in sessions. I.E. credit cards.'
echo
echo \"\${bold}\${cyan}These options assume you have a host name.\${normal}\"
echo '  1  - all options.'
echo \"  2  - all options except session recording - \${underline}recommended\${normal}\"
echo '  3  - web admin, session recording, ssl, & templates'
echo '  4  - web admin, file backed sessions, & ssl'
echo '  5  - web admin, file backed sessions, & templates'
echo '  6  - web admin, session recording, & ssl'
echo '  7  - web admin, session recording, & templates'
echo '  8  - web admin, ssl, & templates'
echo '  9  - web admin & file backed sessions'
echo '  10 - web admin & session recording'
echo '  11 - web admin & ssl'
echo '  12 - web admin & templates'
echo '  13 - web admin'
echo
echo \"\${bold}\${cyan}These options assume you do not have a host name.\${normal}\"
echo '  14  - all options.'
echo '  15  - all options except session recording'
echo '  16  - web admin, session recording, & templates'
echo '  17  - web admin & file backed sessions'
echo '  18  - web admin & session recording'
echo '  19  - web admin & templates'
echo '  20  - web admin'
echo
read systemd
echo
if [ \"\$systemd\" == \"1\" ]; then
  echo 'Selected - 1 - all options.'
  sudo mkdir -p -v sessions
  sudo mkdir -p -v templates
  sudo mkdir -p -v session-record
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions\" -R
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record\" -R
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  systemd=\"--record \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --sessions \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" --ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem \$hostname --extauth https://drawpile.net/api/ext-auth/\"
elif [ \"\$systemd\" == \"2\" ]; then
  echo 'Selected - 2 - all options except session recording'
  echo '         - recommended'
  sudo mkdir -p -v sessions
  sudo mkdir -p -v templates
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions\" -R
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  systemd=\"--sessions \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" --ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem \$hostname --extauth https://drawpile.net/api/ext-auth/\"
elif [ \"\$systemd\" == \"3\" ]; then
  echo 'Selected - 3 - web admin, session recording, ssl, & templates'
  sudo mkdir -p -v templates
  sudo mkdir -p -v session-record
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record\" -R
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  systemd=\"--record \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --templates \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" --ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem \$hostname --extauth https://drawpile.net/api/ext-auth/\"
elif [ \"\$systemd\" == \"4\" ]; then
  echo 'Selected - 4 - web admin, file backed sessions, & ssl'
  sudo mkdir -p -v sessions
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions\" -R
  systemd=\"--sessions \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" --ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem \$hostname --extauth https://drawpile.net/api/ext-auth/\"
elif [ \"\$systemd\" == \"5\" ]; then
  echo 'Selected - 5  - web admin, file backed sessions, & templates'
  sudo mkdir -p -v sessions
  sudo mkdir -p -v templates
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions\" -R
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  systemd=\"--sessions \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" \$hostname --extauth https://drawpile.net/api/ext-auth/\"
elif [ \"\$systemd\" == \"6\" ]; then
  echo 'Selected - 6  - web admin, session recording, & ssl'
  sudo mkdir -p -v session-record
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record\" -R
  systemd=\"--record \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem \$hostname --extauth https://drawpile.net/api/ext-auth/\"
elif [ \"\$systemd\" == \"7\" ]; then
  echo 'Selected - 7  - web admin, session recording, & templates'
  sudo mkdir -p -v templates
  sudo mkdir -p -v session-record
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record\" -R
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  systemd=\"--record \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --templates \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" \$hostname --extauth https://drawpile.net/api/ext-auth/\"
elif [ \"\$systemd\" == \"8\" ]; then
  echo 'Selected - 8  - web admin, ssl, & templates'
  sudo mkdir -p -v templates
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  systemd=\"--templates \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" --ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem \$hostname --extauth https://drawpile.net/api/ext-auth/\"
elif [ \"\$systemd\" == \"9\" ]; then
  echo 'Selected - 9  - web admin & file backed sessions'
  sudo mkdir -p -v sessions
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions\" -R
  systemd=\"--sessions \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" \$hostname --extauth https://drawpile.net/api/ext-auth/\"
elif [ \"\$systemd\" == \"10\" ]; then
  echo 'Selected - 10 - web admin & session recording'
  sudo mkdir -p -v session-record
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record\" -R
  systemd=\"--record \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" \$hostname --extauth https://drawpile.net/api/ext-auth/\"
elif [ \"\$systemd\" == \"11\" ]; then
  echo 'Selected - 11 - web admin & ssl'
  systemd=\"--ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem \$hostname --extauth https://drawpile.net/api/ext-auth/\"
elif [ \"\$systemd\" == \"12\" ]; then
  echo 'Selected - 12 - web admin & templates'
  sudo mkdir -p -v templates
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  systemd=\"--templates \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" \$hostname --extauth https://drawpile.net/api/ext-auth/\"
elif [ \"\$systemd\" == \"13\" ]; then
  echo 'Selected - 13 - w web admin'
  systemd=\"\$hostname --extauth https://drawpile.net/api/ext-auth/\"
elif [ \"\$systemd\" == \"14\" ]; then
  echo 'Selected - 14 - all options.'
  sudo mkdir -p -v sessions
  sudo mkdir -p -v templates
  sudo mkdir -p -v session-record
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions\" -R
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record\" -R
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  systemd=\"--record \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --sessions \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" --extauth https://drawpile.net/api/ext-auth/\"
elif [ \"\$systemd\" == \"15\" ]; then
  echo 'Selected - 15 - all options except session recording'
  echo '         - recommended'
  sudo mkdir -p -v sessions
  sudo mkdir -p -v templates
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions\" -R
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  systemd=\"--sessions \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" --extauth https://drawpile.net/api/ext-auth/\" 
elif [ \"\$systemd\" == \"16\" ]; then
  echo 'Selected - 16 - web admin, session recording, & templates'
  sudo mkdir -p -v templates
  sudo mkdir -p -v session-record
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record\" -R
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  systemd=\"--record \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --templates \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" --extauth https://drawpile.net/api/ext-auth/\"
elif [ \"\$systemd\" == \"17\" ]; then
  echo 'Selected - 17 - web admin & file backed sessions'
  sudo mkdir -p -v sessions
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions\" -R
  systemd=\"--sessions \"\$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" --extauth https://drawpile.net/api/ext-auth/\"
elif [ \"\$systemd\" == \"18\" ]; then
  echo 'Selected - 18  - web admin, session recording'
  sudo mkdir -p -v session-record
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record\" -R
  systemd=\"--record \"\$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --extauth https://drawpile.net/api/ext-auth/\"
elif [ \"\$systemd\" == \"19\" ]; then
  echo 'Selected - 19  - web admin & templates'
  sudo mkdir -p -v templates
  sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  sudo chown drawpileuser \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates\" -R
  systemd=\"--templates \"\$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" --extauth https://drawpile.net/api/ext-auth/\"
else [ \"\$systemd\" == \"20\" ]
  echo 'Selected - 20 - web admin'
  systemd=\"--extauth https://drawpile.net/api/ext-auth/\"
fi
#
#
#1 - Socket Activation
echo \"[Unit]
Description=Drawpile dedicated server
After=network.target
Documentation=man:drawpile-srv

[Service]
# Note: set this to the correct path and add -d or -c to load the right configuration file
ExecStart=/usr/local/bin/drawpile-srv -d /home/drawpileuser/server.db \$systemd

# The AppImage is not built with systemd integration at the moment,
# so type=simple should be used with it:
# Type=simple
Restart=always

# If you are using a self-built or distribution provided version with
# systemd integration, use this to enable socket activation:
Type=notify
NotifyAccess=main

# Note: in order to use session recording and SSL safely,
# a dedicated user account should be created for drawpile-srv.
User=drawpileuser

[Install]
WantedBy=multi-user.target\" > \"\$dpinstallloc/Programs/Drawpile/server/drawpile-srv01.service\"
#
#
#2 - Server starts on Raspberry Pi power up
echo \"[Unit]
Description=Drawpile dedicated server
After=network.target
Documentation=man:drawpile-srv

[Service]
# Note: set this to the correct path and add -d or -c to load the right configuration file
ExecStart=/usr/local/bin/drawpile-srv -d /home/drawpileuser/server.db --web-admin-port 27780 \$systemd

# The AppImage is not built with systemd integration at the moment,
# so type=simple should be used with it:
Type=simple
Restart=always

# If you are using a self-built or distribution provided version with
# systemd integration, use this to enable socket activation:
#Type=notify
#NotifyAccess=main

# Note: in order to use session recording and SSL safely,
# a dedicated user account should be created for drawpile-srv.
User=drawpileuser

[Install]
WantedBy=multi-user.target\" > \"\$dpinstallloc/Programs/Drawpile/server/drawpile-srv02.service\"
echo
sudo chmod 655 \"\$dpinstallloc/Programs/Drawpile/server/drawpile-srv.service\"
sudo chmod 777 \"\$dpinstallloc/Programs/Drawpile/server/drawpile-srv.service.backup\"
sudo chmod 655 \"\$dpinstallloc/Programs/Drawpile/server/drawpile-srv01.service\"
sudo chmod 655 \"\$dpinstallloc/Programs/Drawpile/server/drawpile-srv02.service\"
echo
echo 'Copying files drawpile-srv.service and drawpile-srv.socket to make systemd work.'
sudo cp \"\$dpinstallloc/Programs/Drawpile/server/drawpile-srv01.service\" /etc/systemd/system
sudo cp \"\$dpinstallloc/Programs/Drawpile/server/drawpile-srv02.service\" /etc/systemd/system
sudo cp \"\$dpinstallloc/Programs/Drawpile/server/drawpile-srv.socket\" /etc/systemd/system
echo
echo 'Reloading systemctl and systemd.'
sudo systemctl daemon-reload
sudo systemctl restart systemd-modules-load
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo \"\${bold}Update Login Info NGINX for Server Administration.\${normal}\"
echo
echo 'Please type in a username you wish to use for making changes to your drawpile'
echo 'server. If you make a mistake or need to update the server login, open a new'
echo 'terminal window and type in the following:'
echo
echo 'sudo htpasswd -bc /etc/nginx/passwords USERNAME PASSWORD'
echo
echo 'Where USERNAME can be any username you wish to use for login and PASSWORD'
echo 'is can be any password you like to use without spaces.'
echo
read -p \"Enter username: \" NGINXusername1
read -p \"Enter username again: \" NGINXusername2
while [ \$NGINXusername1 != \$NGINXusername2 ]
do
	echo
        echo \"Usernames entered do not match!\"
	echo
        read -p \"Enter username: \" NGINXusername1
        read -p \"Enter username again: \" NGINXusername2
done
echo
echo \"Your Server Administration username is: \$NGINXusername1\"
echo
echo
read -p \"Enter password without spaces: \" nginxhtpasswd1
read -p \"Enter password without spaces again: \" nginxhtpasswd2
while [ \$nginxhtpasswd1 != \$nginxhtpasswd2 ]
do
	echo
        echo \"Passwords entered do not match!\"
	echo
        read -p \"Enter password without spaces: \" nginxhtpasswd1
        read -p \"Enter password without spaces again: \" nginxhtpasswd2
done
echo
echo \"Your Server Administration password is: \$nginxhtpasswd1\"
echo
sudo htpasswd -bc /etc/nginx/passwords \$NGINXusername1 \$nginxhtpasswd1
echo
sudo sed -i 's!proxy_pass http://127.0.0.1:8080/\;!proxy_pass http://127.0.0.1:27780/\;!' /etc/nginx/nginx.conf
sudo sed -i 's!proxy_pass http://127.0.0.1:22780/\;!proxy_pass http://127.0.0.1:27780/\;!' /etc/nginx/nginx.conf
echo
sudo /etc/init.d/nginx restart
sudo nginx -s reload
sudo /etc/init.d/nginx restart" > "$dpinstallloc/Programs/Drawpile-Srv-Files/server-scripts/startup-options.sh"
sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/server-scripts/startup-options.sh"
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
echo "#!/bin/bash
\$drawpilescriptversion=$drawpilescriptversion
bold=\$(tput bold)
underline=\$(tput smul)
red=\$(tput setaf 1)
green=\$(tput setaf 2)
yellow=\$(tput setaf 3)
blue=\$(tput setaf 4)
magenta=\$(tput setaf 5)
cyan=\$(tput setaf 6)
normal=\$(tput sgr0)
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
echo 'If socket activation is enabled, it will say enabled on the line starting with'
echo '\"Loaded:\" and it should be running. Ignore the part after vendor preset.'
echo
systemctl status drawpile-srv.socket --no-pager
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
echo 'If start up on Pi power up is enabled, it will say enabled on the line starting'
echo 'with \"Loaded:\" and it should be running. Ignore the part after vendor preset.'
echo
systemctl status drawpile-srv.service --no-pager
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
echo \"\${bold}What changes do you need to make to the server?\${normal}\"
echo
echo '1 - Switch startup type to socket activation or on boot up.'
echo '2 - NGINX Login Change for Remote Server Administration.'
echo '3 - Change all startup options.'
echo
echo '4 - Restart server which is NOT using socket activation.'
echo
echo '5 - Verify server management scripts are up to date.'
echo '6 - Update Drawpile Server to newest version.'
echo
echo '7 - Do nothing and close script.'

echo
read xyx
echo
if [ \"\$xyx\" == \"1\" ]; then
  \"$dpinstallloc/Programs/Drawpile-Srv-Files/server-scripts/drawpile-startup-switch.sh\"
elif [ \"\$xyx\" == \"2\" ]; then
  \"$dpinstallloc/Programs/Drawpile-Srv-Files/server-scripts/NGINX-password-change.sh\"
elif [ \"\$xyx\" == \"3\" ]; then
  \"$dpinstallloc/Programs/Drawpile-Srv-Files/server-scripts/startup-options.sh\"
elif [ \"\$xyx\" == \"4\" ]; then
  \"$dpinstallloc/Programs/Drawpile-Srv-Files/server-scripts/drawpile-server-restart.sh\"
elif [ \"\$xyx\" == \"5\" ]; then
  echo '--------------------------------------------------------------------------------'
  echo '--------------------------------------------------------------------------------'
  echo
 echo \"Script Version $drawpilescriptversion\"
  \$drawpilescriptversion=$drawpilescriptversion
  \$scriptname2=$scriptname2
  cd \"$dpinstallloc/Programs\"
  sudo wget \"https://raw.githubusercontent.com/Bluestrings-Drawpile/PiDrawpile/master/\$scriptname2\"
 
  echo
  echo '--------------------------------------------------------------------------------'
  echo '--------------------------------------------------------------------------------'
  echo
  dpcheckversion=\$(grep -m 1 \"drawpilescriptversion=\" \"$dpinstallloc/Programs/\$scriptname2\" | cut -c 23-26)
  currentscriptname=\"\$(basename \"\$(test -L \"\$0\" && readlink \"\$0\" || echo \"\$0\")\")\"
  
  if [[ \"$drawpilescriptversion\" < \"\$dpcheckversion\" ]]; then
	echo \"Newest Script is using version \$dpcheckversion.\"
	echo \"Newer version of script available, the old script has been copied over\"
	echo \"the old script. Please re-run this script to use newest version.\"
	cd \"$dpinstallloc\"
	sudo rm -rf \"$dpinstallloc/\$currentscriptname\"
	sudo cp \"$dpinstallloc/Programs/\$scriptname2\" \"$dpinstallloc/\$currentscriptname\"
	sudo chmod 777 \"$dpinstallloc/\$currentscriptname\"
	sudo rm -rf \"$dpinstallloc/Programs/\$scriptname2\"
	echo \"Terminating script in 30 seconds.\"
	echo
	sleep 30s
	exit
  elif [[ \"$drawpilescriptversion\" = \"\$dpcheckversion\" ]]; then
	echo \"Script is newest version available.\"
	sudo rm -rf \"$dpinstallloc/Programs/\$scriptname2\"
  elif [[ \"$drawpilescriptversion\" > \"\$dpcheckversion\" ]]; then
	echo \"It appears the creator of the script has failed to update github with the newest version.\"
	echo \"Please contact him to update the script there by emailing him at wadeschlueter@gmail.com\"
	echo
	echo \"Script in use: $drawpilescriptversion\"
	echo \"Github Script: \$dpcheckversion\"
	echo
	echo \"Pausing script for 30 seconds before continuing.\"
	sudo rm -rf \"$dpinstallloc/Programs/\$scriptname2\"
	sleep 30s
  else
	echo \"Unable to determine script version, proceeding with script.\"
  fi
  echo
  echo '--------------------------------------------------------------------------------'
  echo '--------------------------------------------------------------------------------'
elif [ \"\$xyx\" == \"6\" ]; then
  \"$dpinstallloc/Programs/Drawpile-Srv-Files/server-scripts/drawpile-update.sh\"
else
  echo \"Doing nothing and exiting script.\"
  sleep 10s
  exit
fi

read -p 'Press [Enter] key to continue...'
echo" > "$dpinstallloc/drawpile-server.sh"
sudo chmod 777 "$dpinstallloc/drawpile-server.sh"
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# End Section of Scripts to be generated for managing server. 
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

sudo rm -f "$dpinstallloc/Programs/PiDrawpile/scripts-for-other-scripts-only/$scriptname2"
